<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [

<!ENTITY geography_support
"<inlinemediaobject>
	 <imageobject><imagedata fileref='images/internet.png' /></imageobject>
 </inlinemediaobject>
">
 
<!ENTITY Z_support
"<inlinemediaobject>
	 <imageobject><imagedata fileref='images/cube.png' /></imageobject>
 </inlinemediaobject>
">
]>
<book lang="en">
	<bookinfo>
		<title>MobilityDB Manual</title>

		<author>
			<firstname>Esteban</firstname>

			<surname>Zim&aacute;nyi</surname>

			<affiliation>
				<orgname>Universit&eacute; libre de Bruxelles, Belgium</orgname>
			</affiliation>
		</author>

		<pubdate>01.04.2019</pubdate>
	</bookinfo>

	<chapter id ="introduction">
		<title>Introduction</title>

		<para>MobilityDB is an extension of <ulink url="http://postgresql.org">PostgreSQL</ulink> and <ulink url="http://postgis.net">PostGIS</ulink> that provides temporal types. Such types are data types that represent the evolution on time of values of some element type, called the base type of the temporal type. For instance, temporal integers may be used to represent the evolution on time of the number of employees of a department. In this case, the data type is &ldquo;temporal integer&rdquo; and &ldquo;integer&rdquo; is the base type. Similarly, a temporal float may be used to represent the evolution on time of the temperature of a room. As another example, a temporal point may be used to represent the evolution on time of the location of a car, as reported by GPS devices. Temporal types are useful because representing values that evolve in time is essential in many applications, for example in mobility applications. Furthermore, the operators on the base types (such as arithmetic operators and aggregation for integers and floats, spatial relationships and distance for geometries) can be intuitively generalized when the values evolve in time.</para>

		<para>MobilityDB provides the following temporal types: <varname>tbool</varname>, <varname>tint</varname>, <varname>tfloat</varname>, <varname>ttext</varname>, <varname>tgeometry</varname> and <varname>tgeography</varname>. These temporal types are based, respectively, on the <varname>bool</varname>, <varname>int</varname>, <varname>float</varname>, and <varname>text</varname> base types provided by PostgreSQL, and on the <varname>geometry</varname> and <varname>geography</varname> base types provided by PostGIS (restricted to 2D or 3D points).<footnote><para>Although 4D temporal points can be represented, the M dimension is currently not taken into account.</para></footnote> Furthermore, MobilityDB uses four time types to represent extents of time: the <varname>timestamptz</varname> type provided by PostgreSQL and three new types which are <varname>period</varname>, <varname>timestampset</varname>, and <varname>periodset</varname>. In addition, two range types are defined in MobilityDB: <varname>intrange</varname> and <varname>floatrange</varname>.</para>
		
	</chapter>
	
	<chapter id="time_types_range_types">
		<title>Time Types and Range Types</title>

		<para>Temporal types are based on four time types: the <varname>timestamptz</varname> type provided by PostgreSQL and three new types which are <varname>period</varname>, <varname>timestampset</varname>, and <varname>periodset</varname>.</para>

		<para>The <varname>period</varname> type is a specialized version of the <varname>tstzrange</varname> (short for timestamp with time zone range) type provided by PostgreSQL. Type <varname>period</varname> has similar functionality as type <varname>tstzrange</varname> but has a more efficient implementation, in particular it is of fixed length while the <varname>tstzrange</varname> type is of variable length. Furthermore, empty periods and infinite bounds are not allowed in <varname>period</varname> values, while they are allowed in <varname>tstzrange</varname> values.</para>

		<para>A value of the <varname>period</varname> type has two bounds, the lower bound and the upper bound, which are <varname>timestamptz</varname> values. The bounds can be inclusive or exclusive. An inclusive bound means that the boundary instant is included in the period, while an exclusive bound means that the boundary instant is not included in the period. In the text form of a <varname>period</varname> value, inclusive and exclusive lower bounds are represented, respectively, by &ldquo;<varname>[</varname>&rdquo; and &ldquo;<varname>(</varname>&rdquo;. Likewise, inclusive and exclusive upper bounds are represented, respectively, by &ldquo;<varname>]</varname>&rdquo; and &ldquo;<varname>)</varname>&rdquo;. In a <varname>period</varname> value, the lower bound must be less than or equal to the upper bound. A <varname>period</varname> value with equal and inclusive bounds is called an instant period and corresponds to a <varname>timestamptz</varname> value. Examples of <varname>period</varname> values are as follows:
			<programlisting>
SELECT period '[2012-01-01 08:00:00, 2012-01-03 09:30:00)';
-- Instant period
SELECT period '[2012-01-01 08:00:00, 2012-01-01 08:00:00]';
-- Erroneous periods
SELECT period '[2012-01-01 08:10:00, 2012-01-01 08:00:00]'; -- invalid bounds
SELECT period '[2012-01-01 08:00:00, 2012-01-01 08:00:00)'; -- empty period
			</programlisting>
		</para>

		<para>The <varname>period</varname> type has a constructor function that accepts two or four arguments. The two-argument form constructs a period in <emphasis role="strong">normal</emphasis> form, that is, with inclusive lower bound and exclusive upper bound. The four-argument form constructs a period with bounds specified by the third and fourth arguments, which are Boolean values stating, respectively, whether the left and right bounds are inclusive or not. Examples of periods defined with the constructor functions are as follows:
			<programlisting>
-- It is assumed that the lower bound is inclusive and the upper bound is exclusive.
SELECT period('2012-01-01 08:00:00', '2012-01-03 08:00:00');
-- Period defined with four arguments
SELECT period('2012-01-01 08:00:00', '2012-01-03 09:30:00', false, true);
			</programlisting>
		</para>

		<para>The <varname>timestampset</varname> type represents a set of distinct <varname>timestamptz</varname> values. A <varname>timestampset</varname> value must contain at least one element, in which case it corresponds to a <varname>timestamptz</varname> value. The elements composing a <varname>timestampset</varname> value must be ordered. Examples of <varname>timestampset</varname> values are as follows:
			<programlisting>
SELECT timestampset '{2012-01-01 08:00:00, 2012-01-03 09:30:00}';
-- Singleton timestampset
SELECT timestampset '{2012-01-01 08:00:00}';
-- Erroneous timestampset values
SELECT timestampset '{2012-01-01 08:10:00, 2012-01-01 08:00:00}'; -- unordered elements
SELECT timestampset '{2012-01-01 08:00:00, 2012-01-01 08:00:00}'; -- duplicate elements
			</programlisting>
		</para>

		<para>The <varname>timestampset</varname> type has a constructor function that accepts a single argument which is an array of <varname>timestamptz</varname> values. An example of <varname>timestampset</varname> value defined with the constructor function is as follows:
			<programlisting>
SELECT timestampset(ARRAY[timestamptz '2012-01-01 08:00:00', '2012-01-03 09:30:00']);
			</programlisting>
		</para>

		<para>Finally, the <varname>periodset</varname> type represents a set of disjoint <varname>period</varname> values. A <varname>periodset</varname> value must contain at least one element, in which case it corresponds to a <varname>period</varname> value. The elements composing a <varname>periodset</varname> value must be ordered. Examples of <varname>periodset</varname> values are as follows:
			<programlisting>
SELECT periodset '{[2012-01-01 08:00:00, 2012-01-01 08:10:00],
[2012-01-01 08:20:00, 2012-01-01 08:40:00]}';
-- Singleton periodset
SELECT periodset '{[2012-01-01 08:00:00, 2012-01-01 08:10:00]}';
-- Erroneous periodset values
SELECT periodset '{[2012-01-01 08:20:00, 2012-01-01 08:40:00],
[2012-01-01 08:00:00, 2012-01-01 08:10:00]}';
-- unordered elements
SELECT periodset '{[2012-01-01 08:00:00, 2012-01-01 08:10:00],
[2012-01-01 08:05:00, 2012-01-01 08:15:00]}';
-- overlapping elements
			</programlisting>
		</para>

		<para>The <varname>periodset</varname> type has a constructor function that accepts a single argument which is an array of <varname>period</varname> values. An example of <varname>periodset</varname> value defined with the constructor function is as follows:
			<programlisting>
SELECT periodset(ARRAY[period '[2012-01-01 08:00:00, 2012-01-01 08:10:00]',
'[2012-01-01 08:20:00, 2012-01-01 08:40:00]']);
			</programlisting>
		</para>

		<para>Values of the <varname>periodset</varname> type are converted into a <emphasis role="strong">normal</emphasis> form so that equivalent values have identical representations. For this, consecutive adjacent period values are merged when possible. An example of transformation into a normal form is as follows:
			<programlisting>
SELECT periodset '{[2012-01-01 08:00:00, 2012-01-01 08:10:00),
[2012-01-01 08:10:00, 2012-01-01 08:10:00], (2012-01-01 08:10:00, 2012-01-01 08:20:00]}';
-- "{[2012-01-01 08:00:00+00,2012-01-01 08:20:00+00]}"
			</programlisting>
		</para>

		<para>Values of the <varname>timestamptz</varname> type, the <varname>tstzrange</varname> type, or the time types can be converted to one another using an explicit <varname>CAST</varname> or using the <varname>::</varname> notation. This is shown next.
			<programlisting>
-- Converts a timestamptz to another time type
SELECT CAST(timestamptz '2012-01-01 08:00:00' AS period);
SELECT CAST(timestamptz '2012-01-01 08:00:00' AS timestampset);
SELECT CAST(timestamptz '2012-01-01 08:00:00' AS periodset);
-- Converts a period to a periodset
SELECT period '[2012-01-01 08:00:00, 2012-01-01 08:30:00)'::periodset;
-- Converts a period to a tstzrange
SELECT period '[2012-01-01 08:00:00, 2012-01-01 08:30:00)'::tstzrange;
-- Converts a tstzrange to a period
SELECT tstzrange '[2012-01-01 08:00:00, 2012-01-01 08:30:00)'::period;
			</programlisting>
		</para>

		<para>Besides the built-in range types provided by PostgreSQL, two additional range types are defined, <varname>intrange</varname> (another name for <varname>int4range</varname>) and <varname>floatrange</varname>.</para>

		<sect1 id ="functions_operations_time_types">
			<title>Functions and Operators for Time Types and Range Types</title>
				
			<para>We present next the functions and operators for time types. These functions and operators are polymorphic, that is, their arguments may be of several types, and the result type may depend on the type of the arguments. To express this in the signature of the operators, we use the following notation:
				<itemizedlist>
					<listitem>
					<para>A set of types such as <varname>{period, timestampset, periodset}</varname> represents any of the types listed,</para>
					</listitem>
					<listitem>
					<para><varname>time</varname> represents any time type, that is, <varname>timestamptz</varname>, <varname>period</varname>, <varname>timestampset</varname>, or <varname>periodset</varname>,</para>
					</listitem>
					<listitem>
					<para><varname>number</varname> represents any numeric type, that is, <varname>int</varname> or <varname>float</varname>,</para>
					</listitem>
					<listitem>
					<para><varname>range</varname> represents any numeric range type, that is, <varname>intrange</varname> or <varname>floatrange</varname>.</para>
					</listitem>
				</itemizedlist>
			</para>
				
			<para>As an example, the signature of the contains operator (<varname>@&gt;</varname>) is as follows:
				<programlisting>
{timestampset, period, periodset} @&gt; time
				</programlisting>
			Furthermore, for conciseness, the time part of the timestamps is omitted in the examples. Recall that in that case PostgreSQL assumes the time <varname>00:00:00</varname>.</para>

			<sect2>
				<title>Accessor Functions</title>
				<para>The functions available for use with the time types are given next.</para>

				<itemizedlist>
					<listitem>
					 <para><varname>memSize</varname>: Memory size in bytes</para>
						<para>Signature: <varname>memSize({timestampset, periodset}): integer</varname></para>
						<programlisting>
SELECT memSize(timestampset '{2012-01-01, 2012-01-02, 2012-01-03}');
-- 104
SELECT memSize(periodset '{[2012-01-01, 2012-01-02], [2012-01-03, 2012-01-04], [2012-01-05, 2012-01-06]}');
-- 136
						</programlisting>
					</listitem>

					<listitem>
					<para><varname>lower</varname>: Lower bound</para>
					<para>Signature: <varname>lower(period): timestamptz</varname></para>
					<programlisting>
SELECT lower(period '[2011-01-01, 2011-01-05)');
-- "2011-01-01"
					</programlisting>
					</listitem>

					<listitem>
						<para><varname>upper</varname>: Upper bound</para>
						<para>Signature: <varname>upper(period): timestamptz</varname></para>
						<programlisting>
SELECT upper(period '[2011-01-01, 2011-01-05)');
-- "2011-01-05"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>lower_inc</varname>: Is the lower bound inclusive?</para>
						<para>Signature: <varname>lower_inc(period): boolean</varname></para>
						<programlisting>
SELECT lower_inc(period '[2011-01-01, 2011-01-05)');
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>upper_inc</varname>: Is the upper bound inclusive?</para>
						<para>Signature: <varname>upper_inc(period): boolean</varname></para>
						<programlisting>
SELECT upper_inc(period '[2011-01-01, 2011-01-05)');
-- false
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>duration</varname>: Duration</para>
						<para>Signature: <varname>duration({period, periodset}): interval</varname></para>
						<programlisting>
SELECT duration(period '[2012-01-01, 2012-01-03)');
-- "2 days"
SELECT duration(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-05)}');
-- "3 days"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>timespan</varname>: Period on which the timestamp set or period set is defined ignoring the potential time gaps</para>
						<para>Signature: <varname>timespan({timestampset, periodset}): period</varname></para>
						<programlisting>
SELECT timespan(timestampset '{2012-01-01, 2012-01-03, 2012-01-05}');
-- "[2012-01-01, 2012-01-05]"
SELECT timespan(periodset '{[2012-01-01, 2012-01-02), [2012-01-03, 2012-01-04)}');
-- "[2012-01-01, 2012-01-04)"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>numTimestamps</varname>: Number of distinct timestamps</para>
						<para>Signature: <varname>numTimestamps({timestampset, periodset}): int</varname></para>
						<programlisting>
SELECT numTimestamps(timestampset '{2012-01-01, 2012-01-03, 2012-01-04}');
-- 3
SELECT numTimestamps(periodset '{[2012-01-01, 2012-01-03), (2012-01-03, 2012-01-05)}');
-- 3
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>startTimestamp</varname>: Start timestamp</para>
						<para>The function does not take into account whether the bounds are inclusive or not.</para>
						<para>Signature: <varname>startTimestamp({timestampset, periodset}): timestamptz</varname></para>
						<programlisting>
SELECT startTimestamp(periodset '{[2012-01-01, 2012-01-03), (2012-01-03, 2012-01-05)}');
-- "2012-01-01"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>endTimestamp</varname>: End timestamp</para>
						<para>The function does not take into account whether the bounds are inclusive or not.</para>
						<para>Signature: <varname>endTimestamp({timestampset, periodset}): timestamptz</varname></para>
						<programlisting>
SELECT endTimestamp(periodset '{[2012-01-01, 2012-01-03), (2012-01-03, 2012-01-05)}');
-- "2012-01-05"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>timetampN</varname>: N-th distinct timestamp</para>
						<para>The function does not take into account whether the bounds are inclusive or not.</para>
						<para>Signature: <varname>timetampN({timestampset, periodset}, int): timestamptz</varname></para>
						<programlisting>
SELECT timestampN(periodset '{[2012-01-01, 2012-01-03), (2012-01-03, 2012-01-05)}', 3);
-- "2012-01-04"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>timestamps</varname>: Distinct timestamps</para>
						<para>The function does not take into account whether the bounds are inclusive or not.</para>
						<para>Signature: <varname>timestamps({timestampset, periodset}): timestampset</varname></para>
						<programlisting>
SELECT timestamps(periodset '{[2012-01-01, 2012-01-03), (2012-01-03, 2012-01-05)}');
-- "{"2012-01-01", "2012-01-03", "2012-01-05"}"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>numPeriods</varname>: Number of periods</para>
						<para>Signature: <varname>numPeriods(periodset): int</varname></para>
						<programlisting>
SELECT numPeriods(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-04],
[2012-01-05, 2012-01-06)}');
-- 3
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>startPeriod</varname>: Start period</para>
						<para>Signature: <varname>startPeriod(periodset): period</varname></para>
						<programlisting>
SELECT startPeriod(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-04],
[2012-01-05, 2012-01-06)}');
-- "[2012-01-01,2012-01-03)"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>endPeriod</varname>: End period</para>
						<para>Signature: <varname>endPeriod(periodset): period</varname></para>
						<programlisting>
SELECT endPeriod(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-04],
[2012-01-05, 2012-01-06)}');
-- "[2012-01-05,2012-01-06)"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>periodN</varname>: N-th period</para>
						<para>Signature: <varname>periodN(periodset, int): period</varname></para>
						<programlisting>
SELECT periodN(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-04],
[2012-01-05, 2012-01-06)}', 2);
-- "[2012-01-04,2012-01-04]"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>periods</varname>: Periods</para>
						<para>Signature: <varname>periods(periodset): period[]</varname></para>
						<programlisting>
SELECT periods(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-04], [2012-01-05, 2012-01-06)}');
-- "{"[2012-01-01,2012-01-03)","[2012-01-04,2012-01-04]","[2012-01-05,2012-01-06)"}"
						</programlisting>
					</listitem>
					
				</itemizedlist>
			</sect2>
			
			<sect2 id="operators">
				<title>Operators</title>
				<para>In PostgreSQL, the range operators <varname>&lt;&lt;</varname>, <varname>&amp;&lt;</varname>, <varname>&gt;&gt;</varname>, <varname>&amp;&gt;</varname>, and <varname>-|-</varname> only accept a range as left or right argument. We extended these operators for numeric ranges so that one argument may be an integer or a float.</para>

				<para>The comparison operators (<varname>=</varname>, <varname>&lt;</varname>, and so on) require that the left and right arguments be of the same type. Excepted the equality and inequality, the other comparison operators are not useful in the real world but allow B-tree indexes to be constructed on time types.</para>

				<para>The operators available for the time types and range types are given next.</para>

				<itemizedlist>
					<listitem>
						<para><varname>=</varname>: Equal</para>
						<para>Signature: <varname>time = time</varname></para>
						<programlisting>
SELECT period '[2012-01-01, 2012-01-04)' = period '[2012-01-01, 2012-01-04)';
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&lt;&gt;</varname>: Not equal</para>
						<para>Signature: <varname>time &lt;&gt; time</varname></para>
						<programlisting>
SELECT period '[2012-01-01, 2012-01-04)' &lt;&gt; period '[2012-01-03, 2012-01-05)';
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&lt;</varname>: Less than</para>
						<para>Signature: <varname>time &lt; time</varname></para>
						<programlisting>
SELECT timestampset '{2012-01-01, 2012-01-04}' &lt; timestampset '{2012-01-01, 2012-01-05}';
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&gt;</varname>: Greater than</para>
						<para>Signature: <varname>time &gt; time</varname></para>
						<programlisting>
SELECT period '[2012-01-03, 2012-01-04)' &gt; period '[2012-01-02, 2012-01-05)';
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&lt;=</varname>: Less than or equal to</para>
						<para>Signature: <varname>time &lt;= time</varname></para>
						<programlisting>
SELECT periodset '{[2012-01-01, 2012-01-04)}' &lt;= periodset '{[2012-01-01, 2012-01-05), [2012-01-06, 2012-01-07)}';
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&gt;=</varname>: Greater than or equal to</para>
						<para>Signature: <varname>time &gt;= time</varname></para>
						<programlisting>
SELECT period '[2012-01-03, 2012-01-05)' &gt;= period '[2012-01-03, 2012-01-04)';
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>@&gt;</varname>: Contains</para>
						<para>Signature: <varname>{timestampset, period, periodset} @&gt; time</varname></para>
						<programlisting>
SELECT period '[2011-01-01, 2011-05-01)' @&gt; period '[2011-02-01, 2011-03-01)';
-- true
SELECT period '[2011-01-01, 2011-05-01)' @&gt; timestamptz '2011-02-01';
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&lt;@</varname>: Is contained by</para>
						<para>Signature: <varname>time &lt;@ {timestampset, period, periodset}</varname></para>
						<programlisting>
SELECT period '[2011-02-01, 2011-03-01)' &lt;@ period '[2011-01-01, 2011-05-01)';
-- true
SELECT timestamptz '2011-01-10' &lt;@ period '[2011-01-01, 2011-05-01)';
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&amp;&amp;</varname>: Overlap (have points in common)</para>
						<para>Signature: <varname>{timestampset, period, periodset} &amp;&amp; {timestampset, period, periodset}</varname></para>
						<programlisting>
SELECT period '[2011-01-01, 2011-01-05)' &amp;&amp; period '[2011-01-02, 2011-01-07)';
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&lt;&lt;</varname>: Scritly left of</para>
						<para>Signature: <varname>{number, range} &lt;&lt; {number, range}</varname></para>
						<programlisting>
SELECT intrange '[15, 20)' &lt;&lt; 20;
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&gt;&gt;</varname>: Strictly right of</para>
						<para>Signature: <varname>{number, range} &gt;&gt; {number, range}</varname></para>
						<programlisting>
SELECT intrange '[15, 20)' &gt;&gt; 10;
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&amp;&lt;</varname>: does not extend to the right of</para>
						<para>Signature: <varname>{number, range} &amp;&lt; {number, range}</varname></para>
						<programlisting>
SELECT intrange '[15, 20)' &amp;&lt; 18;
-- false
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&amp;&gt;</varname>: does not extend to the left of</para>
						<para>Signature: <varname>{number, range} &amp;&gt; {number, range}</varname></para>
						<programlisting>
SELECT period '[2011-01-01, 2011-01-03)' &amp;&gt; period '[2011-01-01, 2011-01-05)';
-- true
SELECT intrange '[15, 20)' &amp;&gt; 30;
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&lt;&lt;#</varname>: Scritly before</para>
						<para>Signature: <varname>time &lt;&lt;# time</varname></para>
						<programlisting>
SELECT period '[2011-01-01, 2011-01-03)' &lt;&lt;# timestampset '{2011-01-03, 2011-01-05}';
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>#&gt;&gt;</varname>: Strictly after</para>
						<para>Signature: <varname>time #&gt;&gt; time</varname></para>
						<programlisting>
SELECT period '[2011-01-04, 2011-01-05)' #&gt;&gt; periodset '{[2011-01-01, 2011-01-04),
[2011-01-05, 2011-01-06)}';
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>&amp;&lt;#</varname>: Is not after of</para>
						<para>Signature: <varname>time &amp;&lt;# time</varname></para>
						<programlisting>
SELECT timestampset '{2011-01-02, 2011-01-05}' &amp;&lt;# period '[2011-01-01, 2011-01-05)';
-- false
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>#&amp;&gt;</varname>: Is not before of</para>
						<para>Signature: <varname>time #&amp;&gt; time</varname></para>
						<programlisting>
SELECT timestamp '2011-01-01' #&amp;&gt; period '[2011-01-01, 2011-01-05)';
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>-|-</varname>: Is adjacent to</para>
						<para>Signature: <varname>time -|- time</varname></para>
		 <para>       <varname>{number, range} -|- {number, range}</varname></para>
						<programlisting>
SELECT period '[2011-01-01, 2011-01-05)' -|- timestampset '{2011-01-05, 2011-01-07}';
-- true
SELECT floatrange '[15, 20)' -|- 20;
-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>+</varname>: Union</para>
						<para>Signature: <varname>time + time</varname></para>
						<programlisting>
SELECT timestampset '{2011-01-01, 2011-01-03, 2011-01-05}' +
timestampset '{2011-01-03, 2011-01-06}';
-- "{2011-01-01, 2011-01-03, 2011-01-05, 2011-01-06}"
SELECT period '[2011-01-01, 2011-01-05)' + period '[2011-01-03, 2011-01-07)';
-- "[2011-01-01, 2011-01-07)"
SELECT periodset '{[2011-01-01, 2011-01-03), [2011-01-04, 2011-01-05)}' +
period '[2011-01-03, 2011-01-04)';
-- "{[2011-01-01, 2011-01-05)}"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>*</varname>: Intersection</para>
						<para>Signature: <varname>time * time</varname></para>
						<programlisting>
SELECT timestampset '{2011-01-01, 2011-01-03}' * timestampset '{2011-01-03, 2011-01-05}';
-- "{2011-01-03}"
SELECT period '[2011-01-01, 2011-01-05)' * period '[2011-01-03, 2011-01-07)';
-- "[2011-01-03, 2011-01-05)"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>-</varname>: Difference</para>
						<para>Signature: <varname>time - time</varname></para>
						<programlisting>
SELECT period '[2011-01-01, 2011-01-05)' - period '[2011-01-03, 2011-01-07)';
-- "[2011-01-01, 2011-01-03)"
SELECT period '[2011-01-01, 2011-01-05]' - period '[2011-01-03, 2011-01-04]'
-- "{[2011-01-01,2011-01-03), (2011-01-04,2011-01-05]}"
SELECT periodset '{[2011-01-01, 2011-01-06], [2011-01-07, 2011-01-10]}' -
periodset '{[2011-01-02, 2011-01-03], [2011-01-04, 2011-01-05], [2011-01-08, 2011-01-09]}';
-- "{[2011-01-01,2011-01-02), (2011-01-03,2011-01-04), (2011-01-05,2011-01-06],
[2011-01-07,2011-01-08), (2011-01-09,2011-01-10]}"
						</programlisting>
					</listitem>
				</itemizedlist>
			</sect2>
		</sect1>

		<sect1 id ="indexing_time_types">
			<title>Indexing of Time Types</title>
			<para>GiST and SP-GiST indexes can be created for table columns of the <varname>timestampset</varname>, <varname>period</varname>, and <varname>periodset</varname> types. An example of creation of a GiST index in a column <varname>during</varname> of type <varname>period</varname> in a table <varname>reservation</varname> is as follows:
					<programlisting>
CREATE TABLE reservation (ReservationID integer PRIMARY KEY, RoomID integer, During period);
CREATE INDEX reservation_during_idx ON reservation USING GIST (during);
					</programlisting>
			</para>
			<para>A GiST or SP-GiST index can accelerate queries involving the following operators: <varname>=</varname>, <varname>&amp;&amp;</varname>, <varname>&lt;@</varname>, <varname>@&gt;</varname>, <varname>&lt;&lt;</varname>, <varname>&gt;&gt;</varname>, <varname>&amp;&lt;</varname>, and <varname>&amp;&gt;</varname>.</para>
			<para>In addition, B-tree indexes can be created for table columns of a time type. For these index types, basically the only useful operation is equality. There is a B-tree sort ordering defined for values of time types, with corresponding <varname>&lt;</varname> and <varname>&gt;</varname> operators, but the ordering is rather arbitrary and not usually useful in the real world. The B-tree support is primarily meant to allow sorting internally in queries, rather than creation of actual indexes.</para>
		</sect1>
	</chapter>

	<chapter id="temporal_types">
		<title>Temporal Types</title>
		<para>There are six built-in temporal types, <varname>tbool</varname>, <varname>tint</varname>, <varname>tfloat</varname>, <varname>ttext</varname>, <varname>tgeompoint</varname>, and <varname>tgeogpoint</varname>, which are, respectively, based on the base types <varname>bool</varname>, <varname>int</varname>, <varname>float</varname>, <varname>text</varname>, <varname>geometry</varname>, and <varname>geography</varname> (the last two types restricted to 2D or 3D points). Depending on their base type, temporal types may be discrete or continuous. Discrete temporal types (which are based on the <varname>boolean</varname>, <varname>int</varname>, or <varname>text</varname> base types) evolve in a stepwise manner, while continuous temporal types (which are based on the <varname>float</varname>, <varname>geometry</varname>, or <varname>geography</varname> base types) evolve in a continuous manner. For example, the number of employees of a department may be represented with a temporal integer, which indicates that its value is constant between two time instants. On the other hand, the temperature of a room may be represented with a temporal float, which indicates that the values are known at the two time instants but continuously evolve between them. Similarly, the location of a car may be represented by a temporal point, since it is typically assumed the location between two consecutive GPS readings can be obtained by (linear) interpolation.</para>

		<para>The duration of a temporal value states the temporal extent at which the evolution of values is recorded. Temporal values come in four durations, namely, instant, instant set, sequence, and sequence set.</para>

		<para>A temporal value of instant duration (briefly, an instant value) represents the value at a time instant, for example
			<programlisting>
SELECT tfloat '17@2018-01-01 08:00:00';
			</programlisting>
		</para>

		<para>A temporal value of instant set duration (briefly, an instant set value) represents the evolution of the value at a set of time instants, where the values between these instants are unknown. An example is as follows:
			<programlisting>
SELECT tfloat '{17@2018-01-01 08:00:00, 17.5@2018-01-01 08:05:00, 18@2018-01-01 08:10:00}';
			</programlisting>
		</para>

		<para>A temporal value of sequence duration (briefly, a sequence value) represents the evolution of the value during a sequence of time instants, where the values between these instants are interpolated using either a stepwise or a linear function. An example is as follows:
			<programlisting>
SELECT tint '(10@2018-01-01 08:00:00, 20@2018-01-01 08:05:00, 15@2018-01-01 08:10:00]';
			</programlisting>
		</para>
				
		<para>As can be seen, a value of a type with sequence duration has a lower and an upper bound that can be inclusive (represented by &lsquo;<varname>[</varname>&rsquo; and &lsquo;<varname>]</varname>&rsquo;) or exclusive (represented by &lsquo;<varname>(</varname>' and &lsquo;<varname>)</varname>'). The value of a temporal sequence is interpreted by assuming that the period of time defined by every pair of consecutive values <varname>v1@t1</varname> and <varname>v2@t2</varname> is lower inclusive and upper exclusive, unless they are the first or the last instants of the sequence and in that case the bounds of the whole sequence apply. Furthermore, the value taken by the temporal sequence between two consecutive instants depends on whether the base type is discrete or continuous. For example, the temporal sequence above represents that the value is <varname>10</varname> during <varname>(2018-01-01 08:00:00, 2018-01-01 08:05:00)</varname>, <varname>20</varname> during <varname>[2018-01-01 08:05:00, 2018-01-01 08:10:00)</varname>, and <varname>15</varname> at the end instant <varname>2018-01-01 08:10:00</varname>. On the other hand, the following temporal sequence
			<programlisting>
SELECT tfloat '(10@2018-01-01 08:00:00, 20@2018-01-01 08:05:00, 15@2018-01-01 08:10:00]';
			</programlisting>
		represents that the value evolves linearly from <varname>10</varname> to <varname>20</varname> during <varname>(2018-01-01 08:00:00, 2018-01-01 08:05:00)</varname> and evolves from <varname>20</varname> to <varname>15</varname> during <varname>[2018-01-01 08:05:00, 2018-01-01 08:10:00]</varname>.</para>

		<para>Finally, a temporal value of sequence set duration (briefly, a sequence set value) represents the evolution of the value at a set of sequences, where the values between these sequences are unknown. An example is as follows:
			<programlisting>
SELECT tfloat '{[17@2018-01-01 08:00:00, 17.5@2018-01-01 08:05:00],
[18@2018-01-01 08:10:00, 18@2018-01-01 08:15:00]}';
			</programlisting>
		</para>
				
		<para>Temporal values with instant or sequence duration are called temporal unit values, while temporal values with instant set or sequence set duration are called temporal set values. Temporal set values can be thought of as an array of the corresponding unit values. Temporal set values must be uniform, that is, they must be constructed from unit values of the same base type and the same duration.</para>

		<para>Temporal types support type modifiers (or <varname>typmod</varname> in PostgreSQL terminology), which specify additional nformation for a column definition. For example, in the following table definition:
			<programlisting>
CREATE TABLE Department(DeptNo integer, DeptName varchar(25), NoEmps tint(Sequence));
			</programlisting>
		the type modifier for the type <varname>varchar</varname> is the value 25, which indicates the maximum length of the values of the column, while the type modifier for the type <varname>tint</varname> is the string <varname>Sequence</varname>, which restricts the duration of the values of the column to be sequences. In the case of temporal alphanumeric types (that is, <varname>tbool</varname>, <varname>tint</varname>, <varname>tfloat</varname>, and <varname>ttext</varname>), the possible values for the type modifier are <varname>Instant</varname>, <varname>InstantSet</varname>, <varname>Sequence</varname>, and <varname>SequenceSet</varname>. If no type modifier is specified for a column, values of any duration are allowed.</para>

		<para>On the other hand, in the case of temporal point types (that is, <varname>tgeompoint</varname> or <varname>tgeogpoint</varname>) the type modifier may be used to specify specify the duration, the dimensionality, and/or the spatial reference identifier (SRID). For example, in the following table definition:
			<programlisting>
CREATE TABLE Fligth(FlightNo integer, Route tgeogpoint(Sequence,PointZ,4326));
			</programlisting>
		the type modifier for the type <varname>tgeogpoint</varname> is composed of three values, the first one indicating the duration as above, the second one the spatial type of the geographies composing the temporal point, and the last one the SRID of the composing geographies. For temporal points, the possible values for the first argument of the type modifier are as above, those for the second argument are either <varname>Point</varname> or <varname>PointZ</varname>, and those for the third argument are valid SRIDs. All the three arguments are optional and if any of them is not specified for a column, values of any duration, dimensionality, and/or SRID are allowed.</para>

		<para>Each temporal type is associated to another type, referred to as its bounding box, which represent its extent in the value and/or the time dimension. The bounding box of the various temporal types are as follows:
			<itemizedlist>
				<listitem>
					<para>The <varname>period</varname> type for the <varname>tbool</varname> and <varname>ttext</varname> types, where only the temporal extent is considered.</para>
				</listitem>

				<listitem>
					<para>The <varname>box</varname> type provided by PostgreSQL for the <varname>tint</varname> and <varname>tfloat</varname> types, where the value extent is defined in the X dimension and the temporal extent in the Y dimension. In this case the timestamps are encoded as <varname>float</varname> numbers.</para>
				</listitem>

				<listitem>
					<para>The <varname>gbox</varname> type provided by PostGIS for the <varname>tgeompoint</varname> and <varname>tgeogpoint</varname> types, where the spatial extent is defined in the X, Y, and Z dimensions, and the temporal extent in the M dimension. In this case the timestamps are encoded as <varname>float</varname> numbers.</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>A rich set of functions and operators is available to perform various operations on temporal types. They are explained in <xref linkend="manipulating_temporal_types" />. Some of these operations, in particular those related to indexes, manipulate bounding boxes for efficiency reasons.</para>

		<sect1 id="examples_temporal_types">
			<title>Examples of Temporal Types</title>
			<para>Examples of usage of temporal alphanumeric types are given next.</para>
			<programlisting>
CREATE TABLE Department(DeptNo integer, DeptName varchar(25), NoEmps tint);
INSERT INTO Department VALUES
(10, 'Research',
	 tint '[10@2012-01-01, 12@2012-04-01, 12@2012-08-01)'),
(20, 'Human Resources',
	 tint '[4@2012-02-01, 6@2012-06-01, 6@2012-10-01)');
CREATE TABLE Temperature(RoomNo integer, Temp tfloat);
INSERT INTO Temperature VALUES
(1001, tfloat '{18.5@2012-01-01 08:00:00, 20.0@2012-01-01 08:10:00}'),
(2001, tfloat '{19.0@2012-01-01 08:00:00, 22.5@2012-01-01 08:10:00}');
-- Value at a timestamp
SELECT RoomNo, valueAtTimestamp(Temp, '2012-01-01 08:10:00')
FROM temperature;
-- 1001;
-- 2001;22.5
-- Restriction to a value
SELECT DeptNo, atValue(NoEmps, 10)
FROM Department;
-- 10;"[10@2012-01-01 00:00:00+00, 10@2012-04-01 00:00:00+00)"
-- 20; NULL
-- Restriction to a period
SELECT DeptNo, atPeriod(NoEmps, '[2012-01-01, 2012-04-01]')
FROM Department;8028r28">
-- 10;"[10@2012-01-01 00:00:00+00, 12@2012-04-01 00:00:00+00]"
-- 20;"[4@2012-02-01 00:00:00+00, 4@2012-04-01 00:00:00+00]"
-- Temporal comparison
SELECT DeptNo, NoEmps #&lt;= 10
FROM Department;
-- 10;"[t@2012-01-01 00:00:00+00, f@2012-04-01 00:00:00+00, f@2012-08-01 00:00:00+00)"
-- 20;"[t@2012-04-02 00:00:00+00, t@2012-10-01 00:00:00+00)"
-- Temporal aggregation
SELECT tsum(NoEmps)
FROM Department;
"{[10@2012-01-01 00:00:00+00, 14@2012-02-01 00:00:00+00, 16@2012-04-01 00:00:00+00,
 18@2012-06-01 00:00:00+00, 6@2012-08-01 00:00:00+00, 6@2012-10-01 00:00:00+00)}"
			</programlisting>
			<para>Examples of usage of temporal point types are given next.</para>
			<programlisting>
CREATE TABLE Trips(CarId integer, TripId integer, Trip tgeompoint);
INSERT INTO Trips VALUES
(10, 1, tgeompoint '{[Point(0 0)@2012-01-01 08:00:00, Point(2 0)@2012-01-01 08:10:00,
Point(2 1)@2012-01-01 08:15:00)}'),
(20, 1, tgeompoint '{[Point(0 0)@2012-01-01 08:05:00, Point(1 1)@2012-01-01 08:10:00,
Point(3 3)@2012-01-01 08:20:00)}');
-- Value at a given timestamp
SELECT CarId, st_astext(valueAtTimestamp(Trip, timestamptz '2012-01-01 08:10:00'))
FROM Trips;
-- 10;"POINT(2 0)"
-- 20;"POINT(1 1)"
-- Restriction to a given value
SELECT CarId, astext(atValue(Trip, 'Point(2 0)'))
FROM Trips;
-- 10;"{"[POINT(2 0)@2012-01-01 08:10:00+00]"}"
-- 20; NULL
-- Restriction to a period
SELECT CarId, astext(atPeriod(Trip, '[2012-01-01 08:05:00,2012-01-01 08:10:00]'))
FROM Trips;
-- 10;"{[POINT(1 0)@2012-01-01 08:05:00+00, POINT(2 0)@2012-01-01 08:10:00+00]}"
-- 20;"{[POINT(0 0)@2012-01-01 08:05:00+00, POINT(1 1)@2012-01-01 08:10:00+00]}"
-- Temporal distance
SELECT T1.CarId, T2.CarId, T1.Trip &lt;-&gt; T2.Trip
FROM Trips T1, Trips T
WHERE T1.CarId &lt; T2.CarId;
-- 10;20;"{[1@2012-01-01 08:05:00+00, 1.4142135623731@2012-01-01 08:10:00+00,
	1@2012-01-01 08:15:00+00)}"
			</programlisting>
		</sect1>
			
		<sect1 id ="input_output_temporal_tyes">
			<title>Input/Output of Temporal Types</title>
			<para>A temporal instant value is a couple of the form <varname>v@t</varname>, where <varname>v</varname> is a value of the base type and <varname>t</varname> is a <varname>timestamptz</varname> value. A temporal sequence value is a set of values <varname>v1@t1,...,vn@tn</varname> delimited by a lower and an upper bounds that can be inclusive (represented by &lsquo;<varname>[</varname>' and &lsquo;<varname>]</varname>') or exclusive (represented by &lsquo;<varname>(</varname>' and &lsquo;<varname>)</varname>'). A temporal sequence value with a single instant such as <varname>[v1@t1]</varname> is called an instantaneous sequence. In that case, both bounds must be inclusive. Examples of input of temporal unit values are as follows:
				<programlisting>
SELECT tbool 'true@2001-01-01 08:00:00';
SELECT tint '1@2001-01-01 08:00:00';
SELECT tfloat '1.5@2001-01-01 08:00:00';
SELECT ttext 'AAA@2001-01-01 08:00:00';
SELECT tgeompoint 'Point(0 0)@2017-01-01 08:00:05';
SELECT tgeogpoint 'Point(0 0)@2017-01-01 08:00:05';
SELECT tbool '[true@2001-01-01 08:00:00, true@2001-01-03 08:00:00]';
SELECT tint '[1@2001-01-01 08:00:00, 1@2001-01-03 08:00:00]';
SELECT tfloat '[1.5@2001-01-01 08:00:00]'; -- instant sequence
SELECT tfloat '[2.5@2001-01-01 08:00:00, 3@2001-01-03 08:00:00, 1@2001-01-04 08:00:00]';
SELECT ttext '[BBB@2001-01-01 08:00:00, BBB@2001-01-03 08:00:00]';
SELECT tgeompoint '[Point(0 0)@2017-01-01 08:00:00, Point(0 0)@2017-01-01 08:05:00)';
SELECT tgeogpoint '[Point(0 0)@2017-01-01 08:00:00, Point(0 1)@2017-01-01 08:05:00,
Point(0 0)@2017-01-01 08:10:00)';
				</programlisting>
			</para>
				
			<para>The temporal extent of a temporal instant value is a single instant while the temporal extent of temporal sequence value is a period defined by the first and last instants as well as the upper and lower bounds.</para>

			<para>A temporal set value is a set <varname>{v1,...,vn}</varname> where every <varname>vi</varname> is a temporal unit value of the corresponding type. Examples of input of temporal set values are as follows:
				<programlisting>
SELECT tbool '{true@2001-01-01 08:00:00, false@2001-01-03 08:00:00}';
SELECT tint '{1@2001-01-01 08:00:00, 2@2001-01-03 08:00:00}';
SELECT tfloat '{1.0@2001-01-01 08:00:00, 2.0@2001-01-03 08:00:00}';
SELECT ttext '{AAA@2001-01-01 08:00:00, BBB@2001-01-03 08:00:00}';
SELECT tgeompoint '{Point(0 0)@2017-01-01 08:00:00, Point(0 1)@2017-01-02 08:05:00}';
SELECT tgeogpoint '{Point(0 0)@2017-01-01 08:00:00, Point(0 1)@2017-01-02 08:05:00}';
SELECT tbool '{[false@2001-01-01 08:00:00, false@2001-01-03 08:00:00),
[true@2001-01-03 08:00:00], (false@2001-01-04 08:00:00, false@2001-01-06 08:00:00]}';
SELECT tint '{[1@2001-01-01 08:00:00, 1@2001-01-03 08:00:00),
[2@2001-01-04 08:00:00, 3@2001-01-05 08:00:00, 3@2001-01-06 08:00:00]}';
SELECT tfloat '{[1@2001-01-01 08:00:00, 2@2001-01-03 08:00:00, 2@2001-01-04 08:00:00,
3@2001-01-06 08:00:00]}';
SELECT ttext '{[AAA@2001-01-01 08:00:00, BBB@2001-01-03 08:00:00, BBB@2001-01-04 08:00:00),
[CCC@2001-01-05 08:00:00, CCC@2001-01-06 08:00:00]}';
SELECT tgeompoint '{[Point(0 0)@2017-01-01 08:00:00, Point(0 1)@2017-01-01 08:05:00),
[Point(0 1)@2017-01-01 08:10:00, Point(1 1)@2017-01-01 08:15:00)}';SELECT tgeogpoint '{[Point(0 0)@2017-01-01 08:00:00, Point(0 1)@2017-01-01 08:05:00),
[Point(0 1)@2017-01-01 08:10:00, Point(1 1)@2017-01-01 08:15:00)}';
				</programlisting>
			The temporal extent of a temporal instant set value is a set of instants while the temporal extent of temporal sequence set value is a set of periods.</para>

			<para>Each temporal type has a constructor function with the same name as the type and with a suffix for the duration, where &ldquo;inst&rdquo;, &ldquo;i&rdquo;, &ldquo;seq&rdquo;, and &ldquo;s&rdquo; correspond, respectively, to the durations instant, instant set, sequence, and sequence set. Using the constructor function is frequently more convenient than writing a literal constant. The constructor functions for temporal instant values have one argument for the base type value and one argument for the <varname>timestamptz</varname> value. Examples temporal instant values defined with the constructor functions are as follows:
				<programlisting>
SELECT tboolinst(true, '2001-01-01 08:00:00');
SELECT tintinst(2, '2001-01-01 08:00:00');
SELECT tfloatinst(2.0, '2001-01-01 08:00:00');
SELECT ttextinst('AAA', '2001-01-01 08:00:00');
SELECT tgeompointinst('Point(0 0)', '2001-01-01 08:00:00');
SELECT tgeogpointinst('Point(1 1)', '2001-01-01 08:05:00');
				</programlisting>
			</para>

			<para>The constructor functions of temporal sequence values have one argument for the array of values of the corresponding instant duration and two optional Boolean arguments stating, respectively, whether the left and right bounds are inclusive or exclusive. It the last two arguments are not specified they are assumed to be true by default. Examples of temporal sequence values defined with the constructor functions are as follows:
				<programlisting>
SELECT tboolseq(ARRAY[tbool 'true@2001-01-01 08:00:00', 'true@2001-01-03 08:05:00'], true, true);
SELECT tintseq(ARRAY[tintinst(2,'2001-01-01 08:00:00'), tintinst(2,'2001-01-01 08:10:00')],
true, false);
SELECT tfloatseq(ARRAY[tfloat '2.0@2001-01-01 08:00:00', '3@2001-01-03 08:05:00',
'1@2001-01-03 08:10:00'], true, false);
SELECT ttextseq(ARRAY[ttextinst('AAA', '2001-01-01 08:00:00'),
	 ttextinst('BBB', '2001-01-03 08:05:00'), ttextinst('BBB', '2001-01-03 08:10:00')]);
	 SELECT tgeompointseq(ARRAY[tgeompoint 'Point(0 0)@2001-01-01 08:00:00',
'Point(0 1)@2001-01-03 08:05:00', 'Point(1 1)@2001-01-03 08:10:00']);
SELECT tgeogpointseq(ARRAY[tgeogpoint 'Point(0 0)@2001-01-01 08:00:00',
'Point(0 0)@2001-01-03 08:05:00']);
				</programlisting>
			As can be seen above, the values in the array can be specified using either a literal constant or the constructor function.</para>
		 
			<para>The constructor functions of the temporal set values have a single argument, which is an array of values of the corresponding unit values. Examples of temporal set values defined with the constructor functions are as follows:
				<programlisting>
SELECT tbooli(ARRAY[tbool 'true@2001-01-01 08:00:00', 'false@2001-01-01 08:05:00']);
SELECT tinti(ARRAY[tint '1@2001-01-01 08:00:00', '2@2001-01-01 08:05:00']);
SELECT tfloati(ARRAY[tfloat '1.0@2001-01-01 08:00:00)', '2.0@2001-01-01 08:05:00']);
SELECT ttexti(ARRAY[ttext 'AAA@2001-01-01 08:00:00', 'BBB@2001-01-01 08:05:00']);
SELECT tgeompointi(ARRAY[tgeompoint 'Point(0 0)@2001-01-01 08:00:00',
'Point(0 1)@2001-01-01 08:05:00', 'Point(1 1)@2001-01-01 08:10:00']);
SELECT tgeogpointi(ARRAY[tgeogpoint 'Point(1 1)@2001-01-01 08:00:00',
'Point(2 2)@2001-01-01 08:05:00']);
SELECT tbools(ARRAY[tbool '[false@2001-01-01 08:00:00, false@2001-01-01 08:05:00)',
	 '[true@2001-01-01 08:05:00]', '(false@2001-01-01 08:05:00, false@2001-01-01 08:10:00)']);
	 SELECT tints(ARRAY[tint '[1@2001-01-01 08:00:00, 2@2001-01-01 08:05:00,
2@2001-01-01 08:10:00, 2@2001-01-01 08:15:00)']);
SELECT tfloats(ARRAY[tfloat '[1.0@2001-01-01 08:00:00, 2.0@2001-01-01 08:05:00,
2.0@2001-01-01 08:10:00]', '[2.0@2001-01-01 08:15:00, 3.0@2001-01-01 08:20:00)']);
SELECT ttexts(ARRAY[ttext '[AAA@2001-01-01 08:00:00, AAA@2001-01-01 08:05:00)',
'[BBB@2001-01-01 08:10:00, BBB@2001-01-01 08:15:00)']);
SELECT tgeompoints(ARRAY[tgeompoint '[Point(0 0)@2001-01-01 08:00:00,
Point(0 1)@2001-01-01 08:05:00, Point(0 1)@2001-01-01 08:10:00)',
'[Point(0 1)@2001-01-01 08:15:00, Point(0 0)@2001-01-01 08:20:00)']);
SELECT tgeogpoints(ARRAY[tgeogpointseq
'[Point(0 0)@2001-01-01 08:00:00, Point(0 1)@2001-01-01 08:05:00)',
'[Point(0 1)@2001-01-01 08:10:00, Point(1 1)@2001-01-01 08:15:00)']);
				</programlisting>
			</para>

			<para>Temporal sequence values are converted into a <emphasis role="strong">normal</emphasis> form so that equivalent values have identical representations. For this, consecutive instant values are merged when possible. For discrete types, three consecutive instant values can be merged into two if they have the same value. For continuous types, three consecutive instant values can be merged into two if the linear functions defining the evolution of values are the same. Examples of transformation into a normal form are as follows.
				<programlisting>
SELECT tint '[1@2001-01-01, 2@2001-01-03, 2@2001-01-04, 2@2001-01-05)';
-- "[1@2001-01-01 00:00:00+00, 2@2001-01-03 00:00:00+00, 2@2001-01-05 00:00:00+00)"
SELECT tgeompoint '[Point(1 1)@2001-01-01 08:00:00, Point(1 1)@2001-01-01 08:05:00,
	 Point(1 1)@2001-01-01 08:10:00)';
-- "[Point(1 1)@2001-01-01 08:00:00, Point(1 1)@2001-01-01 08:10:00)"
SELECT tfloats(ARRAY[tfloat '[1@2001-01-01, 2@2001-01-03, 3@2001-01-05]']);
-- "{[1@2001-01-01 00:00:00+00, 3@2001-01-05 00:00:00+00]}"
SELECT tgeompoint '[Point(1 1)@2001-01-01 08:00:00, Point(2 2)@2001-01-01 08:05:00,
Point(3 3)@2001-01-01 08:10:00]';
-- "[Point(1 1)@2001-01-01 08:00:00, Point(3 3)@2001-01-01 08:10:00]"
				</programlisting>
			</para>

			<para> Similary, temporal sequence set values are converted into a <emphasis role="strong">normal</emphasis> form. For this, consecutive sequence values are merged when possible. Examples of transformation into a normal form are as follows.
				<programlisting>
SELECT tints(ARRAY[tint '[1@2001-01-01, 1@2001-01-03)', '[2@2001-01-03, 2@2001-01-05)']);
-- '{[1@2001-01-01 00:00:00+00, 2@2001-01-03 00:00:00+00, 2@2001-01-05 00:00:00+00)}'
SELECT tfloats(ARRAY[tfloat '[1@2001-01-01, 2@2001-01-03)', '[2@2001-01-03, 3@2001-01-05]']);
-- '{[1@2001-01-01 00:00:00+00, 3@2001-01-05 00:00:00+00]}'
SELECT tfloats(ARRAY[tfloat '[1@2001-01-01, 3@2001-01-05)', '[3@2001-01-05]']);
-- '{[1@2001-01-01 00:00:00+00, 3@2001-01-05 00:00:00+00]}'
SELECT tgeompoint '{[Point(0 0)@2001-01-01 08:00:00,
Point(1 1)@2001-01-01 08:05:00, Point(1 1)@2001-01-01 08:10:00),
[Point(1 1)@2001-01-01 08:10:00, Point(1 1)@2001-01-01 08:15:00)}';
-- "{[[Point(0 0)@2001-01-01 08:00:00, Point(1 1)@2001-01-01 08:05:00,
	Point(1 1)@2001-01-01 08:15:00)}"
SELECT tgeompoint '{[Point(1 1)@2001-01-01 08:00:00, Point(2 2)@2001-01-01 08:05:00),
[Point(2 2)@2001-01-01 08:05:00, Point(3 3)@2001-01-01 08:10:00]}';
-- "{[Point(1 1)@2001-01-01 08:00:00, Point(3 3)@2001-01-01 08:10:00]}"
SELECT tgeompoint '{[Point(1 1)@2001-01-01 08:00:00, Point(3 3)@2001-01-01 08:10:00),
[Point(3 3)@2001-01-01 08:10:00]}';
-- "{[Point(1 1)@2001-01-01 08:00:00, Point(3 3)@2001-01-01 08:10:00]}"
				</programlisting>
			</para>

			<para>For temporal points, it is possible to specify the spatial reference identifier (SRID) using the Extended Well-Known text (EWKT) representation as follows: 
				<programlisting>
SELECT tgeompoint 'SRID=5435;[Point(0 0)@2000-01-01,Point(0 1)@2000-01-02]'
				</programlisting>
			All components geometries will then be of the given SRID. Furthermore, each component geometry can specify its SRID with the EWKT format as in the following example
				<programlisting>
SELECT tgeompoint '[SRID=5435;Point(0 0)@2000-01-01,SRID=5435;Point(0 1)@2000-01-02]'
				</programlisting>
			An error is raised if the component geometries are not all in the same SRID or if the SRID of a component geometry is different from the one of the temporal point
					<programlisting>
SELECT tgeompoint '[SRID=5435;Point(0 0)@2000-01-01,SRID=4326;Point(0 1)@2000-01-02]';
ERROR: Geometry SRID (4326) does not match temporal type SRID (5435)
SELECT tgeompoint 'SRID=5435;[SRID=4326;Point(0 0)@2000-01-01,SRID=4326;Point(0 1)@2000-01-02]'
ERROR: Geometry SRID (4326) does not match temporal type SRID (5435)
				</programlisting>
			</para>
		</sect1>

		<sect1 id="validity_temporal_types">
			<title>Validity of Temporal Types</title>

			<para>Values of temporal types must satisfy several constraints so that they are well defined. These constraints are given next.
			<itemizedlist>
				<listitem>
					<para>The constraints on the corresponding base type and <varname>timestamptz</varname> types must be satisfied.</para>
				</listitem>

				<listitem>
					<para>A temporal sequence value must be composed of at least one instant value.</para>
				</listitem>

				<listitem>
					<para>An instantaneous temporal sequence value must have inclusive lower and upper bounds.</para>
				</listitem>

				<listitem>
					<para>In a temporal sequence value, the timestamps of the composing instants must be distinct and ordered.</para>
				</listitem>

				<listitem>
					<para>In a temporal discrete sequence value with exclusive upper bound, the last two values must be equal.</para>
				</listitem>

				<listitem>
					<para>A temporal set value must be composed of at least one temporal unit value.</para>
				</listitem>

				<listitem>
					<para>In a temporal instant set value, the composing instants must be distinct and ordered. This implies that the temporal extent of a temporal instant set value is a set of <varname>timestamptz</varname> values without duplicates.</para>
				</listitem>

				<listitem>
					<para>In a temporal sequence set value, the composing sequence values must be non overlapping and ordered. This implies that the temporal extent of a temporal sequence set value is a set of disjoint periods.</para>
				</listitem>
			</itemizedlist>
			An error is raised whenever one of these constraints are not satisfied. Examples of incorrect temporal values are as follows.
				<programlisting>
-- incorrect value for base type
SELECT tbool '1.5@2001-01-01 08:00:00';
-- base type is not a point
SELECT tgeompoint 'Linestring(0 0,1 1)@2001-01-01 08:05:00';
-- incorrect timestamp
SELECT tint '2@2001-02-31 08:00:00';
-- empty sequence
SELECT tint '';
-- incorrect bounds for instantaneous sequence
SELECT tint '[1@2001-01-01 09:00:00)';
-- duplicate timestamps
SELECT tint '[1@2001-01-01 08:00:00, 2@2001-01-01 08:00:00]';
-- unordered timestamps
SELECT tint '[1@2001-01-01 08:10:00, 2@2001-01-01 08:00:00]';
-- incorrect end value
SELECT tint '[1@2001-01-01 08:00:00, 2@2001-01-01 08:10:00)';
-- empty temporal sequence set value
SELECT tints(ARRAY[]);
-- duplicate timestamps
SELECT tinti(ARRAY[tint '1@2001-01-01 08:00:00', '2@2001-01-01 08:00:00']);
-- overlapping periods
SELECT tints(ARRAY[tint '[1@2001-01-01 08:00:00, 1@2001-01-01 10:00:00)',
'[2@2001-01-01 09:00:00, 2@2001-01-01 11:00:00)']);
				</programlisting>
			</para>
		</sect1>

		<sect1 id="casting_temporal_types">
			<title>Casting for Temporal Types</title>

			<para>A temporal value can be converted into a temporal value of a compatible type. This can be done using the notation <varname>CAST(ttype1 AS ttype2)</varname> or <varname>ttype1::ttype2</varname>.</para>
			<itemizedlist>
				<listitem>
					<para>Temporal integer to temporal float</para>
					<para>Cast: <varname>tint::tfloat</varname></para>
					<programlisting>
SELECT tint '[1@2001-01-01, 2@2001-01-03]'::tfloat;
-- "[1@2001-01-01 00:00:00+00, 2@2001-01-03 00:00:00+00]"
					</programlisting>
				</listitem>

				<listitem>
					<para>Temporal float to temporal integer</para>
					<para>Cast: <varname>tfloat::tint</varname></para>
					<programlisting>
SELECT tfloat '[1.5@2001-01-01, 2.5@2001-01-03]'::tint;
-- "[1@2001-01-01 00:00:00+00, 2@2001-01-03 00:00:00+00]"
					</programlisting>
				</listitem>

				<listitem>
					<para>Temporal geography point to temporal geometry point</para>
					<para>Cast: <varname>tgeogpoint::tgeompoint</varname></para>
					<programlisting>
SELECT astext((tgeompoint '[Point(0 0)@2001-01-01, Point(0 1)@2001-01-02)')::tgeogpoint);
-- "{[POINT(0 0)@2001-01-01, POINT(0 1)@2001-01-02)}"
					</programlisting>
				</listitem>

				<listitem>
					<para>Temporal geometry point to temporal geography point</para>
					<para>Casts: <varname>tgeompoint::tgeogpoint</varname></para>
					<programlisting>
SELECT astext((tgeogpoint 'Point(0 0)@2001-01-01')::tgeompoint);
-- "{POINT(0 0)@2001-01-01}"
					</programlisting>
				</listitem>
			</itemizedlist>

			<para>A common way to store temporal points in PostGIS is to represent them as geometries of type <varname>LINESTRING M</varname> and abuse the M dimension to encode timestamps as seconds since 1970-01-01 00:00:00. These time-enhanced geometries, called trajectories, can be validated with the function <varname>ST_IsValidTrajectory</varname> to verify that the M value is growing from each vertex to the next. Trajectories can be manipulated with the functions <varname>ST_ClosestPointOfApproach</varname>, <varname>ST_DistanceCPA</varname>, and <varname>ST_CPAWithin</varname>. Temporal point values can be converted to/from PostGIS trajectories.</para>

			<itemizedlist>
				<listitem>
				<para>Temporal point to trajectory</para>
				<para>Casts: <varname>tgeompoint::geometry</varname>, <varname>tgeogpoint::geography</varname></para>
				<programlisting>
SELECT st_astext((tgeompoint 'Point(0 0)@2001-01-01')::geometry);
-- "POINT M (0 0 978307200)"
SELECT st_astext((tgeompoint '{Point(0 0)@2001-01-01, Point(1 1)@2001-01-02,
Point(1 1)@2001-01-03}')::geometry);
-- "MULTIPOINT M (0 0 978307200,1 1 978393600,1 1 978480000)"
SELECT st_astext((tgeompoint '[Point(0 0)@2001-01-01, Point(1 1)@2001-01-02)')::geometry);
-- "LINESTRING M (0 0 978307200,1 1 978393600)"
SELECT st_astext((tgeompoint '{[Point(0 0)@2001-01-01, Point(1 1)@2001-01-02),
[Point(1 1)@2001-01-03, Point(1 1)@2001-01-04),
[Point(1 1)@2001-01-05, Point(0 0)@2001-01-06)}')::geometry);
-- "MULTILINESTRING M ((0 0 978307200,1 1 978393600),(1 1 978480000,1 1 978566400),
(1 1 978652800,0 0 978739200))"
SELECT st_astext((tgeompoint '{[Point(0 0)@2001-01-01, Point(1 1)@2001-01-02),
[Point(1 1)@2001-01-03],
[Point(1 1)@2001-01-05, Point(0 0)@2001-01-06)}')::geometry);
-- "GEOMETRYCOLLECTION M (LINESTRING M (0 0 978307200,1 1 978393600),
POINT M (1 1 978480000),LINESTRING M (1 1 978652800,0 0 978739200))"
					</programlisting>
				</listitem>

				<listitem>
					<para>Trajectory to temporal point</para>
					<para>Casts: <varname>geometry::tgeompoint</varname>, <varname>geography::tgeogpoint</varname></para>
					<programlisting>
SELECT astext(geometry 'LINESTRING M (0 0 978307200,0 1 978393600,1 1 978480000)'::tgeompoint);
-- "[POINT(0 0)@2001-01-01, POINT(0 1)@2001-01-02, POINT(1 1)@2001-01-03]";
SELECT astext(geometry 'GEOMETRYCOLLECTION M (LINESTRING M (0 0 978307200,1 1 978393600),
POINT M (1 1 978480000),LINESTRING M (1 1 978652800,0 0 978739200))'::tgeompoints);
-- "{[POINT(0 0)@2001-01-01, POINT(1 1)@2001-01-02], [POINT(1 1)@2001-01-03],
[POINT(1 1)@2001-01-05, POINT(0 0)@2001-01-06]}"
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>
	</chapter>

	<chapter id="manipulating_temporal_types">
		<title>Functions and Operators for Temporal Types</title>
		<para>We present next the functions and operators for the temporal types. These functions and operators are polymorphic, that is, their arguments may be of several types, and the result type may depend on the type of the arguments. To express this, we use the following notation for all temporal types, whether alphanumeric or spatial:</para>

			<itemizedlist>
				<listitem>
					<para><varname>ttype</varname> represents any temporal type,</para>
				</listitem>

				<listitem>
					<para><varname>time</varname> represents any time type, that is, <varname>timestamptz</varname>, <varname>period</varname>, <varname>timestampset</varname>, or <varname>periodset</varname>,</para>
				</listitem>

				<listitem>
					<para><varname>tnumber</varname> represents any temporal numeric type, that is, <varname>tint</varname> or <varname>tfloat</varname>,</para>
				</listitem>

				<listitem>
					<para><varname>tdisc</varname> represents any temporal discrete type, that is, <varname>tbool</varname>, <varname>tint</varname>, or <varname>ttext</varname>,</para>
				</listitem>

				<listitem>
					<para><varname>torder</varname> represents any temporal type whose base type has a total order defined, that is, <varname>tint</varname>, <varname>tfloat</varname>, or <varname>ttext</varname>,</para>
				</listitem>

				<listitem>
					<para><varname>ttypeinst</varname> represents any temporal type with instant duration,</para>
				</listitem>

				<listitem>
					<para><varname>ttypei</varname> represents any temporal type with instant set duration,</para>
				</listitem>

				<listitem>
					<para><varname>ttypeseq</varname> represents any temporal type with sequence duration,</para>
				</listitem>

				<listitem>
					<para><varname>ttypes</varname> represents any temporal type with sequence set duration,</para>
				</listitem>

				<listitem>
					<para><varname>base</varname> represents any base type of a temporal type, that is, <varname>bool</varname>, <varname>int</varname>, <varname>float</varname>, <varname>text</varname>, <varname>geometry(point)</varname>, or <varname>geography(point)</varname>,</para>
				</listitem>

				<listitem>
					<para><varname>number</varname> represents any numeric base type, that is, <varname>int</varname> or <varname>float</varname>,</para>
				</listitem>

				<listitem>
					<para><varname>numrange</varname> represents any numeric range of values, that is, either <varname>intrange</varname> or <varname>floatrange</varname>,</para>
				</listitem>

				<listitem>
					<para><varname>type[]</varname> represents an array of <varname>type</varname>.</para>
				</listitem>
			</itemizedlist>
				
			<para>In addition, for temporal point types we use the following notation:
				<itemizedlist>
					<listitem>
						<para><varname>tpoint</varname> represents a temporal point type, that is, <varname>tgeompoint</varname> or <varname>tgeogpoint</varname>,</para>
					</listitem>

					<listitem>
						<para><varname>tpointinst</varname> represents a temporal point type with instant set duration</para>
					</listitem>

					<listitem>
						<para><varname>tpointseq</varname> represents a temporal point type with sequence duration,</para>
					</listitem>

					<listitem>
						<para><varname>tpoints</varname> represents any temporal sequence set point type with sequence set duration,</para>
					</listitem>

					<listitem>
						<para><varname>tgeompointseq</varname> represents a <varname>tgeompoint</varname> type with sequence duration,</para>
					</listitem>

					<listitem>
						<para><varname>tgeompoints</varname> represents a <varname>tgeompoint</varname> type with sequence set duration,</para>
					</listitem>

					<listitem>
						<para><varname>geo</varname> represents either <varname>geometry</varname> or <varname>geography</varname>,</para>
					</listitem>

					<listitem>
						<para><varname>point</varname> represents a <varname>geometry</varname> or a <varname>geography</varname> restricted to a point.</para>
					</listitem>
				</itemizedlist>
			</para>
				
			<para>A common way to generalize the traditional operations to the temporal types is to apply the operation at each instant, which yields a temporal value as result. In that case, the operation is only defined on the intersection of the emporal extents of the operands; if the temporal extents are disjoint, then the result is null. For example, the temporal comparison operators, such as <varname>#&lt;</varname>, test whether the values taken by their operands at each instant satisfy the condition and return a temporal Boolean. Examples of the various generalizations of the operators are given next.
				<programlisting>
-- Temporal comparison
SELECT tint '[2@2001-01-01, 2@2001-01-03)' #&lt; tfloat '[1@2001-01-01, 3@2001-01-03)';
-- "{[f@2001-01-01, f@2001-01-02], (t@2001-01-02, t@2001-01-03)}"
SELECT tfloat '[1@2001-01-01, 3@2001-01-03)' #&lt; tfloat '[3@2001-01-03, 1@2001-01-05)';
-- NULL
-- Temporal addition
SELECT tint '[1@2001-01-01, 1@2001-01-03)' + tint '[2@2001-01-02, 2@2001-01-05)';
-- "[3@2001-01-02, 3@2001-01-03)"
-- Temporal intersects
SELECT tintersects(tgeompoint '[Point(0 1)@2001-01-01, Point(3 1)@2001-01-04)',
geometry 'Polygon((1 0,1 2,2 2,2 0,1 0))');
-- "{[f@2001-01-01, t@2001-01-02, t@2001-01-03], (f@2001-01-03, f@2001-01-04]}"
-- Temporal distance
SELECT tgeompoint '[Point(0 0)@2001-01-01 08:00:00, Point(0 1)@2001-01-03 08:10:00)' &lt;-&gt;
tgeompoint '[Point(0 0)@2001-01-02 08:05:00, Point(1 1)@2001-01-05 08:15:00)';
-- "[0.5@2001-01-02 08:05:00+00, 0.745184033794557@2001-01-03 08:10:00+00)"
				</programlisting>
			</para>
				
			<para>Another common requirement is to determine whether the operands ever or always satisfy a condition with respect to an operation. These can be obtained by applying, respectively, the <varname>&amp;=</varname> (ever equals) or <varname>@=</varname> (always equals) operators to the temporal value obtained from the corresponding temporal operation. Examples of the ever equals and always equals operators are given next.
				<programlisting>
-- Is the left operand ever less than the right one ?
SELECT (tfloat '[1@2001-01-01, 3@2001-01-03)' #&lt;
tfloat '[3@2001-01-01, 1@2001-01-03)') &amp;= true;
-- true
-- Does the operands ever intersect?
SELECT tintersects(tgeompoint '[Point(0 1)@2001-01-01, Point(3 1)@2001-01-04)',
geometry 'Polygon((1 0,1 2,2 2,2 0,1 0))') &amp;= true;
-- true
-- Is the left operand always less than the right one ?
SELECT (tfloat '[1@2001-01-01, 3@2001-01-03)' #&lt;
tfloat '[2@2001-01-01, 4@2001-01-03)') @= true;
-- true
-- Does the operands always intersect?
SELECT tintersects(tgeompoint '[Point(0 1)@2001-01-01, Point(3 1)@2001-01-04)',
geometry 'Polygon((0 0,0 2,4 2,4 0,0 0))') @= true;
-- true
				</programlisting>
			For efficiency reasons, some common operations with the ever or the always semantics are natively provided. For example, the <varname>intersects</varname> function determines whether there is an instant at which the two arguments spatially intersect.</para>

			<para>We describe next the functions and operators for temporal types. For conciseness, in the examples we mostly use sequences composed of two instants.</para>

		<sect1 id="transformation_functions">
			<title>Transformation Functions</title>
			<para>A temporal value can be transformed to another duration. An error is raised if the durations are incompatible.</para>
			<itemizedlist>
				<listitem>
				<para>Transform a temporal value to another duration</para>
				<para>Signature: <varname>{ttypeinst(ttype), ttypei(ttype), ttypeseq(ttype), ttypes(ttype)} : ttype</varname></para>
				<programlisting>
SELECT tboolinst(tbool '{[true@2001-01-01]}');
-- "t@2001-01-01 00:00:00+00"
SELECT tboolinst(tbool '{[true@2001-01-01, true@2001-01-02]}');
--ERROR: Cannot transform input to a temporal instant
SELECT tbooli(tbool 'true@2001-01-01');
-- "{t@2001-01-01}"
SELECT tintseq(tint '1@2001-01-01');
-- "[1@2001-01-01]"
SELECT tfloats(tfloat '2.5@2001-01-01');
-- "{[2.5@2001-01-01]}"
SELECT tfloats(tfloat '{2.5@2001-01-01, 1.5@2001-01-02, 3.5@2001-01-02}');
-- "{[2.5@2001-01-01],[1.5@2001-01-02],[3.5@2001-01-03]}"
				</programlisting>
				</listitem>

				<listitem>
				<para>Append a temporal instant to a temporal value</para>
				<para>Signature: <varname>{appendInstant(ttype, ttypeinst)} : ttype</varname></para>
				<programlisting>
SELECT appendInstant(tint '1@2000-01-01', tint '1@2000-01-02');
-- "{1@2000-01-01, 1@2000-01-02}"
SELECT appendInstant(tintseq(tint '1@2000-01-01'), tint '1@2000-01-02');
-- "[1@2000-01-01, 1@2000-01-02]"
SELECT astext(appendInstant(tgeompoint '{[Point(1 1 1)@2000-01-01, Point(2 2 2)@2000-01-02],
    [Point(3 3 3)@2000-01-04, Point(3 3 3)@2000-01-05]}', tgeompoint 'Point(1 1 1)@2000-01-06'));
"{[POINT Z (1 1 1)@2000-01-01, POINT Z (2 2 2)@2000-01-02], 
    [POINT Z (3 3 3)@2000-01-04, POINT Z (3 3 3)@2000-01-05, POINT Z (1 1 1)@2000-01-06]}"
				</programlisting>
				</listitem>

			</itemizedlist>
		</sect1>

		<sect1>
			<title>Accessor Functions</title>
			<itemizedlist>
				<listitem>
					<para><varname>getType</varname>: Type</para>
					<para>Signature: <varname>getType(ttype): {'Instant', 'InstantSet', 'Sequence', 'SequenceSet'}</varname></para>
					<programlisting>
SELECT getType(tint '[1@2012-01-01, 2@2012-01-02, 3@2012-01-03]');
-- "Sequence"
					</programlisting>
				</listitem>

				<listitem>
				 <para><varname>memSize</varname>: Memory size in bytes</para>
					<para>Signature: <varname>memSize(ttype): integer</varname></para>
					<programlisting>
SELECT memSize(tint '{1@2012-01-01, 2@2012-01-02, 3@2012-01-03}');
-- 280
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>getValue</varname>: Value</para>
					<para>Signature: <varname>getValue(ttypeinst): base</varname></para>
					<programlisting>
SELECT getValue(tint '1@2012-01-01');
-- 1
SELECT st_asText(getValue(tgeompoint 'Point(0 0)@2012-01-01'));
-- "POINT(0 0)"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>getValues</varname>: Values</para>
					<para>Signature: <varname>getValues(ttype): {base[], floatrange[], geo}</varname></para>
					<programlisting>
SELECT getValues(tint '[1@2012-01-01, 2@2012-01-03]');
-- "{1,2}"
SELECT getValues(tfloat '[1@2012-01-01, 2@2012-01-03)');
-- "{[1,2)}"
SELECT getValues(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 4@2012-01-05)}');
-- "{[1,2),[3,4)}"
SELECT st_astext(getValues(tgeompoint '{[Point(0 0)@2012-01-01, Point(0 1)@2012-01-02),
[Point(0 1)@2012-01-03, Point(1 1)@2012-01-04)}'));
-- "LINESTRING(0 0,0 1,1 1)"
SELECT st_astext(getValues(tgeompoint '{[Point(0 0)@2012-01-01, Point(0 1)@2012-01-02),
[Point(1 1)@2012-01-03, Point(2 2)@2012-01-04)}'));
-- "MULTILINESTRING((0 0,0 1),(1 1,2 2)"
SELECT st_astext(getValues1(tgeompoint '{Point(0 0)@2012-01-01, Point(0 1)@2012-01-02}'));
-- "MULTIPOINT(0 0,0 1)"
SELECT st_astext(getValues(tgeompoint '{[Point(0 0)@2012-01-01, Point(0 1)@2012-01-02),
[Point(1 1)@2012-01-03, Point(1 1)@2012-01-04), [Point(2 1)@2012-01-05, Point(2 2)@2012-01-06)}'));
-- "GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,0 1),LINESTRING(2 1,2 2))"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>valueRange</varname>: Value range</para>
					<para>Signature: <varname>valueRange(tnumber): numrange</varname></para>
					<programlisting>
SELECT valueRange(tfloat '{[2@2012-01-01, 1@2012-01-03), [4@2012-01-03, 6@2012-01-05)}');
-- "(1,6)"
SELECT valueRange(tfloat '{1@2012-01-01, 2@2012-01-03, 3@2012-01-05}');
-- "[1,3])"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>getTime</varname>: Time</para>
					<para>Signature: <varname>getTime(ttype): periodset</varname></para>
					<programlisting>
SELECT getTime(tint '[1@2012-01-01, 1@2012-01-15)');
-- "{[2012-01-01 ,2012-01-15)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>duration</varname>: Duration</para>
					<para>Signature: <varname>duration(ttype): interval</varname></para>
					<programlisting>
SELECT duration(tfloat '{[1@2012-01-01, 2@2012-01-03), [2@2012-01-04, 2@2012-01-05)}');
-- "3 days"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>timespan</varname>: Period on which the temporal value is defined ignoring the potential time gaps</para>
					<para>Signature: <varname>timespan(ttype): period</varname></para>
					<programlisting>
SELECT timespan(tint '{1@2012-01-01, 2@2012-01-03, 3@2012-01-05}');
-- "[2012-01-01, 2012-01-05]"
SELECT timespan(tfloat '{[1@2012-01-01, 1@2012-01-02), [2@2012-01-03, 3@2012-01-04)}');
-- "[2012-01-01, 2012-01-04)"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>startValue</varname>: Start value</para>
					<para>The function does not take into account whether the bounds are inclusive or not.</para>
					<para>Signature: <varname>startValue(ttype): base</varname></para>
					<programlisting>
SELECT startValue(tfloat '(1@2012-01-01, 2@2012-01-03)');
-- 1
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>endValue</varname>: End value</para>
					<para>The function does not take into account whether the bounds are inclusive or not.</para>
					<para>Signature: <varname>endValue(ttype): base</varname></para>
					<programlisting>
SELECT endValue(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}');
-- 5
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>valueAtTimestamp</varname>: Value at timestamp</para>
					<para>Signature: <varname>valueAtTimestamp(tpoint, timestamptz): geo</varname></para>
					<programlisting>
SELECT valueAtTimestamp(tfloat '[1@2012-01-01, 4@2012-01-04)', '2012-01-02');
-- "2"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>minValue</varname>: Minimum value</para>
					<para>The function does not take into account whether the bounds are inclusive or not.</para>
					<para>Signature: <varname>minValue(ttype): base</varname></para>
					<programlisting>
SELECT minValue(tfloat '{1@2012-01-01, 2@2012-01-03, 3@2012-01-05}');
-- 1
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>maxValue</varname>: Maximum value</para>
					<para>The function does not take into account whether the bounds are inclusive or not.</para>
					<para>Signature: <varname>maxValue(ttype): base</varname></para>
					<programlisting>
SELECT maxValue(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}');
-- 5
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>numInstants</varname>: Number of instants</para>
					<para>Signature: <varname>numInstants(ttype): int</varname></para>
					<programlisting>
SELECT numInstants(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}');
-- 4
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>startInstant</varname>: Start instant</para>
					<para>The function does not take into account whether the bounds are inclusive or not.</para>
					<para>Signature: <varname>startInstant(ttype): ttypeinst</varname></para>
					<programlisting>
SELECT startInstant(tint '[1@2012-01-01, 2@2012-01-03]');
-- "1@2012-01-01"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>endInstant</varname>: End instant</para>
					<para>The function does not take into account whether the bounds are inclusive or not.</para>
					<para>Signature: <varname>endInstant(ttype): ttypeinst</varname></para>
					<programlisting>
SELECT endInstant(tint '{1@2012-01-01, 3@2012-01-03, 5@2012-01-05}');
-- "5@2012-01-05"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>instantN</varname>: N-th instant</para>
					<para>Signature: <varname>instantN(ttype, int): ttypeinst</varname></para>
					<programlisting>
SELECT instantN(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}', 3);
-- "3@2012-01-03"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>instants</varname>: Instants</para>
					<para>Signature: <varname>instants(ttype): ttypeinst[]</varname></para>
					<programlisting>
SELECT instants(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}');
-- "{"1@2012-01-01","2@2012-01-03","3@2012-01-03","5@2012-01-05"}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>numTimestamps</varname>: Number of distinct timestamps</para>
					<para>Signature: <varname>numTimestamps(ttype): int</varname></para>
					<programlisting>
SELECT numTimestamps(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}');
-- 3
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>startTimestamp</varname>: Start timestamp</para>
					<para>The function does not take into account whether the bounds are inclusive or not.</para>
					<para>Signature: <varname>startTimestamp(ttype): timestamptz</varname></para>
					<programlisting>
SELECT startTimestamp(tfloat '[1@2012-01-01, 2@2012-01-03)');
-- "2012-01-01"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>endTimestamp</varname>: End timestamp</para>
					<para>The function does not take into account whether the bounds are inclusive or not.</para>
					<para>Signature: <varname>endTimestamp(ttype): timestamptz</varname></para>
					<programlisting>
SELECT endTimestamp(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}');
-- "2012-01-05"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>timetampN</varname>: N-th distinct timestamp</para>
					<para>Signature: <varname>timetampN(ttype, int): timestamptz</varname></para>
					<programlisting>
SELECT timestampN(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}', 3);
-- "2012-01-05"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>timestamps</varname>: Distinct timestamps</para>
					<para>Signature: <varname>timestamps(ttype): timestamptz[]</varname></para>
					<programlisting>
SELECT timestamps(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}');
-- "{"2012-01-01", "2012-01-03", "2012-01-05"}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>numSequences</varname>: Number of sequences</para>
					<para>Signature: <varname>numSequences(ttypes): int</varname></para>
					<programlisting>
SELECT numSequences(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}');
-- 2
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>startSequence</varname>: Start sequence</para>
					<para>Signature: <varname>startSequence(ttypes): ttypeseq</varname></para>
					<programlisting>
SELECT startSequence(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}');
-- "[1@2012-01-01, 2@2012-01-03)"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>endSequence</varname>: End sequence</para>
					<para>Signature: <varname>endSequence(ttypes): ttypeseq</varname></para>
					<programlisting>
SELECT endSequence(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}');
-- "[3@2012-01-03, 5@2012-01-05)"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>sequenceN</varname>: N-th sequence</para>
					<para>Signature: <varname>sequenceN(ttypes, int): ttypeseq</varname></para>
					<programlisting>
SELECT sequenceN(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}', 2);
-- "[3@2012-01-03, 5@2012-01-05)"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>sequences</varname>: Sequences</para>
					<para>Signature: <varname>sequences(ttypes): ttypeseq[]</varname></para>
					<programlisting>
SELECT sequences(tfloat '{[1@2012-01-01, 2@2012-01-03), [3@2012-01-03, 5@2012-01-05)}');
-- "{"[1@2012-01-01, 2@2012-01-03)", "[3@2012-01-03, 5@2012-01-05)"}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>intersectsTimestamp</varname>: Intersects the timestamp?</para>
					<para>Signature: <varname>intersectsTimestamp(ttype, timestamptz): boolean</varname></para>
					<programlisting>
SELECT intersectsTimestamp(tint '[1@2012-01-01, 1@2012-01-15)', timestamptz '2012-01-03');
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>intersectsTimestampSet</varname>: Intersects the timestamp set?</para>
					<para>Signature: <varname>intersectsTimestampSet(ttype, timestampset): boolean</varname></para>
					<programlisting>
SELECT intersectsTimestampSet(tint '[1@2012-01-01, 1@2012-01-15)',
timestampset '{2012-01-01, 2012-01-03}');
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>intersectsPeriod</varname>: Intersects the period?</para>
					<para>Signature: <varname>intersectsPeriod(ttype, period): boolean</varname></para>
					<programlisting>
SELECT intersectsPeriod(tint '[1@2012-01-01, 1@2012-01-04)',
period '[2012-01-01,2012-01-05)');
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>intersectsPeriodSet</varname>: Intersects the period set?</para>
					<para>Signature: <varname>intersectsPeriodSet(ttype, periodset): boolean</varname></para>
					<programlisting>
SELECT intersectsPeriodSet(tbool '[t@2012-01-01, f@2012-01-15]',
periodset '{[2012-01-01, 2012-01-03), [2012-01-05, 2012-01-07)}');
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>isContinuousInValue</varname>: Is continuous in the value dimension?</para>
					<para>Signature: <varname>isContinuousInValue(tfloats): boolean</varname></para>
					<programlisting>
SELECT isContinuousInValue(tfloat '{[1@2012-01-01, 2@2012-01-03),
[1@2012-01-03, 2@2012-01-05)}');
-- false
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>isContinuousInTime</varname>: Is continuous in the time dimension?</para>
					<para>Signature: <varname>isContinuousInTime(ttypes): boolean</varname></para>
					<programlisting>
SELECT isContinuousInTime(tfloat '{[1@2012-01-01, 2@2012-01-03),
[1@2012-01-03, 2@2012-01-05)}');
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>twAvg</varname>: Time-weighted average</para>
					<para>Signature: <varname>twAvg(tnum): float</varname></para>
					<programlisting>
SELECT twAvg(tfloat '{[1@2012-01-01, 2@2012-01-03), [2@2012-01-04, 2@2012-01-06)}');
-- 1.75
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>

		<sect1>
			<title>Spatial Functions</title>
			<para>In the following functions we specify with the symbol &Z_support; that the function supports 3D points and with the symbol &geography_support; that the function is available for geographies.</para>

			<itemizedlist>
				<listitem>
					<para><varname>asText</varname>: Well-Known Text (WKT) representation &Z_support; &geography_support;</para>
					<para>Signature: <varname>asText({tpoint, tpoint[], geo[]}): {text, text[]}</varname></para>
					<programlisting>
SELECT asText(tgeompoint 'SRID=4326;[Point(0 0 0)@2012-01-01, Point(1 1 1)@2012-01-02)');
-- "[POINT Z (0 0 0)@2012-01-01 00:00:00+00, POINT Z (1 1 1)@2012-01-02 00:00:00+00)"
SELECT asText(ARRAY[geometry 'Point(0 0)', 'Point(1 1)']);
-- "{"POINT(0 0)","POINT(1 1)"}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>asEWKT</varname>: Extended Well-Known Text (WKT) representation &Z_support; &geography_support;</para>
					<para>Signature: <varname>asEWKT({tpoint, tpoint[], geo[]}): {text, text[]}</varname></para>
					<programlisting>
SELECT asEWKT(tgeompoint 'SRID=4326;[Point(0 0 0)@2012-01-01, Point(1 1 1)@2012-01-02)');
-- "SRID=4326;[POINT Z (0 0 0)@2012-01-01 00:00:00+00, POINT Z (1 1 1)@2012-01-02 00:00:00+00)"
SELECT asEWKT(ARRAY[geometry 'SRID=5676;Point(0 0)', 'SRID=5676;Point(1 1)']);
-- "{"SRID=5676;POINT(0 0)","SRID=5676;POINT(1 1)"}"
						</programlisting>
				</listitem>

				<listitem>
					<para><varname>SRID</varname>: Spatial reference identifier &Z_support; &geography_support;</para>
					<para>Signature: <varname>SRID(tpoint): integer</varname></para>
					<programlisting>
SELECT SRID(tgeompoint 'Point(0 0)@2012-01-01');
-- 0
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>setSRID</varname>: Set the spatial reference identifier &Z_support; &geography_support;</para>
					<para>Signature: <varname>setSRID(tpoint): integer</varname></para>
					<programlisting>
SELECT asEWKT(setSRID(tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-02)', 4326));
-- "SRID=4326;[POINT(0 0)@2012-01-01 00:00:00+00, POINT(1 1)@2012-01-02 00:00:00+00)"
					</programlisting>
					</listitem>

				<listitem>
					<para><varname>transform</varname>: Transform to a different spatial reference &Z_support; &geography_support;</para>
					<para>Signature: <varname>transform(tpoint, integer): tpoint</varname></para>
					<programlisting>
SELECT asEWKT(transform(tgeompoint 'SRID=4326;Point(4.35 50.85)@2012-01-01', 3812));
-- "SRID=3812;POINT(648679.018035303 671067.055638114)@2012-01-01 00:00:00+00"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>setPrecision</varname>: Round the coordinate values to a number of decimal places &Z_support; &geography_support;</para>
					<para>Signature: <varname>setPrecision(tpoint, int): tpoint</varname></para>
					<programlisting>
SELECT astext(setprecision(tgeompoint '{Point(1.12345 1.12345 1.12345)@2000-01-01, Point(2 2 2)@2000-01-02, Point(1.12345 1.12345 1.12345)@2000-01-03}', 2));
-- "{POINT Z (1.12 1.12 1.12)@2000-01-01, POINT Z (2 2 2)@2000-01-02, POINT Z (1.12 1.12 1.12)@2000-01-03}"
SELECT astext(setprecision(tgeogpoint 'Point(1.12345 1.12345)@2000-01-01', 2));
-- "POINT(1.12 1.12)@2000-01-01"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>length</varname>: Length traversed by the temporal point &Z_support; &geography_support;</para>
					<para>Signature: <varname>length(tpoint): float</varname></para>
					<programlisting>
SELECT length(tgeompoint '[Point(0 0 0)@2000-01-01, Point(1 1 1)@2000-01-02]');
-- 1.73205080756888
SELECT length(tgeompoint '[Point(0 0 0)@2000-01-01, Point(1 1 1)@2000-01-02,
Point(0 0 0)@2000-01-03]');
-- 3.46410161513775
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>cumulativeLength</varname>: Cumulative length traversed by the temporal point &Z_support; &geography_support;</para>
					<para>Signature: <varname>cumulativeLength(tpoint): tfloatseq</varname></para>
					<programlisting>
SELECT cumulativeLength(tgeompoints(ARRAY[tgeompoint
	 '[Point(0 0)@2000-01-01, Point(1 1)@2000-01-02, Point(1 0)@2000-01-03]',"
	 '[Point(1 0)@2000-01-04, Point(0 0)@2000-01-05]']));
	 -- "{[0@2000-01-01, 1.4142135623731@2000-01-02, 2.41421356237309@2000-01-03],
			[2.41421356237309@2000-01-04, 3.41421356237309@2000-01-05]}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>speed</varname>: Speed of the temporal point in units per second &Z_support; &geography_support;</para>
					<para>Signature: <varname>speed(tpoint): tfloats</varname></para>
					<programlisting>
SELECT speed(tgeompoints(ARRAY[tgeompoint
	 '[Point(0 0)@2000-01-01, Point(1 1)@2000-01-02, Point(1 0)@2000-01-03]',
	 '[Point(1 0)@2000-01-04, Point(0 0)@2000-01-05]']))
	 * 3600 * 24;
	 -- "{[1.4142135623731@2000-01-01, 1.4142135623731@2000-01-02),
[1@2000-01-02, 1@2000-01-03], [1@2000-01-04, 1@2000-01-05]}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>gbox</varname>: Construct the bounding box from a geometry/geography and a timestap or a period &Z_support; &geography_support;</para>
					<para>Signature: <varname>gbox(geo, {timestamp, period}): gbox</varname></para>
					<programlisting>
SELECT gbox(geometry 'Linestring(1 1 1,2 2 2)', period '[2012-01-03, 2012-01-05]');
-- "GBOX ZM((1,1,1,3.78864e+14),(2,2,2,3.790368e+14))"
SELECT gbox(geography 'Linestring(1 1 1,2 2 2)', period '[2012-01-03, 2012-01-05]');
-- "GEODBOX((0.99878198,0.017449748,0.017452406,3.78864e+14),
(0.99969542,0.034878239,0.034899499,3.790368e+14))"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>expandSpatial</varname>: Expand the bounding box of the temporal point by a float value &Z_support; &geography_support;</para>
					<para>Signature: <varname>expandSpatial(tpoint, float): gbox</varname></para>
					<programlisting>
SELECT expandSpatial(tgeompoint '{[Point(1 1 1)@2012-01-01, Point(2 2 2)@2012-01-03),
[Point(1 1 1)@2012-01-03, Point(3 3 3)@2012-01-05)}', 1);
-- "GBOX((0,0,0,3.786912e+14),(4,4,4,3.790368e+14))"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>expandTemporal</varname>: Expand the bounding box of the temporal point by a time interval &Z_support; &geography_support;</para>
					<para>Signature: <varname>expandSpatial(tpoint, interval): gbox</varname></para>
					<programlisting>
SELECT expandTemporal(tgeompoint '{[Point(1 1 1)@2012-01-01, Point(2 2 2)@2012-01-03),
[Point(1 1 1)@2012-01-03, Point(3 3 3)@2012-01-05)}', interval '1 day');
-- "GBOX((1,1,1,3.786048e+14),(3,3,3,3.791232e+14))"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>twCentroid</varname>: Time-weighted centroid &Z_support;</para>
					<para>Signature: <varname>twCentroid(tgeompoint): point</varname></para>
					<programlisting>
SELECT st_astext(twCentroid(tgeompoint '{[Point(0 0 0)@2012-01-01, Point(0 1 1)@2012-01-02,
	Point(0 1 1)@2012-01-03, Point(0 0 0)@2012-01-04)}'));
-- "POINT Z (0 0.666666666666667 0.666666666666667)"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>azimuth</varname>: Temporal azimuth &Z_support; &geography_support;</para>
					<para>Signature: <varname>azimuth(tpoint): tfloat</varname></para>
					<programlisting>
SELECT azimuth(tgeompoint '{[Point(0 0 0)@2012-01-01, Point(0 1 1)@2012-01-02,
Point(0 1 1)@2012-01-03, Point(0 0 0)@2012-01-04)}');
-- "{[0@2012-01-01 00:00:00+00, 0@2012-01-02 00:00:00+00), [3.14159265358979@2012-01-03 00:00:00+00, 3.14159265358979@2012-01-04 00:00:00+00)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>nearestApproachInstant</varname>: Instant of the first temporal point at which the two arguments are at the nearest distance. The function will only return the first instant that it finds if there are more than one. Notice that the resulting instant may be at an exclusive bound. &Z_support; &geography_support;</para>
					<para>Signature: <varname>nearestApproachInstant({geo, tpoint}, {geo, tpoint}): tpoint</varname></para>
					<programlisting>
SELECT asText(nearestApproachInstant(
tgeompoint '[Point(0 0)@2012-01-02, Point(1 1)@2012-01-04, Point(0 0)@2012-01-06)',
geometry 'Linestring(2 2,2 1,3 1)'));
-- "POINT(1 1)@2012-01-04"
SELECT asText(nearestApproachInstant(
tgeompoint '[Point(0 0 0)@2012-01-01, Point(1 1 1)@2012-01-03, Point(0 0 0)@2012-01-05)',
tgeompoint '[Point(2 0 0)@2012-01-02, Point(1 1 1)@2012-01-04, Point(2 2 2)@2012-01-06)'));
-- "POINT Z (0.75 0.75 0.75)@2012-01-03 12:00:00+00"
					</programlisting>
					<para>Function <varname>nearestApproachInstant</varname> generalizes the PostGIS function <varname>ST_ClosestPointOfApproach</varname>. First, the latter function requires both arguments to be trajectories. Second, function <varname>nearestApproachInstant</varname> returns both the point and the timestamp of the nearest point of approach while the PostGIS function only provides the timestamp as shown next.</para>
					<programlisting>
SELECT to_timestamp(ST_ClosestPointOfApproach(
tgeompoint '[Point(0 0 0)@2012-01-01, Point(1 1 1)@2012-01-03, Point(0 0 0)@2012-01-05)'::geometry,
tgeompoint '[Point(2 0 0)@2012-01-02, Point(1 1 1)@2012-01-04, Point(2 2 2)@2012-01-06)'::geometry));
-- "2012-01-03 12:00:00+00"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>nearestApproachDistance</varname>: Smallest distance ever between the two arguments &Z_support; &geography_support;</para>
					<para>Signature: <varname>nearestApproachDistance({geo, tpoint}, {geo, tpoint}): float</varname></para>
					<programlisting>
SELECT nearestApproachDistance(
tgeompoint '[Point(0 0)@2012-01-02, Point(1 1)@2012-01-04, Point(0 0)@2012-01-06)',
geometry 'Linestring(2 2,2 1,3 1)');
-- "1"
SELECT nearestApproachDistance(
tgeompoint '[Point(0 0 0)@2012-01-01, Point(1 1 1)@2012-01-03, Point(0 0 0)@2012-01-05)',
tgeompoint '[Point(2 0 0)@2012-01-02, Point(1 1 1)@2012-01-04, Point(2 2 2)@2012-01-06)');
-- "0.5"
					</programlisting>
					<para>Function <varname>nearestApproachDistance</varname> has an associated operator <varname>|=|</varname> that can be used for doing nearest neightbor searches using a GiST index (see <xref linkend="operators_temporal_types" />). This function corresponds to the function <varname>ST_DistanceCPA</varname> provided by PostGIS, altough the latter requires both arguments to be a trajectory.</para>
					<programlisting>
SELECT ST_DistanceCPA(
tgeompoint '[Point(0 0 0)@2012-01-01, Point(1 1 1)@2012-01-03, Point(0 0 0)@2012-01-05)'::geometry,
tgeompoint '[Point(2 0 0)@2012-01-02, Point(1 1 1)@2012-01-04, Point(2 2 2)@2012-01-06)'::geometry);
-- "0.5"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>shortestLine</varname>: Line connecting the nearest approach point between the two arguments. The function will only return the first line that it finds if there are more than one. &Z_support; &geography_support;</para>
					<para>Signature: <varname>shortestLine({geo, tpoint}, {geo, tpoint}): geo</varname></para>
					<programlisting>
SELECT ST_AsText(shortestLine(
tgeompoint '[Point(0 0)@2012-01-02, Point(1 1)@2012-01-04, Point(0 0)@2012-01-06)',
geometry 'Linestring(2 2,2 1,3 1)'));
-- "LINESTRING(1 1,2 1)"
SELECT ST_AsText(shortestLine(
tgeompoint '[Point(0 0 0)@2012-01-01, Point(1 1 1)@2012-01-03, Point(0 0 0)@2012-01-05)',
tgeompoint '[Point(2 0 0)@2012-01-02, Point(1 1 1)@2012-01-04, Point(2 2 2)@2012-01-06)'));
-- "LINESTRING Z (0.75 0.75 0.75,1.25 0.75 0.75)"
					</programlisting>
					<para>Function <varname>shortestLine</varname> can be used to obtain the result provided by the PostGIS function <varname>ST_CPAWithin</varname> when both arguments are trajectories as shown next.</para>
					<programlisting>
SELECT ST_Length(shortestLine(
tgeompoint '[Point(0 0 0)@2012-01-01, Point(1 1 1)@2012-01-03, Point(0 0 0)@2012-01-05)',
tgeompoint '[Point(2 0 0)@2012-01-02, Point(1 1 1)@2012-01-04, Point(2 2 2)@2012-01-06)'))
&lt;= 0.5;
-- true
SELECT ST_CPAWithin(
tgeompoint '[Point(0 0 0)@2012-01-01, Point(1 1 1)@2012-01-03, Point(0 0 0)@2012-01-05)'::geometry,
tgeompoint '[Point(2 0 0)@2012-01-02, Point(1 1 1)@2012-01-04, Point(2 2 2)@2012-01-06)'::geometry, 0.5);
-- true
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>

		<sect1>
			<title>Restriction Functions</title>
			<para>These functions restrict the temporal value with respect to a value extent or a time extent.</para>

			<itemizedlist>
				<listitem>
					<para><varname>atValue</varname>: Restrict to value</para>
					<para>Signature: <varname>atValue(ttype, base): ttype</varname></para>
					<programlisting>
SELECT atValue(tint '[1@2012-01-01, 1@2012-01-15)', 1);
-- "[1@2012-01-01, 1@2012-01-15)"
SELECT astext(atValue(tgeompoint '[Point(0 0 0)@2012-01-01, Point(2 2 2)@2012-01-03)',
'Point(1 1 1)'));
-- "{[POINT Z (1 1 1)@2012-01-02]}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>atValues</varname>: Restrict to values</para>
					<para>Signature: <varname>atValues(ttype, base[]): ttype</varname></para>
					<programlisting>
SELECT atValues(tfloat '[1@2012-01-01, 4@2012-01-4)', ARRAY[1, 3, 5]);
-- "{[1@2012-01-01], [3@2012-01-03]}"
SELECT astext(atValues(tgeompoint '[Point(0 0)@2012-01-01, Point(2 2)@2012-01-03)',
ARRAY[geometry 'Point(0 0)', 'Point(1 1)']));
-- "{[POINT(0 0)@2012-01-01 00:00:00+00], [POINT(1 1)@2012-01-02 00:00:00+00]}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>atRange</varname>: Restrict to range</para>
					<para>Signature: <varname>atRange(tnumber, numrange): ttype</varname></para>
					<programlisting>
SELECT atRange(tfloat '[1@2012-01-01, 4@2012-01-4)', floatrange '[1,3]');
-- "[1@2012-01-01, 3@2012-01-03]"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>atRanges</varname>: Restrict to ranges</para>
					<para>Signature: <varname>atRanges(tnumber, numrange[]): ttype</varname></para>
					<programlisting>
SELECT atRanges(tfloat '[1@2012-01-01, 5@2012-01-05)', ARRAY[floatrange '[1,2]', '[3,4]']);
-- "{[1@2012-01-01, 2@2012-01-02],[3@2012-01-03, 4@2012-01-04]}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>atMin</varname>: Restrict to minimum value</para>
					<para>The function does not take into account whether the bounds are inclusive or not.</para>
					<para>Signature: <varname>atMin(torder): torder</varname></para>
					<programlisting>
SELECT atMin(tint '{1@2012-01-01, 2@2012-01-03, 1@2012-01-05}');
-- "{1@2012-01-01, 1@2012-01-05}"
SELECT atMin(tfloat '(1@2012-01-01, 3@2012-01-03]');
-- "{[1@2012-01-01]}"
SELECT atMin(tfloat '{(1@2012-01-01, 1@2012-01-03), (1@2012-01-03, 3@2012-01-05)}');
-- "{(1@2012-01-01, 1@2012-01-03)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>atMax</varname>: Restrict to maximum value</para>
					<para>The function does not take into account whether the bounds are inclusive or not.</para>
					<para>Signature: <varname>atMax(torder): torder</varname></para>
					<programlisting>
SELECT atMax(tint '{1@2012-01-01, 2@2012-01-03, 3@2012-01-05}');
-- "{3@2012-01-05}"
SELECT atMax(tfloat '(1@2012-01-01, 3@2012-01-03)');
-- "{[3@2012-01-03]}"
SELECT atMax(tfloat '{[2@2012-01-01, 1@2012-01-03), [2@2012-01-03, 2@2012-01-05)}');
-- "{[2@2012-01-01], [2@2012-01-03, 2@2012-01-05]}"
SELECT atMax(tfloat '{[1@2012-01-01, 3@2012-01-03), (3@2012-01-03, 1@2012-01-05)}');
-- "{[3@2012-01-03]}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>atGeometry</varname>: Restrict to geometry</para>
					<para>Signature: <varname>atGeometry(tgeompoint, geometry): tgeompoint</varname></para>
					<programlisting>
SELECT astext(atGeometry(tgeompoint '[Point(0 0)@2012-01-01, Point(3 3)@2012-01-04)',
 geometry 'Polygon((1 1,1 2,2 2,2 1,1 1))'));
 -- "{"[POINT(1 1)@2012-01-02, POINT(2 2)@2012-01-03]"}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>atTimestamp</varname>: Restrict to timestamp</para>
					<para>Signature: <varname>atTimestamp(ttype, timestamptz): ttypeinst</varname></para>
					<programlisting>
SELECT atTimestamp(tfloat '[1@2012-01-01, 5@2012-01-05)', '2012-01-02');
-- "2@2012-01-02"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>atTimestampSet</varname>: Restrict to timestamp set</para>
					<para>Signature: <varname>atTimestampSet(ttype, timestampset): {ttypeinst, ttypei}</varname></para>
					<programlisting>
SELECT atTimestampSet(tint '[1@2012-01-01, 1@2012-01-15)',
timestampset '{2012-01-01, 2012-01-03}');
-- "{1@2012-01-01, 1@2012-01-03}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>atPeriod</varname>: Restrict to period</para>
					<para>Signature: <varname>atPeriod(ttype, period): ttype</varname></para>
					<programlisting>
SELECT atPeriod(tfloat '{[1@2012-01-01, 3@2012-01-03), [3@2012-01-04, 1@2012-01-06)}',
'[2012-01-02,2012-01-05)');
-- "{[2@2012-01-02, 3@2012-01-03), [3@2012-01-04, 2@2012-01-05)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>atPeriodSet</varname>: Restrict to period set</para>
					<para>Signature: <varname>atPeriodSet(ttype, periodset): ttype</varname></para>
					<programlisting>
SELECT atPeriodSet(tint '[1@2012-01-01, 1@2012-01-15)',
	periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-05)}');
	-- "{[1@2012-01-01, 1@2012-01-03),[1@2012-01-04, 1@2012-01-05)}"
					</programlisting>
				</listitem>
		 </itemizedlist>
		</sect1>

		<sect1>
			<title>Difference Functions</title>
			<para>These functions restrict the temporal value with respect to the complement of a value/range or a time extent.</para>
			<itemizedlist>
				<listitem>
				<para><varname>minusValue</varname>: Difference with value</para>
				<para>Signature: <varname>minusValue(ttype, base): ttype</varname></para>
				<programlisting>
SELECT minusValue(tint '[1@2012-01-01, 2@2012-01-02, 2@2012-01-03)', 1);
-- "{[2@2012-01-02, 2@2012-01-03)}"
SELECT astext(minusValue(tgeompoint '[Point(0 0 0)@2012-01-01, Point(2 2 2)@2012-01-03)',
'Point(1 1 1)'));
-- "{[POINT Z (0 0 0)@2012-01-01, POINT Z (1 1 1)@2012-01-02),
(POINT Z (1 1 1)@2012-01-02, POINT Z (2 2 2)@2012-01-03)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>minusValues</varname>: Difference with values</para>
					<para>Signature: <varname>minusValues(ttype, base[]): ttype</varname></para>
					<programlisting>
SELECT minusValues(tfloat '[1@2012-01-01, 4@2012-01-4)', ARRAY[2, 3]);
-- "{[1@2012-01-01, 2@2012-01-02), (2@2012-01-02, 3@2012-01-03), (3@2012-01-03, 4@2012-01-04)}"
SELECT astext(minusValues(tgeompoint '[Point(0 0 0)@2012-01-01, Point(3 3 3)@2012-01-04)',
ARRAY[geometry 'Point(1 1 1)', 'Point(2 2 2)']));
-- "{[POINT Z (0 0 0)@2012-01-01, POINT Z (1 1 1)@2012-01-02),
(POINT Z (1 1 1)@2012-01-02, POINT Z (2 2 2)@2012-01-03),
(POINT Z (2 2 2)@2012-01-03, POINT Z (3 3 3)@2012-01-04)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>minusRange</varname>: Difference with range</para>
					<para>Signature: <varname>minusRange(tnumber, numrange): ttype</varname></para>
					<programlisting>
SELECT minusRange(tfloat '[1@2012-01-01, 4@2012-01-4)', floatrange '[2,3]');
-- "{[1@2012-01-01, 2@2012-01-02), (3@2012-01-03, 4@2012-01-04)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>minusRanges</varname>: Difference with ranges</para>
					<para>Signature: <varname>minusRanges(tnumber, numrange[]): ttype</varname></para>
					<programlisting>
SELECT minusRanges(tfloat '[1@2012-01-01, 5@2012-01-05)', ARRAY[floatrange '[1,2]', '[3,4]']);
-- "{(2@2012-01-02, 3@2012-01-03), (4@2012-01-04, 5@2012-01-05)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>minusMin</varname>: Difference with minimum value</para>
					<para>Signature: <varname>minusMin(torder): torder</varname></para>
					<programlisting>
SELECT minusMin(tint '{1@2012-01-01, 2@2012-01-03, 1@2012-01-05}');
-- "{2@2012-01-03}"
SELECT minusMin(tfloat '[1@2012-01-01, 3@2012-01-03]');
-- "{(1@2012-01-01, 3@2012-01-03]}"
SELECT minusMin(tfloat '(1@2012-01-01, 3@2012-01-03)');
-- "{(1@2012-01-01, 3@2012-01-03)}"
SELECT minusMin(tint '{[1@2012-01-01, 1@2012-01-03), (1@2012-01-03, 1@2012-01-05)}');
-- NULL
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>minusMax</varname>: Difference with maximum value</para>
					<para>Signature: <varname>minusMax(torder): torder</varname></para>
					<programlisting>
SELECT minusMax(tint '{1@2012-01-01, 2@2012-01-03, 3@2012-01-05}');
-- "{1@2012-01-01, 2@2012-01-03}"
SELECT minusMax(tfloat '[1@2012-01-01, 3@2012-01-03]');
-- "{[1@2012-01-01, 3@2012-01-03)}"
SELECT minusMax(tfloat '(1@2012-01-01, 3@2012-01-03)');
-- "{(1@2012-01-01, 3@2012-01-03)}"
SELECT minusMax(tfloat '{[2@2012-01-01, 1@2012-01-03), [2@2012-01-03, 2@2012-01-05)}');
-- "{(2@2012-01-01, 1@2012-01-03)}"
SELECT minusMax(tfloat '{[1@2012-01-01, 3@2012-01-03), (3@2012-01-03, 1@2012-01-05)}');
-- "{[1@2012-01-01, 3@2012-01-03), (3@2012-01-03, 1@2012-01-05)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>minusGeometry</varname>: Difference with geometry</para>
					<para>Signature: <varname>minusGeometry(tgeompoint, geometry): tgeompoint</varname></para>
					<programlisting>
SELECT astext(minusGeometry(tgeompoint '[Point(0 0)@2012-01-01, Point(3 3)@2012-01-04)',
 geometry 'Polygon((1 1,1 2,2 2,2 1,1 1))'));
 -- "{[POINT(0 0)@2012-01-01, POINT(1 1)@2012-01-02), (POINT(2 2)@2012-01-03,
POINT(3 3)@2012-01-04)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>minusTimestamp</varname>: Difference with timestamp</para>
					<para>Signature: <varname>minusTimestamp(ttype, timestamptz): ttype</varname></para>
					<programlisting>
SELECT minusTimestamp(tfloat '[1@2012-01-01, 5@2012-01-05)', '2012-01-02');
-- "{[1@2012-01-01, 2@2012-01-02), (2@2012-01-02, 5@2012-01-05)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>minusTimestampSet</varname>: Difference with timestamp set</para>
					<para>Signature: <varname>minusTimestampSet(ttype, timestampset): ttype</varname></para>
					<programlisting>
SELECT minusTimestampSet(tint '[1@2012-01-01, 1@2012-01-15)',
timestampset '{2012-01-02, 2012-01-03}');
-- "{[1@2012-01-01, 1@2012-01-02), (1@2012-01-02, 1@2012-01-03), (1@2012-01-03, 1@2012-01-15)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>minusPeriod</varname>: Difference with period</para>
					<para>Signature: <varname>minusPeriod(ttype, period): ttype</varname></para>
					<programlisting>
SELECT minusPeriod(tfloat '{[1@2012-01-01, 3@2012-01-03), [3@2012-01-04, 1@2012-01-06)}',
'[2012-01-02,2012-01-05)');
-- "{[1@2012-01-01, 2@2012-01-02), [2@2012-01-05, 1@2012-01-06)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>minusPeriodSet</varname>: Difference with period set</para>
					<para>Signature: <varname>minusPeriodSet(ttype, periodset): ttype</varname></para>
					<programlisting>
SELECT minusPeriodSet(tint '[1@2012-01-01, 1@2012-01-15)',
	periodset '{[2012-01-02, 2012-01-03), [2012-01-04, 2012-01-05)}');
	-- "{[1@2012-01-01, 1@2012-01-02), [1@2012-01-03, 1@2012-01-04), [1@2012-01-05, 1@2012-01-15)}"
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>

		<sect1 id="operators_temporal_types">
			<title>Comparison Operators</title>

			<para>The traditional comparison operators require that the left and right be of the same base type. Excepted the equality and inequality, the other comparison operators (<varname>&lt;=</varname> and so on) are not useful in the real world but allow B-tree indexes to be constructed on temporal types. For temporal instant values, they compare first the timestamps and only if those are equal, compare the value(s). For temporal values with sequence duration, they compare the first N instants, where N is the minimum of the number of composing instants of both values. For temporal set values, they compare the first N unit values, where N is the minimum of the number of composing unit values of both temporal set values.</para>

			<para>The equality and inequality operators consider the normal forms of the temporal types and the equivalent representation for different durations as shown next.
				<programlisting>
SELECT tint '{[1@2001-01-01, 1@2001-01-03), [1@2001-01-03, 1@2001-01-05)}' =
tint '{[1@2001-01-01, 1@2001-01-05)}';
-- true
SELECT tfloat '{[1@2001-01-01, 2@2001-01-03), [2@2001-01-03, 3@2001-01-05)}' &lt;&gt;
tfloat '{[1@2001-01-01, 3@2001-01-05)}';
-- false
SELECT tgeompoint '{[Point(1 1)@2001-01-01, Point(1 1)@2001-01-03),
[Point(1 1)@2001-01-03, Point(1 1)@2001-01-05)}' =
tgeompoint '{[Point(1 1)@2001-01-01, Point(1 1)@2001-01-05)}';
-- true
SELECT tgeompoint '{[Point(1 1)@2001-01-01, Point(2 2)@2001-01-03),
[Point(2 2)@2001-01-03, Point(3 3)@2001-01-05)}' &lt;&gt;
tgeompoint '{[Point(1 1)@2001-01-01, Point(3 3)@2001-01-05)}';
-- false
SELECT tgeompoint '{[Point(1 1)@2001-01-01]}' = tgeompoint 'Point(1 1)@2001-01-01';
-- false
SELECT tgeompoint '{[Point(1 1)@2001-01-01], [Point(2 2)@2001-01-02]}' = 
	tgeompoint '{Point(1 1)@2001-01-01,Point(2 2)@2001-01-02}';
-- true
				</programlisting>
			</para>

			<itemizedlist>
				<listitem>
				<para><varname>=</varname>: Equal</para>
				<para>Signature: <varname>ttype = ttype: boolean</varname></para>
				<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' = tint '[2@2012-01-03, 2@2012-01-05)';
-- false
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&lt;&gt;</varname>: Not equal</para>
					<para>Signature: <varname>ttype &lt;&gt; ttype: boolean</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &lt;&gt; tint '[2@2012-01-03, 2@2012-01-05)'
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&lt;</varname>: Less than</para>
					<para>Signature: <varname>ttype &lt; ttype: boolean</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &lt; tint '[2@2012-01-03, 2@2012-01-05)'
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&gt;</varname>: Greater than</para>
					<para>Signature: <varname>ttype &gt; ttype: boolean</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &gt; tint '[2@2012-01-03, 2@2012-01-05)'
-- false
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&lt;=</varname>: Less than or equal to</para>
					<para>Signature: <varname>ttype &lt;= ttype: boolean</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &lt;= tint '[2@2012-01-03, 2@2012-01-05)'
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&gt;=</varname>: Greater than or equal to</para>
					<para>Signature: <varname>ttype &gt;= ttype: boolean</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &gt;= tint '[2@2012-01-03, 2@2012-01-05)'
-- false
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>

		<sect1>
			<title>Ever and Always Equals Operators</title>
			<para>These operators test whether a temporal value is ever or always equal to a value of the base type. As explained in <xref linkend="manipulating_temporal_types" />, these are typically used to test whether a condition is ever or always satisfied.</para>
			<itemizedlist>
				<listitem>
					<para><varname>&amp;=</varname>: Is ever equal to the value?</para>
					<para>The function does not take into account whether the bounds are inclusive or not.</para>
					<para>Signature: <varname>ttype &amp;= base: bool</varname></para>
					<programlisting>
SELECT tfloat '[1@2012-01-01, 3@2012-01-04)' &amp;= 2;
-- true
SELECT tfloat '[1@2012-01-01, 3@2012-01-04)' &amp;= 3;
-- true
SELECT tgeompoint '[Point(0 0)@2012-01-01, Point(2 2)@2012-01-04)' &amp;= geometry 'Point(1 1)';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>@=</varname>: Is always equal to the value?</para>
					<para>Signature: <varname>ttype @= base: bool</varname></para>
					<programlisting>
SELECT tfloat '[1@2012-01-01, 3@2012-01-04)' @= 2;
-- false
SELECT tfloat '[2@2012-01-01, 2@2012-01-04)' @= 2;
-- true
SELECT tgeompoint '[Point(1 1)@2012-01-01, Point(1 1)@2012-01-04)' @= geometry 'Point(1 1)';
-- true
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>

		<sect1>
			<title>Temporal Comparison Operators</title>

			<itemizedlist>
				<listitem>
					<para><varname>#=</varname>: Temporal equal</para>
					<para>Signature: <varname>{base, ttype} #= {base, ttype}: tbool</varname></para>
					<programlisting>
SELECT tfloat '[1@2012-01-01, 2@2012-01-04)' #= 3;
-- "{[f@2012-01-01, f@2012-01-04)}"
SELECT tfloat '[1@2012-01-01, 4@2012-01-04)' #= tint '[1@2012-01-01, 1@2012-01-04)';
-- "{[t@2012-01-01], (f@2012-01-01, f@2012-01-04)}"
SELECT tfloat '[1@2012-01-01, 4@2012-01-04)' #= tfloat '[4@2012-01-02, 1@2012-01-05)';
-- "{[f@2012-01-02, t@2012-01-03], (f@2012-01-03, f@2012-01-04)}"
SELECT tgeompoint '[Point(0 0)@2012-01-01, Point(2 2)@2012-01-03)' #= geometry 'Point(1 1)';
-- "{[f@2012-01-01, t@2012-01-02], (f@2012-01-02, f@2012-01-03)}"
SELECT tgeompoint '[Point(0 0)@2012-01-01, Point(2 2)@2012-01-03)' #=
tgeompoint '[Point(0 2)@2012-01-01, Point(2 0)@2012-01-03)';
-- "{[f@2012-01-01], (t@2012-01-01, t@2012-01-03)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>#&lt;&gt;</varname>: Temporal not equal</para>
					<para>Signature: <varname>{base, ttype} #&lt;&gt; {base, ttype}: tbool</varname></para>
					<programlisting>
SELECT tfloat '[1@2012-01-01, 4@2012-01-04)' #&lt;&gt; 2;
-- "{[t@2012-01-01, f@2012-01-02], (t@2012-01-02, 2012-01-04)}"
SELECT tfloat '[1@2012-01-01, 4@2012-01-04)' #&lt;&gt; tint '[2@2012-01-02, 2@2012-01-05)';
-- "{[f@2012-01-02], (t@2012-01-02, t@2012-01-04)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>#&lt;</varname>: Temporal less than</para>
					<para>Signature: <varname>{base, ttype} #&lt; {base, ttype}: tbool</varname></para>
					<programlisting>
SELECT tfloat '[1@2012-01-01, 4@2012-01-04)' #&lt; 2;
-- "{[t@2012-01-01, f@2012-01-02, f@2012-01-04)}"
SELECT tint '[2@2012-01-01, 2@2012-01-05)' #&lt; tfloat '[1@2012-01-03, 3@2012-01-05)';
-- "{[f@2012-01-03, f@2012-01-04], (t@2012-01-04, t@2012-01-05)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>#&gt;</varname>: Temporal greater than</para>
					<para>Signature: <varname>{base, ttype} #&gt; {base, ttype}: tbool</varname></para>
					<programlisting>
SELECT 1 #&gt; tint '[1@2012-01-03, 1@2012-01-05)';
-- "[f@2012-01-03, f@2012-01-05)"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>#&lt;=</varname>: Temporal less than or equal to</para>
					<para>Signature: <varname>{base, ttype} #&lt;= {base, ttype}: tbool</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-05)' #&lt;= tfloat '{2@2012-01-03, 3@2012-01-04}';
-- "{t@2012-01-03, t@2012-01-04}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>#&gt;=</varname>: Temporal greater than or equal to</para>
					<para>Signature: <varname>{base, ttype} #&gt;= {base, ttype}: tbool</varname></para>
					<programlisting>
SELECT 'AAA'::text #&gt; ttext '{[AAA@2012-01-01, AAA@2012-01-03), [BBB@2012-01-04, BBB@2012-01-05)}';
-- "{[f@2012-01-01, f@2012-01-03), [t@2012-01-04, t@2012-01-05)}"
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>
				
		<sect1>
			<title>Mathematical Functions and Operators</title>

			<itemizedlist>
				<listitem>
					<para><varname>+</varname>: Addition</para>
					<para>Signature: <varname>{num, tnumber} + {num, tnumber}: tnumber</varname></para>
					<programlisting>
SELECT tint '[2@2012-01-01, 2@2012-01-04)' + 1.5;
-- "[3.5@2012-01-01, 3.5@2012-01-04)"
SELECT tint '[2@2012-01-01, 2@2012-01-04)' + tfloat '[1@2012-01-01, 4@2012-01-04)';
-- "[3@2012-01-01, 6@2012-01-04)"
SELECT tfloat '[1@2012-01-01, 4@2012-01-04)' +
tfloat '{[1@2012-01-01, 2@2012-01-02), [1@2012-01-02, 2@2012-01-04)}';
-- "{[2@2012-01-01, 4@2012-01-04), [3@2012-01-02, 6@2012-01-04)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>-</varname>: Substraction</para>
					<para>Signature: <varname>{num, tnumber} - {num, tnumber}: tnumber</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' - tint '[2@2012-01-03, 2@2012-01-05)';
-- "[-1@2012-01-03, -1@2012-01-04)"
SELECT tfloat '[3@2012-01-01, 6@2012-01-04)' - tint '[2@2012-01-01, 2@2012-01-04)';
-- "[1@2012-01-01, 4@2012-01-04)"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>*</varname>: Multiplication</para>
					<para>Signature: <varname>{num, tnumber} * {num, tnumber}: tnumber</varname></para>
					<programlisting>
SELECT tfloat '[1@2012-01-01, 4@2012-01-04)' * 2;
-- "[2@2012-01-01, 8@2012-01-04)"
SELECT tfloat '[1@2012-01-01, 4@2012-01-04)' * tint '[2@2012-01-01, 2@2012-01-04)';
-- "[2@2012-01-01, 8@2012-01-04)"
SELECT tfloat '[1@2012-01-01, 3@2012-01-03)' * '[3@2012-01-01, 1@2012-01-03)'
-- "{[3@2012-01-01, 4@2012-01-02, 3@2012-01-03)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>/</varname>: Division</para>
					<para>Signature: <varname>{num, tnumber} / {num, tnumber}: tnumber</varname></para>
					<programlisting>
SELECT 2 / tfloat '[1@2012-01-01, 3@2012-01-04)';
-- "[2@2012-01-01, 1@2012-01-02 12:00:00+00, 0.666666666666667@2012-01-04)"
SELECT tfloat '[1@2012-01-01, 5@2012-01-05)' / '[5@2012-01-01, 1@2012-01-05)'
-- "{[0.2@2012-01-01, 1@2012-01-03,2012-01-03, 5@2012-01-03,2012-01-05)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>round</varname>: Round to n decimal places</para>
					<para>Signature: <varname>round(tfloat, integer): tfloat</varname></para>
					<programlisting>
SELECT round(tfloat '[0.785398163397448@2000-01-01, 2.35619449019234@2000-01-02]', 2);
-- "[0.79@2000-01-01, 2.36@2000-01-02]"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>degrees</varname>: Radians to degrees</para>
					<para>Signature: <varname>degrees(tfloat): tfloat</varname></para>
					<programlisting>
SELECT degrees(tfloat '[0.785398163397448@2000-01-01, 2.35619449019234@2000-01-02]');
-- "[45@2000-01-01, 135@2000-01-02]"
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>

		<sect1>
			<title>Boolean Operators</title>
			<itemizedlist>
				<listitem>
					<para><varname>&amp;</varname>: Boolean and</para>
					<para>Signature: <varname>{bool, tbool} &amp; {bool, tbool}: tbool</varname></para>
					<programlisting>
SELECT tbool '[true@2012-01-03, true@2012-01-05)' &amp; tbool '[false@2012-01-03, false@2012-01-05)';
-- "[f@2012-01-03, f@2012-01-05)"
SELECT tbool '[true@2012-01-03, true@2012-01-05)' &amp; tbool '{[false@2012-01-03, false@2012-01-04), [true@2012-01-04, true@2012-01-05)}';
-- "{[f@2012-01-03, t@2012-01-04, t@2012-01-05)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>|</varname>: Boolean or</para>
					<para>Signature: <varname>{bool, tbool} | {bool, tbool}: tbool</varname> Result: <varname>ttype</varname></para>
					<programlisting>
SELECT tbool '[true@2012-01-03, true@2012-01-05)' | tbool '[false@2012-01-03, false@2012-01-05)';
-- "[t@2012-01-03, t@2012-01-05)"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>~</varname>: Boolean not</para>
					<para>Signature: <varname>~ {bool, tbool}: tbool</varname></para>
					<programlisting>
SELECT ~ tbool '[true@2012-01-03, true@2012-01-05)';
-- "[f@2012-01-03, f@2012-01-05)"
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>

		<sect1>
			<title>Text Functions and Operators</title>

			<itemizedlist>
				<listitem>
					<para><varname>||</varname>: Concatenation</para>
					<para>Signature: <varname>{text, ttext} || {text, ttext}: ttext</varname></para>
					<programlisting>
SELECT ttext '[AA@2012-01-01, AA@2012-01-04)' || text 'B';
-- "["AAB"@2012-01-01, "AAB"@2012-01-04)"
SELECT ttext '[AA@2012-01-01, AA@2012-01-04)' || ttext '[BB@2012-01-02, BB@2012-01-05)';
-- "["AABB"@2012-01-02, "AABB"@2012-01-04)"
SELECT ttext '[A@2012-01-01, B@2012-01-03, C@2012-01-04]' ||
ttext '{[D@2012-01-01, D@2012-01-02), [E@2012-01-02, E@2012-01-04)}';
-- "{["DA"@2012-01-01, "EA"@2012-01-02, "EB"@2012-01-03, "EB"@2012-01-04)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>upper</varname>: Transform to uppercase</para>
					<para>Signature: <varname>upper(ttext, integer): ttext</varname></para>
					<programlisting>
SELECT upper(ttext '[AA@2000-01-01, bb@2000-01-02]');
-- "["AA"@2000-01-01, "BB"@2000-01-02]"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>lower</varname>: Transform to lowercase</para>
					<para>Signature: <varname>lower(ttext): ttext</varname></para>
					<programlisting>
SELECT lower(ttext '[AA@2000-01-01, bb@2000-01-02]');
-- "["aa"@2000-01-01, "bb"@2000-01-02]"
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>

		<sect1>
			<title>Bounding Box Operators</title>
			<para>These operators test whether the bounding boxes of their arguments satisfy the predicate and result in a Boolean value. As stated in <xref linkend="temporal_types" />, the bounding box associated to a temporal type depends on the base type: It is the <varname>period</varname> type for the <varname>tbool</varname> and <varname>ttext</varname> types, the <varname>box</varname> type for the <varname>tint</varname> and <varname>tfloat</varname> types, and the <varname>gbox</varname> type for the <varname>tgeompoint</varname> and <varname>tgeogpoint</varname> types.</para>

			<para>A first set of operators consider the relative position of the bounding boxes. The operators <varname>&lt;&lt;</varname>, <varname>&gt;&gt;</varname>, <varname>&amp;&lt;</varname>, and <varname>&amp;&gt;</varname> consider the value dimension for <varname>tint</varname> and <varname>tfloat</varname> types and the X coordinates for the <varname>tgeompoint</varname> and <varname>tgeogpoint</varname> types, the operators <varname>&lt;&lt;|</varname>, <varname>|&gt;&gt;</varname>, <varname>&amp;&lt;|</varname>, and <varname>|&amp;&gt;</varname> consider the Y coordinates for the <varname>tgeompoint</varname> and <varname>tgeogpoint</varname> types, the operators <varname>&lt;&lt;/</varname>, <varname>/&gt;&gt;</varname>, <varname>&amp;&lt;/</varname>, and <varname>/&amp;&gt;</varname> consider the Z coordinates for the <varname>tgeompoint</varname> and <varname>tgeogpoint</varname> types, and the operators <varname>&lt;&lt;#</varname>, <varname>#&gt;&gt;</varname>, <varname>#&amp;&lt;</varname>, and <varname>#&amp;&gt;</varname> consider the time dimension for all temporal types. The operators for the value dimension of the <varname>tint</varname> and <varname>tfloat</varname> types are given next.</para>

			<itemizedlist>
				<listitem>
					<para><varname>&lt;&lt;</varname>: Is the bounding box always strictly less than?</para>
					<para>Signature: <varname>{base, numrange, ttype} &lt;&lt; {base, numrange, ttype}: boolean</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &lt;&lt; 2;
-- true
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &lt;&lt; tint '[2@2012-01-03, 2@2012-01-05)';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&gt;&gt;</varname>: Is the bounding box always strictly greater than?</para>
					<para>Signature: <varname>{base, numrange, ttype} &gt;&gt; {base, numrange, ttype}: boolean</varname></para>
					<programlisting>
SELECT tint '[4@2012-01-01, 4@2012-01-04)' &gt;&gt; intrange '[1,4)';
-- true
SELECT tint '[4@2012-01-01, 4@2012-01-04)' &gt;&gt; tfloat '[4@2012-01-01, 5@2012-01-04)';
-- false
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&amp;&lt;</varname>: Is the bounding box never greater than?</para>
					<para>Signature: <varname>{base, numrange, ttype} &amp;&lt; {base, numrange, ttype}: boolean</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &amp;&lt; tfloat '{2@2012-01-03, 3@2012-01-05}';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&amp;&gt;</varname>: Is the bounding box never less than?</para>
					<para>Signature: <varname>{base, numrange, ttype} &amp;&gt; {base, numrange, ttype}: boolean</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &amp;&gt;
tfloat '{[2@2012-01-02, 3@2012-01-04), [3@2012-01-04, 2@2012-01-06)}';
-- false
					</programlisting>
				</listitem>
			</itemizedlist>
			<para>The operators for the value dimension of the temporal point types are given next.</para>

			<itemizedlist>
				<listitem>
					<para><varname>&lt;&lt;</varname>: Is the bouding box strictly to the left of?</para>
					<para>Signature: <varname>{geo, tgeompoint} &lt;&lt; {geo, tgeompoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(0 0)@2001-01-01' &lt;&lt;
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&gt;&gt;</varname>: Is the bouding box strictly to the right of?</para>
					<para>Signature: <varname>{geo, tgeompoint} &gt;&gt; {geo, tgeompoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(0 0)@2001-01-01' &gt;&gt;
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- false
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&amp;&lt;</varname>: The bouding box does not extend to the right of?</para>
					<para>Signature: <varname>{geo, tgeompoint} &amp;&lt; {geo, tgeompoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(0 0)@2001-01-01' &amp;&lt;
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&amp;&gt;</varname>: The bouding box does not extend to the left of?</para>
					<para>Signature: <varname>{geo, tgeompoint} &amp;&gt; {geo, tgeompoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(0 0)@2001-01-01' &amp;&gt;
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- false
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&lt;&lt;|</varname>: Is the bouding box strictly below?</para>
					<para>Signature: <varname>{geo, tgeompoint} &lt;&lt;| {geo, tgeompoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(0 0)@2001-01-01' &lt;&lt;|
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>|&gt;&gt;</varname>: Is the bouding box strictly above?</para>
					<para>Signature: <varname>{geo, tgeompoint} |&gt;&gt; {geo, tgeompoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(0 0)@2001-01-01' |&gt;&gt;
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- false
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&amp;&lt;|</varname>: The bouding box does not extend above?</para>
					<para>Signature: <varname>{geo, tgeompoint} &amp;&lt;| {geo, tgeompoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(0 0)@2001-01-01' &amp;&lt;|
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>|&amp;&gt;</varname>: The bouding box does not extend below?</para>
					<para>Signature: <varname>{geo, tgeompoint} |&amp;&gt; {geo, tgeompoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(0 0)@2001-01-01' |&amp;&gt;
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- false
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&lt;&lt;/</varname>: Is the bouding box strictly in front?</para>
					<para>Signature: <varname>{geo, tgeompoint} &lt;&lt;/ {geo, tgeompoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(0 0 0)@2001-01-01' &lt;&lt;/
tgeompoint '[Point(1 1 1)@2001-01-01, Point(1 2 2)@2001-01-02)';
-- true
SELECT tgeompoint 'Point(0 0)@2001-01-01' &lt;&lt;/
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- NULL
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>/&gt;&gt;</varname>: Is the bouding box strictly back?</para>
					<para>Signature: <varname>{geo, tgeompoint} /&gt;&gt; {geo, tgeompoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(0 0 0)@2001-01-01' /&gt;&gt;
tgeompoint '[Point(1 1 1)@2001-01-01, Point(1 2 2)@2001-01-02)';
-- false
SELECT tgeompoint 'Point(0 0)@2001-01-01' /&gt;&gt;
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- NULL
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&amp;&lt;/</varname>: The bouding box does not extend in front?</para>
					<para>Signature: <varname>{geo, tgeompoint} &amp;&lt;/ {geo, tgeompoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(0 0 0)@2001-01-01' &amp;&lt;/
tgeompoint '[Point(1 1 1)@2001-01-01, Point(1 2 2)@2001-01-02)';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>/&amp;&gt;</varname>: The bouding box does not extend back?</para>
					<para>Signature: <varname>{geo, tgeompoint} /&amp;&gt; {geo, tgeompoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(0 0 0)@2001-01-01' /&amp;&gt;
tgeompoint '[Point(1 1 1)@2001-01-01, Point(1 2 2)@2001-01-02)';
-- false
					</programlisting>
				</listitem>
			</itemizedlist>

			<para>The operators for the temporal dimension of all the temporal types are as follows.</para>
			<itemizedlist>
				<listitem>
					<para><varname>&lt;&lt;#</varname>: Is the bounding box always before?</para>
					<para>Signature: <varname>{time, ttype} &lt;&lt;# {time, ttype}: boolean</varname></para>
					<programlisting>
SELECT tbool '[t@2012-01-01, t@2012-01-04)' &lt;&lt;# timestamptz '2012-01-03';
-- false
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &lt;&lt;# tint '[2@2012-01-03, 2@2012-01-05)';
-- false
SELECT tgeompoint 'Point(0 0)@2001-01-01' &lt;&lt;#
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- false
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>#&gt;&gt;</varname>: Is the bounding box always after?</para>
					<para>Signature: <varname>{time, ttype} #&gt;&gt; {time, ttype}: boolean</varname></para>
					<programlisting>
SELECT tbool '[t@2012-01-03, t@2012-01-04)' #&gt;&gt; period '[2012-01-01, 2012-01-02)';
-- true
SELECT tint '[1@2012-01-01, 1@2012-01-04)' #&gt;&gt; tfloat '[2@2012-01-03, 2@2012-01-05)';
-- false
SELECT tgeompoint 'Point(0 0)@2001-01-01' #&gt;&gt;
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- false
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&amp;&lt;#</varname>: Is the bounding box never after?</para>
					<para>Signature: <varname>{time, ttype} &amp;&lt;# {time, ttype}: boolean</varname></para>
					<programlisting>
SELECT tbool '[t@2012-01-01, t@2012-01-04)' &amp;&lt;# tbool '[f@2012-01-03, f@2012-01-05)';
-- true
SELECT tfloat '[1@2012-01-01, 1@2012-01-04)' &amp;&lt;# tfloat '[2@2012-01-03, 2@2012-01-05)';
-- true
SELECT tgeompoint 'Point(0 0)@2001-01-01' &amp;&lt;#
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>#&amp;&gt;</varname>: Is the bounding box never before?</para>
					<para>Signature: <varname>{time, ttype} #&amp;&gt; {time, ttype}: boolean</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' #&amp;&gt; tfloat '{2@2012-01-03, 3@2012-01-05}';
-- false
SELECT tgeompoint 'Point(0 0)@2001-01-01' #&amp;&gt;
tgeompoint '[Point(1 1)@2001-01-01, Point(1 2)@2001-01-02)';
-- true
					</programlisting>
				</listitem>
			</itemizedlist>

			<para>Another set of operators consider the topological relationships between the bounding boxes. There are four topological operators: overlaps (<varname>&amp;&amp;</varname>), contains (<varname>@&gt;</varname>), contained (<varname>&lt;@</varname>), and same (<varname>~=</varname>). The arguments of these operators can be a base type, a box, or a temporal type and the operators verify the topological relationship taking into account the value and/or the time dimension depending on the type of the arguments.</para>

			<para>The topological operators for temporal alphanumeric types are given next.</para>

			<itemizedlist>
				<listitem>
					<para><varname>&amp;&amp;</varname>: Does the bounding boxes overlap?</para>
					<para>Signature: <varname>{base, numrange, time, box, ttype} &amp;&amp;</varname></para>
					<para><varname>    {base, numrange, time, box, ttype}: boolean</varname></para>
					<programlisting>
SELECT tfloat '[1@2012-01-01, 3@2012-01-04)' &amp;&amp; 3;
-- true
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &amp;&amp; floatrange '[1,4)';
-- true
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &amp;&amp; tint '[2@2012-01-03, 2@2012-01-05)';
-- false
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>@&gt;</varname>: Does the first bounding box contains the second one?</para>
					<para>Signature: <varname>{base, numrange, time, box, ttype} @&gt;</varname></para>
					<para><varname>    {base, numrange, time, box, ttype}: boolean</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' @&gt; timestamptz '2012-01-03';
-- true
SELECT tint '[1@2012-01-01, 1@2012-01-04)' @&gt; period '[2012-01-03, 2012-01-05)';
-- false
SELECT ttext '[A@2012-01-01, B@2012-01-06]' @&gt; ttext '[C@2012-01-03, D@2012-01-05]';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&lt;@</varname>: Is the first bounding box contained in the second one?</para>
					<para>Signature: <varname>{base, numrange, time, box, ttype} &lt;@</varname></para>
					<para><varname>    {base, numrange, time, box, ttype}: boolean</varname></para>
					<programlisting>
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &lt;@
box(floatrange '[1,4)', period '[2012-01-01, 2012-01-05)');
-- true
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &lt;@ tint '[2@2012-01-03, 2@2012-01-05)';
-- false
SELECT tint '[1@2012-01-01, 1@2012-01-04)' &lt;@ tfloat '{2@2012-01-03, 3@2012-01-05}';
-- false
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>~=</varname>: Are the bounding boxes equal?</para>
					<para>Signature: <varname>{base, numrange, time, box, ttype} ~=</varname></para>
					<para><varname>    {base, numrange, time, box, ttype}: boolean</varname></para>
					<programlisting>
SELECT tfloat '[1@2012-01-01, 4@2012-01-04)' ~=  tint '{4@2012-01-01, 3@2012-01-03, 1@2012-01-04}';
-- true
					</programlisting>
				</listitem>
			</itemizedlist>

			<para>The topological operators for temporal point types are given next.</para>

			<itemizedlist>
				<listitem>
					<para><varname>&amp;&amp;</varname>: Does the bounding boxes overlap?</para>
					<para>Signature: <varname>{geo, time, gbox, tpoint} &amp;&amp; {geo, time, gbox, tpoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint '[Point(1 1)@2012-01-01, Point(2 2)@2012-01-04)' &amp;&amp;
tgeompoint '[Point(0 1)@2012-01-03, Point(2 0)@2012-01-05)';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>@&gt;</varname>: Does the first bounding box contains the second one?</para>
					<para>Signature: <varname>{geo, time, gbox, tpoint} @&gt; {geo, time, gbox, tpoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint '[Point(0 0)@2012-01-01, Point(2 2)@2012-01-04)' &amp;&amp;
tgeompoint '[Point(1 1)@2012-01-03, Point(2 0)@2012-01-05)';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&lt;@</varname>: Is the first bounding box contained in the second one?</para>
					<para>Signature: <varname>{geo, time, gbox, tpoint} &lt;@ {geo, time, gbox, tpoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint 'Point(1 1)@2012-01-01' &lt;@
tgeompoint '[Point(0 0)@2012-01-01, Point(2 2)@2012-01-04)';
-- true
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>~=</varname>: Are the bounding boxes equal?</para>
					<para>Signature: <varname>{geo, time, gbox, tpoint} ~= {geo, time, gbox, tpoint}: boolean</varname></para>
					<programlisting>
SELECT tgeompoint '[Point(0 0)@2012-01-01, Point(2 2)@2012-01-04)' ~=
tgeompoint '[Point(0 2)@2012-01-01, Point(2 0)@2012-01-04)';
-- true
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>

		<sect1>
			<title>Distance Operators</title>
			<para>There are two distance operators. The first one computes the distance between either a temporal point and a geometry or between two temporal points at their nearest point of approach, which is a float. This is the same as the function <varname>nearestApproachDistance</varname> discussed before but as an operator it can be used for doing nearest neightbor searches using a GiST index (see <xref linkend="indexing_temporal_types" />).</para>

			<para>On the other hand, the temporal distance operator computes the distance at each instant of the intersection of the temporal extents of their arguments and results in a temporal float. Computing temporal distance is useful in many mobility applications. For example, a moving cluster (also known as convoy or flock) is defined as a set of objects that move close to each other for a long time interval. This requires to compute temporal distance between two moving objects.</para>
		
			<para>The temporal distance operator accepts a geometry/geography restricted to a point or a temporal point as arguments. Notice that the temporal types only consider linear interpolation between values, while the distance is a root of a quadratic function. Therefore, the temporal distance operator gives a linear approximation of the actual distance value for temporal sequence points. In this case, the arguments are synchronized in the temporal dimension, and for each of the composing line segments of the arguments, the spatial distance between the start point, the end point, and the nearest point of approach is computed, as shown in the examples below.</para>

			<itemizedlist>
				<listitem>
					<para><varname>|=|</varname>: Smallest distance ever between the two arguments</para>
					<para>Signature: <varname>{geometry, tgeompoint} |=| {geometry, tgeompoint}: float</varname></para>
					<programlisting>
SELECT tgeompoint '[Point(0 0)@2012-01-02, Point(1 1)@2012-01-04, Point(0 0)@2012-01-06)' |=|
geometry 'Linestring(2 2,2 1,3 1)';
-- "1"
SELECT tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-03, Point(0 0)@2012-01-05)' |=|
tgeompoint '[Point(2 0)@2012-01-02, Point(1 1)@2012-01-04, Point(2 2)@2012-01-06)';
-- "0.5"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>&lt;-&gt;</varname>: Distance &Z_support; &geography_support;</para>
					<para>Signature: <varname>{point, tpoint} &lt;-&gt; {point, tpoint}: tfloat</varname></para>
					<programlisting>
SELECT tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-03)' &lt;-&gt; geometry 'Point(0 1)';
-- "[1@2012-01-01, 0.707106781186548@2012-01-02, 1@2012-01-03)"
SELECT tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-03)' &lt;-&gt;
tgeompoint '[Point(0 1)@2012-01-01, Point(1 0)@2012-01-03)';
-- "[1@2012-01-01, 0@2012-01-02, 1@2012-01-03)"
SELECT tgeompoint '[Point(0 1)@2012-01-01, Point(0 0)@2012-01-03)' &lt;-&gt;
tgeompoint '[Point(0 0)@2012-01-01, Point(1 0)@2012-01-03)';
-- "[1@2012-01-01, 0.707106781186548@2012-01-02, 1@2012-01-03)"
SELECT tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-02)' &lt;-&gt;
tgeompoint '[Point(0 1)@2012-01-01, Point(1 2)@2012-01-02)';
-- "[1@2012-01-01,1@2012-01-02)"
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>

		<sect1 id="spatial_relationships_temporal_points">
			<title>Spatial Relationships for Temporal Points</title>

			<para>There are two versions of the spatial relationship functions such as <varname>ST_Intersects</varname> and <varname>ST_Relate</varname> generalized to the temporal point types.</para>

			<itemizedlist>
				<listitem>
					<para>The first version applies the traditional spatial function to the union of all values taken by the temporal point (which is a <varname>geometry</varname> or <varname>geography</varname>) and returns a <varname>boolean</varname> or a <varname>text</varname>. Examples are the <varname>intersects</varname> and <varname>relate</varname> functions.</para>
				</listitem>

				<listitem>
					<para>The second version is defined with the temporal semantics, that is, the traditional spatial function is computed at each instant and results in a <varname>tbool</varname> or a <varname>ttext</varname>. Examples are the <varname>tintersects</varname> and <varname>trelate</varname> functions.</para>
				</listitem>
			</itemizedlist>
			<para>Notice that semantics conveyed by the first version of the relationships varies depending on the relationship and the type of the arguments. For example, the following query
				<programlisting>
SELECT intersects(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))',
tgeompoint '[Point(0 1)@2012-01-01, Point(1 1)@2012-01-03)');
				</programlisting>
			tests whether the temporal point ever intersected the geometry, since the query is conceptually equivalent to the following one.
				<programlisting>
SELECT ST_Intersects(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))', geometry 'Linestring(0 1,1 1)');
				</programlisting>
			where the second geometry is obtained by applying the <varname>trajectory</varname> function to the temporal point. On the other hand, the query
				<programlisting>
SELECT contains(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))',
tgeompoint '[Point(0 1)@2012-01-01, Point(1 1)@2012-01-03)');
				</programlisting>
				tests whether the geometry always contains the temporal point. Finally, the following query
				<programlisting>
SELECT intersects(tgeompoint '[Point(0 1)@2012-01-01, Point(1 0)@2012-01-03)',
tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-03)');
				</programlisting>
				tests whether the temporal points may intersect, since the query above is conceptually equivalent to the following one 
				<programlisting>
SELECT ST_Intersects('Linestring(0 1,1 0)', 'Linestring(0 0,1 1)');
				</programlisting>
			</para>
						
			<para>The first versions of the relationships are typically used in combination with a spatio-temporal index when computing the temporal relationships. For example, the following query
				<programlisting>
SELECT T.TripId, R.RegionId, tintersects(T.Trip, R.Geom)
FROM Trips T, Regions R
WHERE intersects(T.Trip, R.Geom)
				</programlisting>
			which verifies whether a trip <varname>T</varname> (which is a temporal point) intersects a region <varname>R</varname> (which is a geometry), will benefit rom a spatio-temporal index on the column <varname>T.Trip</varname> since the <varname>intersects</varname> function will automatically perform the bounding box comparison <varname>T.Trip &amp;&amp; R.Geom</varname>. This is further explained later in this document.
			</para>
			
			<para>Three spatial relationships available in PostGIS are not provided in the temporal version.
				<itemizedlist>
					<listitem>
						<para><varname>tcontainsproperly</varname> since it would always be equal to <varname>tcontains</varname>: <varname>ST_Contains</varname> returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A. <varname>ST_ContainsProperly</varname> returns true if B intersects the interior of A but not the boundary (or exterior).</para>
					</listitem>

					<listitem>
						<para><varname>tcrosses</varname> since it would always returns false: <varname>ST_Crosses</varname> returns true if the supplied geometries have some, but not all, interior points in common.</para>
					</listitem>

					<listitem>
						<para><varname>toverlaps</varname> since it would always returns false: <varname>ST_Overlaps</varname> returns true if the geometries share space, are of the same dimension, but are not completely contained by each other.</para>
					</listitem>
				</itemizedlist>
				</para>
			
			<para>All spatial relationships in the two versions are defined for temporal geometry points, while only four of them are defined for temporal geography points, namely, <varname>covers</varname>, <varname>coveredby</varname>, <varname>intersects</varname>, and <varname>dwithin</varname>, and the corresponding temporal versions. The arguments of these functions are either a temporal point or a base type (that is, a geometry or a geography), but these functions do not allow a base type in both arguments. Furthermore, both arguments must be of the same base type, that is, these functions do not allow to have a temporal geometry point (or a geometry) and a temporal geography point (or a geography) as arguments.</para>
		
			<para>The <varname>relate</varname> and the <varname>trelate</varname> functions have two forms with either two or three arguments. The two-argument forms consider the spatial relationship between the interior, the boundary, and the exterior of the arguments and return a <varname>text</varname> or a <varname>ttext</varname> value representing the maximum intersection matrix pattern. This pattern is defined using the Dimensionally Extended 9 Intersection Model or DE-9IM (see the PostGIS documentation for more details). The three-argument forms determine whether the first two arguments satisfy the intersection matrix pattern given as third argument (a <varname>text</varname> value) and return a Boolean or a temporal Boolean.</para>

			<sect2>
				<title>Possible Spatial Relationships</title>
				<itemizedlist>
					<listitem>
						<para><varname>contains</varname>: May contain</para>
						<para>Signature: <varname>contains({geo, tgeompoint}, {geo, tgeompoint}): boolean</varname></para>
						<programlisting>
	SELECT contains(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-03)');
	-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>containsproperly</varname>: May contain properly</para>
						<para>Signature: <varname>containsproperly({geo, tgeompoint}, {geo, tgeompoint}): boolean</varname></para>
						<programlisting>
	SELECT containsproperly(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-03)');
	-- false
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>covers</varname>: May cover</para>
						<para>Signature: <varname>covers({geo, tpoint}, {geo, tpoint}): boolean</varname></para>
						<programlisting>
	SELECT covers(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-03)');
	-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>coveredby</varname>: May be covered by</para>
						<para>Signature: <varname>coveredby({geo, tpoint}, {geo, tpoint}): boolean</varname></para>
						<programlisting>
	SELECT coveredby(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-03)');
	-- false
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>crosses</varname>: May cross</para>
						<para>Signature: <varname>crosses({geo, tgeompoint}, {geo, tgeompoint}): boolean</varname></para>
						<programlisting>
	SELECT crosses(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(2 2)@2012-01-03)');
	-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>disjoint</varname>: May be disjoint</para>
						<para>Signature: <varname>disjoint({geo, tgeompoint}, {geo, tgeompoint}): boolean</varname></para>
						<programlisting>
	SELECT disjoint(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-03)');
	-- false
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>equals</varname>: May be equal</para>
						<para>Signature: <varname>equals({geo, tgeompoint}, {geo, tgeompoint}): boolean</varname></para>
						<programlisting>
	SELECT equals(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-03)');
	-- false
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>intersects</varname>: May intersect &Z_support;</para>
					<para>Signature: <varname>intersects({geo, tpoint}, {geo, tpoint}): boolean</varname></para>
						<programlisting>
	SELECT intersects(geometry 'Polygon((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))',
		tgeompoint '[Point(0 0 1)@2012-01-01, Point(1 1 1)@2012-01-03)');
	-- false
	SELECT intersects(geometry 'Polygon((0 0 0,0 1 1,1 1 1,1 0 0,0 0 0))',
		tgeompoint '[Point(0 0 1)@2012-01-01, Point(1 1 1)@2012-01-03)');
	-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>overlaps</varname>: May overlap</para>
						<para>Signature: <varname>overlaps({geo, tgeompoint}, {geo, tgeompoint}): boolean</varname></para>
						<programlisting>
	SELECT overlaps(geometry 'Linestring(1 1,3 3)',
		tgeompoint '[Point(0 0)@2012-01-01, Point(2 2)@2012-01-03)');
	-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>touches</varname>: May touch</para>
						<para>Signature: <varname>touches({geo, tgeompoint}, {geo, tgeompoint}): boolean</varname></para>
						<programlisting>
	SELECT touches(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(0 1)@2012-01-03)');
	-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>within</varname>: May be within</para>
						<para>Signature: <varname>within({geo, tgeompoint}, {geo, tgeompoint}): boolean</varname></para>
						<programlisting>
	SELECT within(geometry 'LineString(1 1,2 2)',
	tgeompoint '[Point(0 0)@2012-01-01, Point(3 3)@2012-01-03)');
	-- true
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>dwithin</varname>: May be at distance within &Z_support;</para>
					<para>Signature: <varname>dwithin({geo, tpoint}, {geo, tpoint}, double): boolean</varname></para>
						<programlisting>
	SELECT dwithin(geometry 'Polygon((0 0 0,0 1 1,1 1 1,1 0 0,0 0 0))',
	tgeompoint 'Point(0 2 1)@2000-01-01,Point(2 2 1)@2000-01-02', 1)
	-- true
	SELECT dwithin(geometry 'Polygon((0 0 0,0 1 1,1 1 1,1 0 0,0 0 0))',
	tgeompoint 'Point(0 2 2)@2000-01-01,Point(2 2 2)@2000-01-02', 1)
	--false
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>relate</varname>: May relate</para>
						<para>Signature: <varname>relate({geo, tgeompoint}, {geo, tgeompoint}): text</varname></para>
						<programlisting>
	SELECT relate(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-03)');
	-- "1F2F01FF2"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>relate</varname>: May relate</para>
						<para>Signature: <varname>relate({geo, tgeompoint}, {geo, tgeompoint}, text): boolean</varname></para>
						<programlisting>
	SELECT relate(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(1 1)@2012-01-03)','1F2F01FF2');
	-- true
						</programlisting>
					</listitem>
				</itemizedlist>
			</sect2>       

			<sect2>
				<title>Temporal Spatial Relationships</title>
				<itemizedlist>
					<listitem>
						<para><varname>tcontains</varname>: Temporal contains</para>
						<para>Signature: <varname>tcontains({geo, tgeompoint}, {geo, tgeompoint}): tbool</varname></para>
						<programlisting>
	SELECT tcontains(geometry 'Polygon((1 1,1 2,2 2,2 1,1 1))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(3 3)@2012-01-04)');
	-- "{[f@2012-01-01,f@2012-01-02], (t@2012-01-02,t@2012-01-03), [f@2012-01-03,f@2012-01-04)}"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>tcovers</varname>: Temporal covers</para>
						<para>Signature: <varname>tcovers({geo, tpoint}, {geo, tpoint}): tbool</varname></para>
						<programlisting>
	SELECT tcovers(geometry 'Polygon((1 1,1 2,2 2,2 1,1 1))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(3 3)@2012-01-04)');
	-- "{[f@2012-01-01, t@2012-01-02, t@2012-01-03], (f@2012-01-03, f@2012-01-04]}"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>tcoveredby</varname>: Temporal covered by</para>
						<para>Signature: <varname>tcoveredby({geo, tpoint}, {geo, tpoint}): tbool</varname></para>
						<programlisting>
	SELECT tcoveredby(tgeompoint '[Point(1 1)@2012-01-02, Point(3 3)@2012-01-04)',
	tgeompoint '[Point(0 0)@2012-01-01, Point(2 2)@2012-01-03)');
	-- "{[t@2012-01-02, t@2012-01-03)}"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>tdisjoint</varname>: Temporal disjoint</para>
						<para>Signature: <varname>tdisjoint({geo, tgeompoint}, {geo, tgeompoint}): tbool</varname></para>
						<programlisting>
	SELECT tdisjoint(geometry 'Polygon((1 1,1 2,2 2,2 1,1 1))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(3 3)@2012-01-04)');
	-- "{[t@2012-01-01, f@2012-01-02, f@2012-01-03], (t@2012-01-03, t@2012-01-04]}"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>tequals</varname>: Temporal equals</para>
						<para>Signature: <varname>tequals({geo, tgeompoint}, {geo, tgeompoint}): tbool</varname></para>
						<programlisting>
	SELECT tequals(geometry 'Point(1 1)',
	tgeompoint '[Point(0 0)@2012-01-01, Point(3 3)@2012-01-04)');
	-- "{[f@2012-01-01, t@2012-01-02], (f@2012-01-02, f@2012-01-04]}"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>tintersects</varname>: Temporal intersects &Z_support;</para>
					<para>Signature: <varname>tintersects({geo, tpoint}, {geo, tpoint}): tbool</varname></para>
						<programlisting>
	SELECT tintersects(geometry 'MultiPoint(1 1,2 2)',
	tgeompoint '[Point(0 0)@2012-01-01, Point(3 3)@2012-01-04)');
	-- "{[f@2012-01-01, t@2012-01-02], (f@2012-01-02, t@2012-01-03],
	--  (f@2012-01-03, f@2012-01-04]}"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>ttouches</varname>: Temporal touches</para>
						<para>Signature: <varname>ttouches({geo, tgeompoint}, {geo, tgeompoint}): tbool</varname></para>
						<programlisting>
	SELECT ttouches(geometry 'Polygon((1 0,1 2,2 2,2 0,1 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(3 0)@2012-01-04)');
	-- "{[f@2012-01-01, t@2012-01-02, t@2012-01-03], (f@2012-01-03, f@2012-01-04]}"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>twithin</varname>: Temporal within</para>
						<para>Signature: <varname>twithin({geo, tgeompoint}, {geo, tgeompoint}): tbool</varname></para>
						<programlisting>
	SELECT twithin(geometry 'Point(1 1)',
	tgeompoint '[Point(0 0)@2012-01-01, Point(2 2)@2012-01-03)');
	-- "{[f@2012-01-01, t@2012-01-02], (f@2012-01-02, f@2012-01-03]}"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>tdwithin</varname>: Temporal distance within</para>
						<para>Signature: <varname>tdwithin({geo, tpoint}, {geo, tpoint}, double): tbool</varname></para>
						<programlisting>
	SELECT tdwithin(geometry 'Polygon((1 1,1 2,2 2,2 1,1 1))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(3 0)@2012-01-04)', 1);
	-- "{[f@2012-01-01, t@2012-01-02, t@2012-01-03], (f@2012-01-03, f@2012-01-04)}"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>trelate</varname>: Temporal relate</para>
						<para>Signature: <varname>trelate({geo, tgeompoint}, {geo, tgeompoint}): ttext</varname></para>
						<programlisting>
	SELECT trelate(geometry 'Polygon((1 0,1 2,2 2,2 0,1 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(3 0)@2012-01-04)');
	-- "{[FF2FF10F2@2012-01-01, FF20F1FF2@2012-01-02, FF20F1FF2@2012-01-03],
	--  (FF2FF10F2@2012-01-03, FF2FF10F2@2012-01-04]}"
						</programlisting>
					</listitem>

					<listitem>
						<para><varname>trelate</varname>: Temporal relate</para>
						<para>Signature: <varname>trelate({geo, tgeompoint}, {geo, tgeompoint}, text): tbool</varname></para>
						<programlisting>
	SELECT trelate(geometry 'Polygon((1 0,1 2,2 2,2 0,1 0))',
	tgeompoint '[Point(0 0)@2012-01-01, Point(3 0)@2012-01-04)', 'FF20F1FF2');
	-- "{[f@2012-01-01, t@2012-01-02, t@2012-01-03], (f@2012-01-03, f@2012-01-04]}"
	2012-01-04)}"
						</programlisting>
					</listitem>
				</itemizedlist>
				</sect2>
		</sect1>

		<sect1>
			<title>Aggregate Functions for Temporal Types</title>
			<para>The temporal aggregate functions generalize the traditional aggregate functions. Their semantics is that they compute the value of the function at every instant t in the union of the temporal extents of the values to aggregate.</para>

			<para>For all temporal types, the function <varname>tcount</varname> generalize the traditional function <varname>count</varname>. The temporal count can be used to compute at each point in time the number of available or reporting objects (for example, number of cars in an area). For Boolean types, the functions <varname>tand</varname> and <varname>tor</varname> generalize the traditional functions <varname>and</varname> and <varname>or</varname>. For numeric types, two types of temporal aggregate functions are available. The functions <varname>tmin</varname>, <varname>tmax</varname>, <varname>tsum</varname>, and <varname>tavg</varname> generalize the traditional functions <varname>min</varname>, <varname>max</varname>, <varname>sum</varname>, and <varname>avg</varname>. Furthermore, the functions <varname>wmin</varname>, <varname>wmax</varname>, <varname>wcount</varname>, <varname>wsum</varname>, and <varname>wavg</varname> are window (or cumulative) versions of the traditional functions that, given a time interval w, compute the value of the function at an instant t by considering the values during the interval [t-w, t]. All window aggregate functions are available for temporal integers, while for temporal floats only window minimum and maximum are meaningful. For temporal text, the functions Finally, for temporal points the function <varname>tcentroid</varname>, generalizes the corresponding function <varname>ST_Centroid</varname> provided by PostGIS. For example, given set of objects that move together (that is, a convoy or a flock) the temporal centroid will produce a temporal point that represents at each instant the geometric center (or the center of mass) of all the moving objects.</para>
		
			<para>In the examples that follow, we suppose the tables <varname>Department</varname> and <varname>Trip</varname> contain the two tuples introduced in <xref linkend="examples_temporal_types" />.</para>
			<itemizedlist>
				<listitem>
					<para><varname>tcount</varname>: Temporal count</para>
					<para>Signature: <varname>tcount(ttype): {tinti, tints}</varname></para>
					<programlisting>
SELECT tcount(NoEmps) FROM Department;
-- "{[1@2012-01-01, 2@2012-02-01, 1@2012-08-01, 1@2012-10-01)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>tand</varname>: Temporal and</para>
					<para>Signature: <varname>tand(tbool): tbool</varname></para>
					<programlisting>
SELECT tand(NoEmps #&gt; 6) FROM Department;
-- "{[t@2012-01-01, f@2012-04-01, f@2012-10-01)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>tor</varname>: Temporal or</para>
					<para>Signature: <varname>tor(tbool): tbool</varname></para>
					<programlisting>
SELECT tor(NoEmps #&gt; 6) FROM Department;
-- "{[t@2012-01-01, f@2012-08-01, f@2012-10-01)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>tmin</varname>: Temporal minimum</para>
					<para>Signature: <varname>tmin(ttype): {ttypei, ttypes}</varname></para>
					<programlisting>
SELECT tmin(NoEmps) FROM Department;
-- "{[10@2012-01-01, 4@2012-02-01, 6@2012-06-01, 6@2012-10-01)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>tmax</varname>: Temporal maximum</para>
					<para>Signature: <varname>tmax(ttype): {ttypei, ttypes}</varname></para>
					<programlisting>
SELECT tmax(NoEmps) FROM Department;
-- "{[10@2012-01-01, 12@2012-04-01, 6@2012-08-01, 6@2012-10-01)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>tsum</varname>: Temporal sum</para>
					<para>Signature: <varname>tsum(tnumber): {tnumi, tnums}</varname></para>
					<programlisting>
SELECT tsum(NoEmps) FROM Department;
-- "{[10@2012-01-01, 14@2012-02-01, 16@2012-04-01, 18@2012-06-01, 6@2012-08-01, 6@2012-10-01)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>tavg</varname>: Temporal average</para>
					<para>Signature: <varname>tavg(tnumber): {tfloati, tfloats}</varname></para>
					<programlisting>
SELECT tavg(NoEmps) FROM Department;
-- "{[10@2012-01-01, 10@2012-02-01), [7@2012-02-01, 7@2012-04-01), [8@2012-04-01, 8@2012-06-01),
--  [9@2012-06-01, 9@2012-08-01), [6@2012-08-01, 6@2012-10-01)"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>wmin</varname>: Window minimum</para>
					<para>Signature: <varname>wmin(tnumber, interval): {tnumi, tnums}</varname></para>
					<programlisting>
SELECT wmin(NoEmps, interval '2 days') FROM Department;
-- "{[10@2012-01-01, 4@2012-04-01, 6@2012-06-03, 6@2012-10-03)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>wmax</varname>: Window maximum</para>
					<para>Signature: <varname>wmax(tnumber, interval): {tnumi, tnums}</varname></para>
					<programlisting>
SELECT wmax(NoEmps, interval '2 days') FROM Department;
-- "{[10@2012-01-01, 12@2012-04-01, 6@2012-08-03, 6@2012-10-03)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>wcount</varname>: Window count</para>
					<para>Signature: <varname>wcount(tnumber, interval): {tinti, tints}</varname></para>
					<programlisting>
SELECT wcount(NoEmps, interval '2 days') FROM Department;
-- "{[1@2012-01-01, 2@2012-02-01, 3@2012-04-01, 2@2012-04-03, 3@2012-06-01, 2@2012-06-03,
1@2012-08-03, 1@2012-10-03)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>wsum</varname>: Window sum</para>
					<para>Signature: <varname>wsum(tint, interval): {tinti, tints}</varname></para>
					<programlisting>
SELECT wsum(NoEmps, interval '2 days') FROM Department;
-- "{[10@2012-01-01, 14@2012-02-01, 26@2012-04-01, 16@2012-04-03, 22@2012-06-01, 18@2012-06-03,
6@2012-08-03, 6@2012-10-03)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>wavg</varname>: Window average</para>
					<para>Signature: <varname>wavg(tint, interval): {tfloati, tfloats}</varname></para>
					<programlisting>
SELECT wavg(NoEmps, interval '2 days') FROM Department;
-- "{[10@2012-01-01, 10@2012-02-01), [7@2012-02-01, 7@2012-04-01),
[8.66666666666667@2012-04-01, 8.66666666666667@2012-04-03), [8@2012-04-03, 8@2012-06-01),
[7.33333333333333@2012-06-01, 7.33333333333333@2012-06-03), [9@2012-06-03, 9@2012-08-03),
[6@2012-08-03, 6@2012-10-03)}"
					</programlisting>
				</listitem>

				<listitem>
					<para><varname>tcentroid</varname>: Temporal centroid</para>
					<para>Signature: <varname>tcentroid(tgeompoint): tgeompoint</varname></para>
					<programlisting>
SELECT tcentroid(Trip) FROM Trips;
-- "{[POINT(0 0)@2012-01-01 08:00:00+00, POINT(1 0)@2012-01-01 08:05:00+00),
[POINT(0.5 0)@2012-01-01 08:05:00+00, POINT(1.5 0.5)@2012-01-01 08:10:00+00,
POINT(2 1.5)@2012-01-01 08:15:00+00),
[POINT(2 2)@2012-01-01 08:15:00+00, POINT(3 3)@2012-01-01 08:20:00+00)}"
					</programlisting>
				</listitem>
			</itemizedlist>
		</sect1>
	</chapter>

	<chapter id="indexing_temporal_types">
		<title>Indexing of Temporal Types</title>
		<para>GiST and SP-GiST indexes can be created for table columns of temporal types. The GiST index implements an R-tree for temporal alphanumeric types and a TB-tree for temporal point types. The SP-GiST index implements a Quad-tree for temporal alphanumeric types and an Oct-tree for temporal point types. Examples of index creation are as follows:
			<programlisting>
CREATE INDEX Department_NoEmps_Gist_Idx ON Department USING Gist(NoEmps);
CREATE INDEX Trips_Trip_SPGist_Idx ON Trips USING SPGist(Trip);
			</programlisting>
		</para>

		<para>The GiST and SP-GiST indexes store the bounding box for the temporal types. As explained in <xref linkend="temporal_types" />, these are
			<itemizedlist>
				<listitem>
					<para>the period <varname>period</varname> type for the <varname>tbool</varname> and <varname>ttext</varname> types,</para>
				</listitem>

				<listitem>
					<para>the <varname>box</varname> type for the <varname>tint</varname> and <varname>tfloat</varname> types,</para>
				</listitem>

				<listitem>
					<para>the <varname>gbox</varname> type for the <varname>tgeompoint</varname> and <varname>tgeogpoint</varname> types.</para>
				 </listitem>
			 </itemizedlist>
		</para>
			
		<para>A GiST or SP-GiST index can accelerate queries involving the following operators (see <xref linkend="operators_temporal_types" /> for more information):
			<itemizedlist>
				 <listitem>
					<para><varname>&lt;&lt;</varname>, <varname>&amp;&lt;</varname>, <varname>&amp;&gt;</varname>, <varname>&gt;&gt;</varname>, which only consider the value dimension in temporal alphanumeric types,</para>
				</listitem>

				<listitem>
					<para><varname>&lt;&lt;</varname>, <varname>&amp;&lt;</varname>, <varname>&amp;&gt;</varname>, <varname>&gt;&gt;</varname>, <varname>&lt;&lt;|</varname>, <varname>&amp;&lt;|</varname>, <varname>|&amp;&gt;</varname>, <varname>|&gt;&gt;</varname>, <varname>&amp;&lt;/</varname>, <varname>&lt;&lt;/</varname>, <varname>/&gt;&gt;</varname>, and <varname>/&amp;&gt;</varname>, which only consider the spatial dimension in temporal point types,</para>
				</listitem>

				<listitem>
					<para><varname>&amp;&lt;#</varname>, <varname>&lt;&lt;#</varname>, <varname>#&gt;&gt;</varname>, <varname>#&amp;&gt;</varname>, which only consider the time dimension for all temporal types,</para>
				</listitem>

				<listitem>
					<para><varname>&amp;&amp;</varname>, <varname>@&gt;</varname>, <varname>&lt;@</varname>, and <varname>~=</varname>, which consider as many dimensions as they are shared by the indexed column and the query argument. These operators work on bounding boxes (that is, either periods or 2D/3D boxes), not the entire values.</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>In addition, a GiST index can accelerate nearest neighbor queries involving the <varname>|=|</varname> operator.</para>
			
		<para>For example, given the index defined above on the <varname>Department</varname> table and a query that involves a condition with the <varname>&amp;&amp;</varname> (overlaps) operator, if the right argument is a temporal float then both the value and the time dimensions are considered for filtering the tuples of the relation, while if the right argument is a float value, a float range, or a time type, then either the value or the time dimension will be used for filtering the tuples of the relation. Furthermore, a 2D/3D box can be constructed from a value/range and a timestamp/period, which can be used for filtering the tuples of the relation. Examples of queries using the index on the <varname>Department</varname> table defined above are given next.
			<programlisting>
SELECT * FROM Department WHERE NoEmps &amp;&amp; 5;
SELECT * FROM Department WHERE NoEmps &amp;&amp; intrange '[1,5)';
SELECT * FROM Department WHERE NoEmps &amp;&amp; timestamptz '2012-04-01';
SELECT * FROM Department WHERE NoEmps &amp;&amp; period '[2012-04-01, 2012-05-01)';
SELECT * FROM Department WHERE NoEmps &amp;&amp;
box(intrange '[1,5)', period '[2012-04-01, 2012-05-01)');
SELECT * FROM Department WHERE NoEmps &amp;&amp;
tfloat '{[1@2012-01-01, 1@2012-02-01), [5@2012-04-01, 5@2012-05-01)}';
			</programlisting>
		</para>

		<para>Similarly, examples of queries using the index on the <varname>Trips</varname> table defined above are given next.
			<programlisting>
SELECT * FROM Trips WHERE Trip &amp;&amp; geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))';
SELECT * FROM Trips WHERE Trip &amp;&amp; timestamptz '2001-01-01';
SELECT * FROM Trips WHERE Trip &amp;&amp; period '[2001-01-01, 2001-01-05)';
SELECT * FROM Trips WHERE Trip &amp;&amp;
gbox(geometry 'Polygon((0 0,0 1,1 1,1 0,0 0))', period '[2001-01-01, 2001-01-05]');
SELECT * FROM Trips WHERE Trip &amp;&amp;
tgeompoint '{[Point(0 0)@2001-01-01, Point(1 1)@2001-01-02, Point(1 1)@2001-01-05)}';
			</programlisting>
		</para>
				
		<para>Finally, B-tree indexes can be created for table columns of all temporal types. For this index type, the only useful operation is equality. There is a B-tree sort ordering defined for values of temporal types, with corresponding <varname>&lt;</varname>, <varname>&lt;=</varname>, <varname>&gt;</varname>, <varname>&gt;=</varname> and operators, but the ordering is rather arbitrary and not usually useful in the real world. B-tree support for temporal types is primarily meant to allow sorting internally in queries, rather than creation of actual indexes.</para>

		<para>In order to speed up several of the functions in <xref linkend="manipulating_temporal_types" />, a bounding box comparison that make uses of the available indexes can be added in the <varname>WHERE</varname> clause of queries. For example, this would be typically the case for the functions that project the temporal types to the value/spatial and/or time dimensions. This will filter out the tuples with an index as shown in the following query.
			<programlisting>
SELECT atPeriod(T.Trip, period(2001-01-01, 2001-01-02))
FROM Trips T
-- Bouding box index filtering
WHERE T.Trip &amp;&amp; period(2001-01-01, 2001-01-02)
			 </programlisting>
		</para>
				
		<para>In the case of temporal points, all spatial relationships with the &ldquo;ever&rdquo; semantics (see <xref linkend="spatial_relationships_temporal_points" />), excepted <varname>disjoint</varname>and <varname>relate</varname>, will automatically include a bounding box comparison that will make use of any indexes that are available on the temporal points. For this reason, the first version of the relationships is typically used for filtering the tuples with the help of an index when computing the temporal relationships as shown in the following query.
			<programlisting>
SELECT tintersects(T.Trip, R.Geom)
FROM Trips T, Regions R
-- Bouding box index filtering
WHERE intersects(T.Trip, R.Geom);
			</programlisting>
		</para>
	</chapter>
		
	<chapter id="statistics_temporal_types">
		<title>Statistics for Temporal Types</title>
		<para>The PostgreSQL planner relies on statistical information about the contents of tables in order to generate the most efficient execution plan for queries. These statistics include a list of some of the most common values in each column and a histogram showing the approximate data distribution in each column. For large tables, a random sample of the table contents is taken, rather than examining every row. This enables large tables to be analyzed in a small amount of time. The statistical information is gathered by the <varname>ANALYZE</varname> command and stored in the <varname>pg_statistic</varname> catalog table. Since different kinds of statistics may be appropriate for different kinds of data, the table only stores very general statistics (such as number of null values) in dedicated columns. Everything else is stored in five &ldquo;slots&rdquo;, which are couples of array columns that store the statistics for a column of an arbitrary type.</para>

		<para>The statistics collected for time types and temporal types are based on those collected by PostgreSQL for scalar types, array types, and range types. For scalar types, like <varname>float</varname>, the following statistics are collected:
			<orderedlist>
				<listitem>
					<para>fraction of null values,</para>
				</listitem>
				<listitem>
					<para>average width, in bytes, of non-null values,</para>
				</listitem>
				<listitem>
					<para>number of distinct non-null values,</para>
				</listitem>
				<listitem>
					<para>array of most common values and array of their frequencies,</para>
				</listitem>
				<listitem>
					<para>histogram of values, where the most common values are excluded,</para>
				</listitem>
				<listitem>
					<para>correlation between physical and logical row ordering.</para>
				</listitem>
			</orderedlist>
		</para>

		<para>For array types, like <varname>float[]</varname>, in addition to the above, the following statistics are collected:
			<orderedlist>
				<listitem>
					<para>array of most common elements and array of their frequencies,</para>
				</listitem>
				<listitem>
				<para>histogram of distinct element counts.</para>
					</listitem>
			</orderedlist>
		</para>

		<para>For range types, like <varname>tstzrange</varname>, three additional histograms are collected:
			<orderedlist>
				<listitem>
					<para>length histogram of non-empty ranges,</para>
				</listitem>
				<listitem>
					<para>histograms of lower and upper bounds.</para>
				</listitem>
			</orderedlist>
		</para>

		<para>For geometries, in addition to (1)&#x2013;(3), the following statistics are collected:
				 <orderedlist>
					<listitem>
						<para>number of dimensions of the values, N-dimensional bounding box, number of rows in the table, number of rows in the sample, number of non-null values,</para>
					</listitem>
					<listitem>
						<para>N-dimensional histogram that divides the bounding box into a number of cells and keeps the proportion of values that intersects with each cell.</para>
					</listitem>
				</orderedlist>
		</para>

		<para>The statistics collected for the new time types <varname>timestampset</varname>, <varname>period</varname>, and <varname>periodset</varname> replicate those collected by PostgreSQL for the <varname>tstzrange</varname>. This is clear for the <varname>period</varname> type, which is equivalent to <varname>tszrange</varname>, excepted that periods cannot be empty. For the <varname>timestampset</varname> and the <varname>periodset</varname> types, a value is converted into its bounding box which is a <varname>period</varname>, then the <varname>period</varname> statistics are collected.</para>

		<para>The statistics collected for temporal types depend on their duration and their base type. In addition to statistics (1)&#x2013;(3) that are collected for all temporal types, we collect statistics for the value dimension and the time dimension independently. More precisely, the following statistics are collected for the time dimension:
			<itemizedlist>
				<listitem>
					<para>For temporal instant values, the statistics (4)&#x2013;(6) are collected for the timestamps.</para>
				</listitem>

				<listitem>
					<para>For temporal instant set values, the statistics (7) and (8) are collected for the timestamps.</para>
				</listitem>

				<listitem>
					<para>For temporal sequence (set) values, the statistics (9) and (10) are collected for the (bounding box) periods.</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>The following statistics are collected for the value dimension:
			<itemizedlist>
				<listitem>
					<para>For temporal discrete types (that is, <varname>tbool</varname>, <varname>ttext</varname>, and <varname>tint</varname>):
						<itemizedlist>
							<listitem>
								<para>For the instant duration, the statistics (4)&#x2013;(6) are collected for the values.</para>
							</listitem>
		
							<listitem>
								<para>For all other durations, the statistics (7) and (8) are collected for the values.</para>
							</listitem>
						 </itemizedlist>
					</para>
				</listitem>

				<listitem>
					<para>For temporal float types (that is, <varname>tfloat</varname>):
						<itemizedlist>
							<listitem>
								<para>For instant values, the statistics (4)&#x2013;(6) are collected for the values.</para>
							 </listitem>
							<listitem>
								<para>For instant set values, the statistics (7) and (8) are collected for the values.</para>
							</listitem>
							<listitem>
								<para>For the sequence (set) values, the statistics (9) and (10) are collected for the (bounding) value ranges.</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>

				<listitem>
					<para>For temporal point types (that is, <varname>tgeompoint</varname> and <varname>tgeogpoint</varname>) the statistics (11)&#x2013;(12) are collected for the points.</para>
				</listitem>
			</itemizedlist>
		</para>
	</chapter>

	<chapter id="selectivity_operators">
		<title>Selectivity of Operators</title>
		<para>Boolean operators in PostgreSQL can be associated with two selectivity functions, which compute how likely a value of a given type will match a given criterion. These selectivity functions rely on the statistics collected. There are two types of selectivity functions. The restriction selectivity functions try to estimate the percentage of the rows in a table that satisfy a <varname>WHERE</varname>-clause condition of the form <varname>column OP constant</varname>. The join selectivity functions try to estimate the percentage of the rows in a table that satisfy a <varname>WHERE</varname>-clause condition of the form <varname>table1.column1 OP table2.column2</varname>.</para>

		<para>The temporal extension defines 23 classes of Boolean operators (such as <varname>=</varname>, <varname>&lt;</varname>, <varname>&amp;&amp;</varname>, <varname>&lt;&lt;</varname>, etc.), each of which can have as left or right arguments a built-in type (such as <varname>int</varname>, <varname>timestamptz</varname>, <varname>box</varname>, etc.) or a new type defined in the temporal extension (such as <varname>period</varname>, <varname>tintseq</varname>, etc.). As a consequence, there is a very high number of operators with different arguments to be considered for the selectivity functions. The approach taken was to group these combinations into classes corresponding to the value and temporal features. The classes correspond to the type of statistics collected as explained in the previous section.</para>    
	</chapter>

	<chapter id="representative_queries">
		<title>Representative Queries</title>
		<para>In order to show the expressiveness of the extension we give in this section a set of representative queries based on the <ulink url="http://dna.fernuni-hagen.de/secondo/BerlinMOD/BerlinMOD.html">BerlinMOD</ulink> benchmark for moving object databases. For this we use the following tables.
			<programlisting>
CREATE TABLE Cars (
		CarId integer PRIMARY KEY,
		Licence varchar(32),
		Type varchar(32),
		Model varchar(32)
);
CREATE TABLE Trips (
		CarId integer REFERENCES Cars,
		TripId integer,
		Trip tgeompoint,
		PRIMARY KEY (CarId, TripId)
);
CREATE TABLE Points (
		PointId integer PRIMARY KEY,
		Geom Geometry(Point)
);
CREATE TABLE Instants (
		InstantId integer PRIMARY KEY,
		Instant timestamptz
);
CREATE TABLE Regions (
		RegionId integer PRIMARY KEY,
		Geom Geometry(Polygon)
);
CREATE TABLE Periods (
		PeriodId integer PRIMARY KEY,
		Period period
);

CREATE UNIQUE INDEX Cars_CarId_Idx ON Cars USING btree (CarId);
CREATE INDEX Trips_CarId_Idx ON Trips USING btree (CarId);
CREATE UNIQUE INDEX Trips_CarId_TripId_Idx ON Trips USING btree (CarId, TripId);
CREATE INDEX Trips_Trip_Idx ON Trips USING gist (Trip);
CREATE INDEX Points_Geom_Idx ON Points USING gist (Geom);
CREATE INDEX Regions_Geom_Idx ON Regions USING gist (Geom);
CREATE INDEX Instants_Instant_Idx ON Instants USING btree (Instant);
CREATE INDEX Periods_Period_Idx ON Periods USING gist (Period);

CREATE VIEW Trips1 AS SELECT * FROM Trips LIMIT 100;
CREATE VIEW Points1 AS SELECT * FROM Points LIMIT 10;
CREATE VIEW Regions1 AS SELECT * FROM Regions LIMIT 10;
CREATE VIEW Instants1 AS SELECT * FROM Instants LIMIT 10;
CREATE VIEW Periods1 AS SELECT * FROM Periods LIMIT 10;
			</programlisting>
		Table <varname>Cars</varname> stores static information about the cars while the information about their trips is stored in table <varname>Trips</varname>. Tables <varname>Points</varname>, <varname>Regions</varname>, <varname>Instants</varname>, and <varname>Periods</varname> define locations and times used for expressing query conditions with respect to the trips. The tables have indexes on traditional, spatial, temporal, or spatio-temporal attributes. The five views defined select a subset of the rows from the corresponding tables.</para>

		<para>We discuss next four categories of queries: range queries, distance queries, temporal aggregate queries, and nearest-neighbor queries<footnote><para>A web interface to explore the temporal types on a database containing the BerlinMOD benchmark data generated at scale 0.005 is available at the address <ulink url="http://demo.mobilitydb.eu/">here</ulink>.</para></footnote>.</para>

		<sect1>
			<title>Range Queries</title>
			<para>The queries in this category restrict Trips with respect to a spatial, temporal, or spatio-temporal point or range. In the examples, the spatial points and ranges are given, respectively, in tables <varname>Points</varname> and <varname>Regions</varname>, while temporal points and ranges are given, respectively, in tables <varname>Instants</varname> and <varname>Periods</varname>.</para>

			<qandaset>
				<qandaentry id="qa_range_spatial">
					<question>
						<para>List the cars that have passed at a region from <varname>Regions</varname>.</para>
					</question>

					<answer>
						<programlisting>
SELECT DISTINCT R.RegionId, T.CarId
FROM Trips T, Regions R
WHERE ST_Intersects(trajectory(T.Trip), R.Geom)
ORDER BY R.RegionId, T.CarId;
						</programlisting>
						<para>This is a spatial range query. The query verifies that the trajectory of the car intersects the region. PostGIS performs an implicit bounding box comparison <varname>trajectory(T.Trip) &amp;&amp; R.Geom</varname> using the spatial index on table <varname>Regions</varname> when executing the predicate <varname>ST_Intersects</varname>.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_range_spatiotemporal">
					<question>
						<para>List the cars that were within a region from <varname>Regions</varname> during a period from <varname>Periods</varname>.</para>
					</question>

					<answer>
						<programlisting>
SELECT R.RegionId, P.PeriodId, T.CarId
FROM Trips T, Regions R, Periods P
WHERE T.Trip &amp;&amp; gbox(R.Geom, P.Period) AND _intersects(atPeriod(T.Trip, P.Period), R.Geom)
ORDER BY R.RegionId, P.PeriodId, T.CarId;
						</programlisting>
						<para>This is a spatio-temporal range query. The query performs a bounding box comparison with the <varname>&amp;&amp;</varname> operator using the spatio-temporal index on table <varname>Trips</varname>. After that, the query verifies that the location of the car during the period intersects the region. Notice that the predicate <varname>_intersects</varname> is used instead of <varname>intersects</varname> to avoid an implicit index test with the bounding box comparison <varname>atPeriod(Trip, P.Period) &amp;&amp; R.Geom</varname> is performed using the spatio-temporal index.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_range_spatiotemporal_join">
					<question>
						<para>List the pairs of cars that were both located within a region from <varname>Regions</varname> during a period from <varname>Periods</varname>.</para>
					</question>

					<answer>
						<programlisting>
SELECT DISTINCT T1.CarId AS CarId1, T2.CarId AS CarId2, R.RegionId, P.PeriodId
FROM Trips T1, Trips T2, Regions R, Periods P
WHERE T1.CarId &lt; T2.CarId AND T1.Trip &amp;&amp; gbox(R.Geom, P.Period) AND3
T2.Trip &amp;&amp; gbox(R.Geom, P.Period) AND _intersects(atPeriod(T1.Trip, P.Period), R.Geom) AND
_intersects(atPeriod(T2.Trip, P.Period), R.Geom)
ORDER BY T1.CarId, T2.CarId, R.RegionId, P.PeriodId;
						</programlisting>
						<para>This is a spatio-temporal range join query. The query selects two trips of different cars and performs bounding box comparisons of each trip with a region and a period using the spatio-temporal index of the <varname>Trips</varname> table. The query then verifies that both cars were located within the region during the period.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_range_entering">
					<question>
						<para>List the first time at which a car visited a point in <varname>Points</varname>.</para>
					</question>

					<answer>
						<programlisting>
SELECT T.CarId, P.PointId, MIN(startTimestamp(atValue(T.Trip,P.Geom))) AS Instant
FROM Trips T, Points P
WHERE ST_Contains(trajectory(T.Trip), P.Geom)
GROUP BY T.CarId, P.PointId;
						</programlisting>
						<para>The query selects a trip and a point and verifies that the car passed by the point by testing that the trajectory of the trip contains the point. Notice that PostGIS will perform the bounding box containment <varname>trajectory(T.Trip) ~ P.Geom</varname> using the spatial index on table <varname>Points</varname> before executing <varname>ST_Contains</varname>. Then, the query projects the trip to the point with the <varname>atValue</varname> function, get the first timestamp of the projected trip with the <varname>startTimestamp</varname> function, and applies the traditional <varname>MIN</varname> aggregate function for all trips of the car and the point.</para>
					</answer>
				</qandaentry>
			</qandaset>
		</sect1>

		<sect1>
			<title>Temporal Aggregate Queries</title>
			<para>There are three common types of temporal aggregate queries.
				<itemizedlist>
					<listitem>
						<para>Instant temporal aggregate queries in which, from a conceptual perspective, the traditional aggregate function is applied at each instant.</para>
					</listitem>

					<listitem>
						<para>Window temporal aggregate queries (also known as cumulative queries), which, given a time interval w, compute the value of the aggregate at a time instant t from the values during the time period [t-w, t].</para>
					</listitem>

					<listitem>
						<para>Span temporal aggregate queries, which, first, split the time line into predefined intervals independently of the target data, and then, for each of these intervals, aggregate the data that overlap the interval.</para>
					</listitem>
				</itemizedlist>
			</para>

			<qandaset>
				<qandaentry id="qa_aggregate_instant">
					<question>
						<para>Compute how many cars were active at each period in <varname>Periods</varname>.</para>
					</question>

					<answer>
						<programlisting>
SELECT P.PeriodID, COUNT(*), TCOUNT(atPeriod(T.Trip, P.Period))
FROM Trips T, Periods 
WHERE T.Trip &amp;&amp; P.Period
GROUP BY P.PeriodID
ORDER BY P.PeriodID;
						</programlisting>
						<para>This an instant temporal aggregate query. For each period, the query projects the trips to the given period and applies the temporal count to the projected trips. The condition in the <varname>WHERE</varname> clause is used for filtering the trips with the spatio-temporal index on table <varname>Trips</varname>.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_aggregate_window">
					<question>
						<para>For each region in <varname>Regions</varname>, give the window temporal count of trips with a 10-minute interval.</para>
					</question>

					<answer>
						<programlisting>
SELECT R.RegionID, WCOUNT(atGeometry(T.Trip, R.Geom), interval '10 min')
FROM Trips T, Regions R
WHERE T.Trip &amp;&amp; R.Geom
GROUP BY R.RegionID
HAVING WCOUNT(atGeometry(T.Trip, R.Geom), interval '10 min') IS NOT NULL
ORDER BY R.RegionID;
						</programlisting>
						<para>This is a window temporal aggregate query. Suppose that we are computing pollution levels by region. Since the effect of a car passing at a location lasts some time interval, this is a typical case for window aggregates. For each region, the query computes the spatial projection of the trips to the given region and apply the window temporal count to the projected trips. The condition in the <varname>WHERE</varname> clause is used for filtering the trips with the spatio-temporal index. The condition in the <varname>HAVING</varname> clause is used for removing regions that do not intersect with any trip.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_aggregate_span">
					<question>
						<para>Count the number of trips that were active during each hour in May 29, 2007.</para>
					</question>

					<answer>
						<programlisting>
WITH TimeSplit(Period) AS (
SELECT period(H, H + interval '1 hour')
FROM generate_series(timestamptz '2007-05-29 00:00:00', timestamptz '2007-05-29 23:00:00', interval '1 hour') AS H )
SELECT Period, COUNT(*)
FROM TimeSplit S, Trips T
WHERE S.Period &amp;&amp; T.Trip AND atPeriod(Trip, Period) IS NOT NULL
GROUP BY S.Period
ORDER BY S.Period;
						</programlisting>
						<para>This is a span temporal aggregate query. The query defines the intervals to consider in the <varname>TimeSplit</varname> temporary table. For each of these intervals, the main query applies the traditional count function for counting the trips that overlap the interval.</para>
					</answer>
				</qandaentry>
			</qandaset>
		</sect1>

		<sect1>
			<title>Distance queries</title>
			<para>The queries in this category deal with either the distance travelled by a single object or the distance between two objects. The complexity of the latter queries depend, on the one hand, on whether the reference objects are static or moving, and on the other, on whether the operation required is either the minimum distance ever or the temporal distance computed at each instant.</para>

			<qandaset>
				<qandaentry id="qa_distance_overall">
					<question>
						<para>List the overall traveled distances of the cars during the periods from <varname>Periods</varname>.</para>
					</question>

					<answer>
						<programlisting>
SELECT T.CarId, P.PeriodId, P.Period, SUM(length(atPeriod(T.Trip, P.Period))) AS Distance
FROM Trips T, Periods P
WHERE T.Trip &amp;&amp; P.Period
GROUP BY T.CarId, P.PeriodId, P.Period
ORDER BY T.CarId, P.PeriodId;
						</programlisting>
						<para>The query performs a bounding box comparison with the <varname>&amp;&amp;</varname> operator using the spatio-temporal index on the <varname>Trips</varname> table. It then projects the trip to the period, computes the length of the projected trip, and sum the lengths of all the trips of the same car during the period.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_distance_static">
					<question>
						<para>List the minimum distance ever between each car and each point from <varname>Points</varname>.</para>
					</question>

					<answer>
						<programlisting>
SELECT T.CarId, P.PointId, MIN(trajectory(T.Trip) &lt;-&gt; P.Geom) AS MinDistance
FROM Trips T, Points P
GROUP BY T.CarId, P.PointId
ORDER BY T.CarId, P.PointId;
						</programlisting>
						<para>The query projects the trip to the spatial dimension with the <varname>trajectory</varname> function and computes the traditional distance between the trajectory of the trip and the point. The traditional minimum function is then applied for computing the minimum distance between all trips of the car and the point.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_distance_moving">
					<question>
						<para>List the minimum temporal distance between each pair of cars.</para>
					</question>

					<answer>
						<programlisting>
SELECT T1.CarId AS Car1Id, T2.CarId AS Car2Id, MIN(T1.Trip &lt;-&gt; T2.Trip) AS MinDistance
FROM Trips T1, Trips T
WHERE T1.CarId &lt; T2.CarId AND timespan(T1.Trip) &amp;&amp; timespan(T2.Trip)
GROUP BY T1.CarId, T2.CarId
ORDER BY T1.CarId, T2.CarId;
						</programlisting>
						<para>The query selects two trips <varname>T1</varname> and <varname>T2</varname> from distinct cars that were both traveling during a common period of time, computes the temporal distance between the trips, and then computes the temporal minimum distance between all trips of the two cars. The query uses the spatio-temporal index to filter the pairs of trips that were both traveling during a common period of time.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_nearest_approach">
					<question>
						<para>List the nearest approach time, distance, and shortest line between each pair of trips.</para>
					</question>

					<answer>
						<programlisting>
SELECT T1.CarId AS Car1Id, T1.TripId AS Trip1Id, T2.CarId AS Car2Id, T2.TripId AS Trip2Id,
timespan(NearestApproachInstant(T1.Trip, T2.Trip)) AS Time,
NearestApproachDistance(T1.Trip, T2.Trip) AS Distance, ShortestLine(T1.Trip, T2.Trip) AS Line
FROM Trips1 T1, Trips1 T
WHERE T1.CarId &lt; T2.CarId AND timespan(T1.Trip) &amp;&amp; timespan(T2.Trip)
ORDER BY T1.CarId, T1.TripId, T2.CarId, T2.TripId;
						</programlisting>
						<para>This query shows similar functionality as that provided by the PostGIS functions <varname>ST_ClosestPointOfApproach</varname> and <varname>ST_DistanceCPA</varname>. The query selects two trips <varname>T1</varname> and <varname>T2</varname> from distinct cars that were both traveling during a common period of time and computes the required results.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_distance_tdwithin">
					<question>
						<para>List when and where a pairs of cars have been at 10 m or less from each other.</para>
					</question>

					<answer>
						 <programlisting>
SELECT T1.CarId AS CarId1, T2.CarId AS CarId2, atPeriodSet(T1.Trip,
timespan(atValue(tdwithin(T1.Trip, T2.Trip, 10.0), TRUE))) AS Position
FROM Trips T1, Trips T
WHERE T1.CarId &lt; T2.CarId AND T1.Trip &amp;&amp; expandSpatial(T2.Trip, 10) AND
 atPeriodSet(T1.Trip, timespan(atValue(tdwithin(T1.Trip, T2.Trip, 10.0), TRUE))) IS NOT NULL
ORDER BY T1.CarId, T2.CarId, Position;
						</programlisting>
						<para>The query performs for each pair of trips <varname>T1</varname> and <varname>T2</varname> of distinct cars a bounding box comparison with the <varname>&amp;&amp;</varname> operator using the spatio-temporal index on the <varname>Trips</varname> table, where the bounding box of <varname>T2</varname> is expanded by 10 m. Then, the <varname>timespan</varname> expression computes the periods during which the cars were within 10 m. from each other and the <varname>atPeriodSet</varname> function projects the trips to those periods. Notice that the expression <varname>tdwithin(T1.Trip, T2.Trip, 10.0)</varname> is conceptually equivalent to <varname>dwithin(T1.Trip, T2.Trip) #&lt;= 10.0</varname>. However, in this case the spatio-temporal index cannot be used for filtering values.</para>
					</answer>
				</qandaentry>
			</qandaset>            
		</sect1>

		<sect1>
			<title>Nearest-Neighbor Queries</title>
			<para>There are three common types of nearest-neighbor queries in spatial databases.
				<itemizedlist>
					<listitem>
						<para>k-nearest-neighbor (kNN) queries find the k nearest points to a given point.</para>
					</listitem>

					<listitem>
						<para>Reverse k-nearest-neighbor (RkNN) queries find the points that have a given point among their k nearest-neighbors.</para>
					</listitem>

					<listitem>
						<para>Given two sets of points P and Q, aggregate nearest-neighbor (ANN) queries find the points from P that have minimum aggregated distance to all points from Q.</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>The above types of queries are generalized to temporal points. However, the complexity of these queries depend on whether the reference object and the candidate objects are static or moving. In the examples that follow we only consider the nontemporal version of the nearest-neighbor queries, that is, the one in which the calculation is performed on the projection of temporal points on the spatial dimension. The temporal version of the nearest-neighbor queries remains to be done.</para>

			<qandaset>
				<qandaentry id="qa_knn_static">
					<question>
						<para>For each trip from <varname>Trips</varname>, list the three points from <varname>Points</varname> that have been closest to that car.</para>
					</question>

					<answer>
						<programlisting>
WITH TripsTraj AS (
SELECT *, trajectory(Trip) AS Trajectory FROM Trips )
SELECT T.CarId, P1.PointId, P1.Distance
FROM TripsTraj T CROSS JOIN LATERAL (
SELECT P.PointId, T.Trajectory &lt;-&gt; P.Geom AS Distance
FROM Points P
ORDER BY Distance LIMIT 3 ) AS P
ORDER BY T.TripId, T.CarId, P1.Distance;
						</programlisting>
						<para>This is a nearest-neighbor query with moving reference objects and static candidate objects. The query above uses PostgreSQL's lateral join, which intuitively iterates over each row in a result set and evaluates a subquery using that row as a parameter. The query starts by computing the trajectory of the trips in the temporary table <varname>TripsTraj</varname>. Then, given a trip <varname>T</varname> in the outer query, the subquery computes the traditional distance between the trajectory of <varname>T</varname> and each point <varname>P</varname>. The <varname>ORDER BY</varname> and <varname>LIMIT</varname> clauses in the inner query select the three closest points. PostGIS will use the spatial index on the <varname>Points</varname> table for selecting the three closest points.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_knn_moving">
					<question>
						<para>For each trip from <varname>Trips</varname>, list the three cars that are closest to that car</para>
					</question>

					<answer>
						<programlisting>
SELECT T1.CarId AS CarId1, C2.CarId AS CarId2, C2.Distance
FROM Trips T1 CROSS JOIN LATERAL (
SELECT T2.CarId, MinValue(T1.Trip &lt;-&gt; T2.Trip) AS Distance
FROM Trips T2
WHERE T1.CarId &lt; T2.CarId AND timespan(T1.Trip) &amp;&amp; timespan(T2.Trip)
ORDER BY Distance LIMIT 3 ) AS C
ORDER BY T1.CarId, C2.CarId;
						</programlisting>
						<para>This is a nearest-neighbor query where both the reference and the candidate objects are moving. Therefore, it is not possible to proceed as in the previous query to first project the moving points to the spatial dimension and then compute the traditional distance. Given a trip <varname>T1</varname> in the outer query, the subquery computes the temporal distance between <varname>T1</varname> and a trip <varname>T2</varname> of another car distinct from the car from <varname>T1</varname> and then computes the minimum value in the temporal distance. Finally, the <varname>ORDER BY</varname> and <varname>LIMIT</varname> clauses in the inner query select the three closest cars.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_rknn_static">
					<question>
						<para>For each trip from <varname>Trips</varname>, list the points from <varname>Points</varname> that have that car among their three nearest neighbors.</para>
					</question>

					<answer>
						<programlisting>
WITH TripsTraj AS (
SELECT *, trajectory(Trip) AS Trajectory FROM Trips ),
PointTrips AS (
SELECT P.PointId, T2.CarId, T2.TripId, T2.Distance
FROM Points P CROSS JOIN LATERAL (
	 SELECT T1.CarId, T1.TripId, P.Geom &lt;-&gt; T1.Trajectory AS Distance
	 FROM TripsTraj T
	 ORDER BY Distance LIMIT 3 ) AS T2 )
	 SELECT T.CarId, T.TripId, P.PointId, PT.Distance
	 FROM Trips T CROSS JOIN Points P JOIN PointTrips PT
	 ON T.CarId = PT.CarId AND T.TripId = PT.TripId AND P.PointId = PT.PointId
	 ORDER BY T.CarId, T.TripId, P.PointId;
						</programlisting>
						<para>This is a reverse nearest-neighbor query with moving reference objects and static candidate objects. The query starts by computing the corresponding nearest-neighbor query in the temporary table <varname>PointTrips</varname> as it is done in Query <xref linkend="qa_knn_static" />. Then, in the main query it verifies for each trip <varname>T</varname> and point <varname>P</varname> that both belong to the <varname>PointTrips</varname> table.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_rknn_moving">
					<question>
						<para>For each trip from <varname>Trips</varname>, list the cars having the car of the trip among the three nearest neighbors.</para>
					</question>

					<answer>
						<programlisting>
WITH TripDistances AS (
SELECT T1.CarId AS CarId1, T1.TripId AS TripId1, T3.CarId AS CarId2, T3.TripId AS TripId2,
	 T3.Distance
FROM Trips T1 CROSS JOIN LATERAL (
	 SELECT T2.CarId, T2.TripId, MinValue(T1.Trip &lt;-&gt; T2.Trip) AS Distance
	 FROM Trips T
	 WHERE T1.CarId &lt; T2.CarId AND timespan(T1.Trip) &amp;&amp; timespan(T2.Trip)
	 ORDER BY Distance LIMIT 3 ) AS T3 )
	 SELECT T1.CarId, T1.TripId, T2.CarId, T2.TripId, TD.Distance
	 FROM Trips T1 JOIN Trips T2 ON T1.CarId &lt; T2.CarId
	 JOIN TripDistances TD ON T1.CarId = TD.CarId1 AND T1.TripId = TD.TripId1 AND
T2.CarId = TD.CarId2 AND T2.TripId = TD.TripId
ORDER BY T1.CarId, T1.TripId, T2.CarId, T2.TripId;
						</programlisting>
						<para>This is a reverse nearest-neighbor query where both the reference and the candidate objects are moving. The query starts by computing the corresponding nearest-neighbor query in the temporary table <varname>TripDistances</varname> as it is done in Query <xref linkend="qa_knn_moving" />. Then, in the main query it verifies for each pair of trips <varname>T1</varname> and <varname>T2</varname> that both belong to the <varname>TripDistances</varname> table.</para>
					</answer>
				</qandaentry>

				<qandaentry id="qa_ann">
					<question>
						<para>For each group of ten disjoint cars, list the point(s) from <varname>Points</varname>, having the minimum aggregated distance from the given group of ten cars during the given period.</para>
					</question>

					<answer>
						<programlisting>
WITH Groups AS (
SELECT ((ROW_NUMBER() OVER (ORDER BY C.CarId))-1)/10 + 1 AS GroupId, C.CarId
FROM Cars C ),
SumDistances AS (
SELECT G.GroupId, P.PointId,
SUM(ST_distance(trajectory(T.Trip), P.Geom)) AS SumDist
FROM Groups G, Points P, Trips T
WHERE T.CarId = G.CarId
GROUP BY G.GroupId, P.PointId )
SELECT S1.GroupId, S1.PointId, S1.SumDist
FROM SumDistances S
WHERE S1.SumDist &lt;= ALL (
SELECT SumDist
FROM SumDistances S
WHERE S1.GroupId = S2.GroupId )
ORDER BY S1.GroupId, S1.PointId;
						</programlisting>
						<para>This is an aggregate nearest-neighbor query. The temporary table <varname>Groups</varname> splits the cars in groups where the <varname>GroupId</varname> column takes the values from 1 to total number of groups. The temporary table <varname>SumDistances</varname> computes for each group <varname>G</varname> and point <varname>P</varname> the sum of the distances between a trip of a car in the group and the point. The main query then selects for each group in table <varname>SumDistances</varname> the points(s) that have the minimum aggregated distance.</para>
					</answer>
				</qandaentry>

				</qandaset>
				
		</sect1>
	</chapter>

</book>
