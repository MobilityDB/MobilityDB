# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: https://bugs.kde.org\n"
"POT-Creation-Date: 2020-10-16 07:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: temporal_types.xml:3
#, no-c-format
msgid "Temporal Types"
msgstr ""

#. Tag: para
#: temporal_types.xml:4
#, no-c-format
msgid ""
"There are six built-in temporal types, <varname>tbool</varname>, "
"<varname>tint</varname>, <varname>tfloat</varname>, <varname>ttext</"
"varname>, <varname>tgeompoint</varname>, and <varname>tgeogpoint</varname>, "
"which are, respectively, based on the base types <varname>bool</varname>, "
"<varname>int</varname>, <varname>float</varname>, <varname>text</varname>, "
"<varname>geometry</varname>, and <varname>geography</varname> (the last two "
"types restricted to 2D or 3D points with Z dimension)."
msgstr ""

#. Tag: para
#: temporal_types.xml:7
#, no-c-format
msgid ""
"The <emphasis role=\"strong\">interpolation</emphasis> of a temporal value "
"states how the value evolves between successive instants. The interpolation "
"is <emphasis role=\"strong\">stepwise</emphasis> when the value remains "
"constant between two successive instants. For example, the number of "
"employees of a department may be represented with a temporal integer, which "
"indicates that its value is constant between two time instants. On the other "
"hand, the interpolation is <emphasis role=\"strong\">linear</emphasis> when "
"the value evolves linearly between two successive instants. For example, the "
"temperature of a room may be represented with a temporal float, which "
"indicates that the values are known at the two time instants but "
"continuously evolve between them. Similarly, the location of a vehicule may "
"be represented by a temporal point where the location between two "
"consecutive GPS readings is obtained by linear interpolation. Temporal types "
"based on discrete base types, that is the <varname>tbool</varname>, "
"<varname>tint</varname>, or <varname>ttext</varname> evolve necesssarily in "
"a stepwise manner. On the other hand, temporal types based on continuous "
"base types, that is <varname>tfloat</varname>, <varname>tgeompoint</"
"varname>, or <varname>tgeogpoint</varname> may evolve in a stepwise or "
"linear manner."
msgstr ""

#. Tag: para
#: temporal_types.xml:9
#, no-c-format
msgid ""
"The <emphasis role=\"strong\">duration</emphasis> of a temporal value states "
"the temporal extent at which the evolution of values is recorded. Temporal "
"values come in four durations, namely, instant, instant set, sequence, and "
"sequence set."
msgstr ""

#. Tag: para
#: temporal_types.xml:11
#, no-c-format
msgid ""
"A temporal value of <emphasis role=\"strong\">instant</emphasis> duration "
"(briefly, an instant value) represents the value at a time instant, for "
"example"
msgstr ""

#. Tag: programlisting
#: temporal_types.xml:12
#, no-c-format
msgid "SELECT tfloat '17@2018-01-01 08:00:00';"
msgstr ""

#. Tag: para
#: temporal_types.xml:15
#, no-c-format
msgid ""
"A temporal value of <emphasis role=\"strong\">instant set</emphasis> "
"duration (briefly, an instant set value) represents the evolution of the "
"value at a set of time instants, where the values between these instants are "
"unknown. An example is as follows:"
msgstr ""

#. Tag: programlisting
#: temporal_types.xml:16
#, no-c-format
msgid ""
"SELECT tfloat '{17@2018-01-01 08:00:00, 17.5@2018-01-01 08:05:00, "
"18@2018-01-01 08:10:00}';"
msgstr ""

#. Tag: para
#: temporal_types.xml:19
#, no-c-format
msgid ""
"A temporal value of <emphasis role=\"strong\">sequence</emphasis> duration "
"(briefly, a sequence value) represents the evolution of the value during a "
"sequence of time instants, where the values between these instants are "
"interpolated using either a stepwise or a linear function (see below). An "
"example is as follows:"
msgstr ""

#. Tag: programlisting
#: temporal_types.xml:20
#, no-c-format
msgid ""
"SELECT tint '(10@2018-01-01 08:00:00, 20@2018-01-01 08:05:00, 15@2018-01-01 "
"08:10:00]';"
msgstr ""

#. Tag: para
#: temporal_types.xml:23
#, no-c-format
msgid ""
"As can be seen, a value of a type with sequence duration has a lower and an "
"upper bound that can be inclusive (represented by &lsquo;<varname>[</"
"varname>&rsquo; and &lsquo;<varname>]</varname>&rsquo;) or exclusive "
"(represented by &lsquo;<varname>(</varname>' and &lsquo;<varname>)</"
"varname>'). A temporal sequence value with a single instant such as "
"<programlisting>\n"
"SELECT tint '[10@2018-01-01 08:00:00]';\n"
"                </programlisting> is called an <emphasis role=\"strong"
"\">instantaneous sequence</emphasis>. In that case, both bounds must be "
"inclusive."
msgstr ""

#. Tag: para
#: temporal_types.xml:28
#, no-c-format
msgid ""
"The value of a temporal sequence is interpreted by assuming that the period "
"of time defined by every pair of consecutive values <varname>v1@t1</varname> "
"and <varname>v2@t2</varname> is lower inclusive and upper exclusive, unless "
"they are the first or the last instants of the sequence and in that case the "
"bounds of the whole sequence apply. Furthermore, the value taken by the "
"temporal sequence between two consecutive instants depends on whether the "
"interpolation is stepwise or linear. For example, the temporal sequence "
"above represents that the value is <varname>10</varname> during "
"<varname>(2018-01-01 08:00:00, 2018-01-01 08:05:00)</varname>, <varname>20</"
"varname> during <varname>[2018-01-01 08:05:00, 2018-01-01 08:10:00)</"
"varname>, and <varname>15</varname> at the end instant <varname>2018-01-01 "
"08:10:00</varname>. On the other hand, the following temporal sequence "
"<programlisting>\n"
"SELECT tfloat '(10@2018-01-01 08:00:00, 20@2018-01-01 08:05:00, "
"15@2018-01-01 08:10:00]';\n"
"                </programlisting> represents that the value evolves linearly "
"from <varname>10</varname> to <varname>20</varname> during "
"<varname>(2018-01-01 08:00:00, 2018-01-01 08:05:00)</varname> and evolves "
"from <varname>20</varname> to <varname>15</varname> during "
"<varname>[2018-01-01 08:05:00, 2018-01-01 08:10:00]</varname>."
msgstr ""

#. Tag: para
#: temporal_types.xml:32
#, no-c-format
msgid ""
"Finally, a temporal value of <emphasis role=\"strong\">sequence set</"
"emphasis> duration (briefly, a sequence set value) represents the evolution "
"of the value at a set of sequences, where the values between these sequences "
"are unknown. An example is as follows:"
msgstr ""

#. Tag: programlisting
#: temporal_types.xml:33
#, no-c-format
msgid ""
"SELECT tfloat '{[17@2018-01-01 08:00:00, 17.5@2018-01-01 08:05:00],\n"
"[18@2018-01-01 08:10:00, 18@2018-01-01 08:15:00]}';"
msgstr ""

#. Tag: para
#: temporal_types.xml:36
#, no-c-format
msgid ""
"Temporal values with instant or sequence duration are called <emphasis role="
"\"strong\">temporal unit values</emphasis>, while temporal values with "
"instant set or sequence set duration are called <emphasis role=\"strong"
"\">temporal set values</emphasis>. Temporal set values can be thought of as "
"an array of the corresponding unit values. Temporal set values must be "
"<emphasis role=\"strong\">uniform</emphasis>, that is, they must be "
"constructed from unit values of the same base type and the same duration."
msgstr ""

#. Tag: para
#: temporal_types.xml:38
#, no-c-format
msgid ""
"Temporal sequence values are converted into a <emphasis role=\"strong"
"\">normal</emphasis> form so that equivalent values have identical "
"representations. For this, consecutive instant values are merged when "
"possible. For stepwise interpolation, three consecutive instant values can "
"be merged into two if they have the same value. For linear interpolation, "
"three consecutive instant values can be merged into two if the linear "
"functions defining the evolution of values are the same. Examples of "
"transformation into a normal form are as follows."
msgstr ""

#. Tag: programlisting
#: temporal_types.xml:39
#, no-c-format
msgid ""
"SELECT tint '[1@2001-01-01, 2@2001-01-03, 2@2001-01-04, 2@2001-01-05)';\n"
"-- \"[1@2001-01-01 00:00:00+00, 2@2001-01-03 00:00:00+00, 2@2001-01-05 "
"00:00:00+00)\"\n"
"SELECT tgeompoint '[Point(1 1)@2001-01-01 08:00:00, Point(1 1)@2001-01-01 "
"08:05:00,\n"
"Point(1 1)@2001-01-01 08:10:00)';\n"
"-- \"[Point(1 1)@2001-01-01 08:00:00, Point(1 1)@2001-01-01 08:10:00)\"\n"
"SELECT tfloats(ARRAY[tfloat '[1@2001-01-01, 2@2001-01-03, 3@2001-01-05]']);\n"
"-- \"{[1@2001-01-01 00:00:00+00, 3@2001-01-05 00:00:00+00]}\"\n"
"SELECT tgeompoint '[Point(1 1)@2001-01-01 08:00:00, Point(2 2)@2001-01-01 "
"08:05:00,\n"
"Point(3 3)@2001-01-01 08:10:00]';\n"
"-- \"[Point(1 1)@2001-01-01 08:00:00, Point(3 3)@2001-01-01 08:10:00]\""
msgstr ""

#. Tag: para
#: temporal_types.xml:42
#, no-c-format
msgid ""
"Similary, temporal sequence set values are converted into a normal form. For "
"this, consecutive sequence values are merged when possible. Examples of "
"transformation into a normal form are as follows."
msgstr ""

#. Tag: programlisting
#: temporal_types.xml:43
#, no-c-format
msgid ""
"SELECT tints(ARRAY[tint '[1@2001-01-01, 1@2001-01-03)', '[2@2001-01-03, "
"2@2001-01-05)']);\n"
"-- '{[1@2001-01-01 00:00:00+00, 2@2001-01-03 00:00:00+00, 2@2001-01-05 "
"00:00:00+00)}'\n"
"SELECT tfloats(ARRAY[tfloat '[1@2001-01-01, 2@2001-01-03)',\n"
"'[2@2001-01-03, 3@2001-01-05]']);\n"
"-- '{[1@2001-01-01 00:00:00+00, 3@2001-01-05 00:00:00+00]}'\n"
"SELECT tfloats(ARRAY[tfloat '[1@2001-01-01, 3@2001-01-05)', "
"'[3@2001-01-05]']);\n"
"-- '{[1@2001-01-01 00:00:00+00, 3@2001-01-05 00:00:00+00]}'\n"
"SELECT tgeompoint '{[Point(0 0)@2001-01-01 08:00:00,\n"
"Point(1 1)@2001-01-01 08:05:00, Point(1 1)@2001-01-01 08:10:00),\n"
"[Point(1 1)@2001-01-01 08:10:00, Point(1 1)@2001-01-01 08:15:00)}';\n"
"-- \"{[[Point(0 0)@2001-01-01 08:00:00, Point(1 1)@2001-01-01 08:05:00,\n"
"Point(1 1)@2001-01-01 08:15:00)}\"\n"
"SELECT tgeompoint '{[Point(1 1)@2001-01-01 08:00:00, Point(2 2)@2001-01-01 "
"08:05:00),\n"
"[Point(2 2)@2001-01-01 08:05:00, Point(3 3)@2001-01-01 08:10:00]}';\n"
"-- \"{[Point(1 1)@2001-01-01 08:00:00, Point(3 3)@2001-01-01 08:10:00]}\"\n"
"SELECT tgeompoint '{[Point(1 1)@2001-01-01 08:00:00, Point(3 3)@2001-01-01 "
"08:10:00),\n"
"[Point(3 3)@2001-01-01 08:10:00]}';\n"
"-- \"{[Point(1 1)@2001-01-01 08:00:00, Point(3 3)@2001-01-01 08:10:00]}\""
msgstr ""

#. Tag: para
#: temporal_types.xml:46
#, no-c-format
msgid ""
"Temporal types support <emphasis role=\"strong\">type modifiers</emphasis> "
"(or <varname>typmod</varname> in PostgreSQL terminology), which specify "
"additional information for a column definition. For example, in the "
"following table definition: <programlisting>\n"
"CREATE TABLE Department(DeptNo integer, DeptName varchar(25), NoEmps "
"tint(Sequence));\n"
"                </programlisting> the type modifier for the type "
"<varname>varchar</varname> is the value 25, which indicates the maximum "
"length of the values of the column, while the type modifier for the type "
"<varname>tint</varname> is the string <varname>Sequence</varname>, which "
"restricts the duration of the values of the column to be sequences. In the "
"case of temporal alphanumeric types (that is, <varname>tbool</varname>, "
"<varname>tint</varname>, <varname>tfloat</varname>, and <varname>ttext</"
"varname>), the possible values for the type modifier are <varname>Instant</"
"varname>, <varname>InstantSet</varname>, <varname>Sequence</varname>, and "
"<varname>SequenceSet</varname>. If no type modifier is specified for a "
"column, values of any duration are allowed."
msgstr ""

#. Tag: para
#: temporal_types.xml:50
#, no-c-format
msgid ""
"On the other hand, in the case of temporal point types (that is, "
"<varname>tgeompoint</varname> or <varname>tgeogpoint</varname>) the type "
"modifier may be used to specify specify the duration, the dimensionality, "
"and/or the spatial reference identifier (SRID). For example, in the "
"following table definition: <programlisting>\n"
"CREATE TABLE Flight(FlightNo integer, Route tgeogpoint(Sequence, PointZ, "
"4326));\n"
"                </programlisting> the type modifier for the type "
"<varname>tgeogpoint</varname> is composed of three values, the first one "
"indicating the duration as above, the second one the spatial type of the "
"geographies composing the temporal point, and the last one the SRID of the "
"composing geographies. For temporal points, the possible values for the "
"first argument of the type modifier are as above, those for the second "
"argument are either <varname>Point</varname> or <varname>PointZ</varname>, "
"and those for the third argument are valid SRIDs. All the three arguments "
"are optional and if any of them is not specified for a column, values of any "
"duration, dimensionality, and/or SRID are allowed."
msgstr ""

#. Tag: para
#: temporal_types.xml:54
#, no-c-format
msgid ""
"Each temporal type is associated to another type, referred to as its "
"<emphasis role=\"strong\">bounding box</emphasis>, which represent its "
"extent in the value and/or the time dimension. The bounding box of the "
"various temporal types are as follows:"
msgstr ""

#. Tag: para
#: temporal_types.xml:57
#, no-c-format
msgid ""
"The <varname>period</varname> type for the <varname>tbool</varname> and "
"<varname>ttext</varname> types, where only the temporal extent is considered."
msgstr ""

#. Tag: para
#: temporal_types.xml:61
#, no-c-format
msgid ""
"A <varname>tbox</varname> (temporal box) type for the <varname>tint</"
"varname> and <varname>tfloat</varname> types, where the value extent is "
"defined in the X dimension and the temporal extent in the T dimension."
msgstr ""

#. Tag: para
#: temporal_types.xml:65
#, no-c-format
msgid ""
"A <varname>stbox</varname> (spatiotemporal box) type for the "
"<varname>tgeompoint</varname> and <varname>tgeogpoint</varname> types, where "
"the spatial extent is defined in the X, Y, and Z dimensions, and the "
"temporal extent in the T dimension."
msgstr ""

#. Tag: para
#: temporal_types.xml:70
#, no-c-format
msgid ""
"A rich set of functions and operators is available to perform various "
"operations on temporal types. They are explained in <xref linkend="
"\"manipulating_temporal_types\"/>. Some of these operations, in particular "
"those related to indexes, manipulate bounding boxes for efficiency reasons."
msgstr ""

#. Tag: title
#: temporal_types.xml:73
#, no-c-format
msgid "Examples of Temporal Types"
msgstr ""

#. Tag: para
#: temporal_types.xml:74
#, no-c-format
msgid "Examples of usage of temporal alphanumeric types are given next."
msgstr ""

#. Tag: programlisting
#: temporal_types.xml:75
#, no-c-format
msgid ""
"CREATE TABLE Department(DeptNo integer, DeptName varchar(25), NoEmps tint);\n"
"INSERT INTO Department VALUES\n"
"(10, 'Research', tint '[10@2012-01-01, 12@2012-04-01, 12@2012-08-01)'),\n"
"(20, 'Human Resources', tint '[4@2012-02-01, 6@2012-06-01, 6@2012-10-01)');\n"
"CREATE TABLE Temperature(RoomNo integer, Temp tfloat);\n"
"INSERT INTO Temperature VALUES\n"
"(1001, tfloat '{18.5@2012-01-01 08:00:00, 20.0@2012-01-01 08:10:00}'),\n"
"(2001, tfloat '{19.0@2012-01-01 08:00:00, 22.5@2012-01-01 08:10:00}');\n"
"-- Value at a timestamp\n"
"SELECT RoomNo, valueAtTimestamp(Temp, '2012-01-01 08:10:00')\n"
"FROM temperature;\n"
"-- 1001;\n"
"-- 2001;22.5\n"
"-- Restriction to a value\n"
"SELECT DeptNo, atValue(NoEmps, 10)\n"
"FROM Department;\n"
"-- 10;\"[10@2012-01-01 00:00:00+00, 10@2012-04-01 00:00:00+00)\"\n"
"-- 20; NULL\n"
"-- Restriction to a period\n"
"SELECT DeptNo, atPeriod(NoEmps, '[2012-01-01, 2012-04-01]')\n"
"FROM Department;\n"
"-- 10;\"[10@2012-01-01 00:00:00+00, 12@2012-04-01 00:00:00+00]\"\n"
"-- 20;\"[4@2012-02-01 00:00:00+00, 4@2012-04-01 00:00:00+00]\"\n"
"-- Temporal comparison\n"
"SELECT DeptNo, NoEmps #&lt;= 10\n"
"FROM Department;\n"
"-- 10;\"[t@2012-01-01 00:00:00+00, f@2012-04-01 00:00:00+00, f@2012-08-01 "
"00:00:00+00)\"\n"
"-- 20;\"[t@2012-04-02 00:00:00+00, t@2012-10-01 00:00:00+00)\"\n"
"-- Temporal aggregation\n"
"SELECT tsum(NoEmps)\n"
"FROM Department;\n"
"-- \"{[10@2012-01-01 00:00:00+00, 14@2012-02-01 00:00:00+00, 16@2012-04-01 "
"00:00:00+00,\n"
"18@2012-06-01 00:00:00+00, 6@2012-08-01 00:00:00+00, 6@2012-10-01 "
"00:00:00+00)}\""
msgstr ""

#. Tag: para
#: temporal_types.xml:76
#, no-c-format
msgid "Examples of usage of temporal point types are given next."
msgstr ""

#. Tag: programlisting
#: temporal_types.xml:77
#, no-c-format
msgid ""
"CREATE TABLE Trips(CarId integer, TripId integer, Trip tgeompoint);\n"
"INSERT INTO Trips VALUES\n"
"(10, 1, tgeompoint '{[Point(0 0)@2012-01-01 08:00:00, Point(2 0)@2012-01-01 "
"08:10:00,\n"
"Point(2 1)@2012-01-01 08:15:00)}'),\n"
"(20, 1, tgeompoint '{[Point(0 0)@2012-01-01 08:05:00, Point(1 1)@2012-01-01 "
"08:10:00,\n"
"Point(3 3)@2012-01-01 08:20:00)}');\n"
"-- Value at a given timestamp\n"
"SELECT CarId, ST_AsText(valueAtTimestamp(Trip, timestamptz '2012-01-01 "
"08:10:00'))\n"
"FROM Trips;\n"
"-- 10;\"POINT(2 0)\"\n"
"-- 20;\"POINT(1 1)\"\n"
"-- Restriction to a given value\n"
"SELECT CarId, asText(atValue(Trip, 'Point(2 0)'))\n"
"FROM Trips;\n"
"-- 10;\"{\"[POINT(2 0)@2012-01-01 08:10:00+00]\"}\"\n"
"-- 20; NULL\n"
"-- Restriction to a period\n"
"SELECT CarId, asText(atPeriod(Trip, '[2012-01-01 08:05:00,2012-01-01 "
"08:10:00]'))\n"
"FROM Trips;\n"
"-- 10;\"{[POINT(1 0)@2012-01-01 08:05:00+00, POINT(2 0)@2012-01-01 "
"08:10:00+00]}\"\n"
"-- 20;\"{[POINT(0 0)@2012-01-01 08:05:00+00, POINT(1 1)@2012-01-01 "
"08:10:00+00]}\"\n"
"-- Temporal distance\n"
"SELECT T1.CarId, T2.CarId, T1.Trip &lt;-&gt; T2.Trip\n"
"FROM Trips T1, Trips T2\n"
"WHERE T1.CarId &lt; T2.CarId;\n"
"-- 10;20;\"{[1@2012-01-01 08:05:00+00, 1.4142135623731@2012-01-01 "
"08:10:00+00,\n"
"1@2012-01-01 08:15:00+00)}\""
msgstr ""

#. Tag: title
#: temporal_types.xml:81
#, no-c-format
msgid "Validity of Temporal Types"
msgstr ""

#. Tag: para
#: temporal_types.xml:83
#, no-c-format
msgid ""
"Values of temporal types must satisfy several constraints so that they are "
"well defined. These constraints are given next. <itemizedlist> <listitem> "
"<para>The constraints on the corresponding base type and "
"<varname>timestamptz</varname> types must be satisfied.</para> </listitem> "
"<listitem> <para>A temporal sequence value must be composed of at least one "
"instant value.</para> </listitem> <listitem> <para>An instantaneous temporal "
"sequence value must have inclusive lower and upper bounds.</para> </"
"listitem> <listitem> <para>In a temporal sequence value, the timestamps of "
"the composing instants must be different and ordered.</para> </listitem> "
"<listitem> <para>In a temporal sequence value with stepwise interpolation, "
"the last two values must be equal if upper bound is exclusive.</para> </"
"listitem> <listitem> <para>A temporal set value must be composed of at least "
"one temporal unit value.</para> </listitem> <listitem> <para>In a temporal "
"instant set value, the composing instants must be different and ordered. "
"This implies that the temporal extent of a temporal instant set value is an "
"ordered set of <varname>timestamptz</varname> values without duplicates.</"
"para> </listitem> <listitem> <para>In a temporal sequence set value, the "
"composing sequence values must be non overlapping and ordered. This implies "
"that the temporal extent of a temporal sequence set value is an ordered set "
"of disjoint periods.</para> </listitem> </itemizedlist> An error is raised "
"whenever one of these constraints are not satisfied. Examples of incorrect "
"temporal values are as follows."
msgstr ""

#. Tag: programlisting
#: temporal_types.xml:118
#, no-c-format
msgid ""
"-- incorrect value for base type\n"
"SELECT tbool '1.5@2001-01-01 08:00:00';\n"
"-- base type is not a point\n"
"SELECT tgeompoint 'Linestring(0 0,1 1)@2001-01-01 08:05:00';\n"
"-- incorrect timestamp\n"
"SELECT tint '2@2001-02-31 08:00:00';\n"
"-- empty sequence\n"
"SELECT tint '';\n"
"-- incorrect bounds for instantaneous sequence\n"
"SELECT tint '[1@2001-01-01 09:00:00)';\n"
"-- duplicate timestamps\n"
"SELECT tint '[1@2001-01-01 08:00:00, 2@2001-01-01 08:00:00]';\n"
"-- unordered timestamps\n"
"SELECT tint '[1@2001-01-01 08:10:00, 2@2001-01-01 08:00:00]';\n"
"-- incorrect end value\n"
"SELECT tint '[1@2001-01-01 08:00:00, 2@2001-01-01 08:10:00)';\n"
"-- empty temporal sequence set value\n"
"SELECT tints(ARRAY[]);\n"
"-- duplicate timestamps\n"
"SELECT tinti(ARRAY[tint '1@2001-01-01 08:00:00', '2@2001-01-01 08:00:00']);\n"
"-- overlapping periods\n"
"SELECT tints(ARRAY[tint '[1@2001-01-01 08:00:00, 1@2001-01-01 10:00:00)',\n"
"'[2@2001-01-01 09:00:00, 2@2001-01-01 11:00:00)']);"
msgstr ""
