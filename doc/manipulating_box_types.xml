<?xml version="1.0" encoding="UTF-8"?>
<!--
   ****************************************************************************
    MobilityDB Manual
    Copyright(c) MobilityDB Contributors

    This documentation is licensed under a Creative Commons Attribution-Share
    Alike 3.0 License: https://creativecommons.org/licenses/by-sa/3.0/
   ****************************************************************************
-->
<chapter id="manipulating_box_types">
	<title>Manipulating Bounding Box Types</title>
	<para>We present next the functions and operators for bounding box types. These functions and operators are polimorhic, that is, their argumentos can be of various types and their result type may depend on the type of the arguments. To express this in the signature of the operators, we use the following notation:</para>

	<itemizedlist>
		<listitem>
			<para><varname>box</varname> represents any bounding box type, that is, <varname>tbox</varname> or <varname>stbox</varname>.</para>
		</listitem>
	</itemizedlist>
	<para>In the following, we specify with the symbol &Z_support; that the function supports 3D points and with the symbol &geography_support; that the function is available for geographies.</para>

	<sect1 id="input_output_box_tyes">
		<title>Input/Output of Bounding Box Types</title>
			<para>
				MobilityDB generalizes Open Geospatial Consortium's Well-Known Text (WKT) and Well-Known Binary (WKB) input/output format for all temporal types. We present next the functions for input and output box types.
			</para>

		<para>A <varname>tbox</varname> is composed of a numeric and/or time dimensions. For each dimension, a span given, that is,  a <varname>floatspan</varname> for the value dimension and a <varname>period</varname> for the time dimension. Examples of input of <varname>tbox</varname> values are as follows:
			<programlisting xml:space="preserve">
-- Both value and time dimensions
SELECT tbox 'TBOX T([2000-01-01,2000-01-02],[1.0,2.0])';
-- Only value dimension
SELECT tbox 'TBOX((1.0,2.0))';
-- Only time dimension
SELECT tbox 'TBOX T((2000-01-01,2000-01-02))';
</programlisting>
		</para>

		<para>An <varname>stbox</varname> is composed of a spatial and/or time dimensions, where the coordinates of the spatial dimension may be 2D or 3D. For the temporal dimension a <varname>period</varname> is given and for the spatial dimension minimum and maximum coordinate values are given, where the latter may be Cartesian (planar) or geodetic (spherical). The SRID of the coordinates may be specified; if it is not the case, a value of 0 (unknown) and 4326 (corresponding to WGS84) is assumed, respectively, for planar and geodetic boxes. Geodetic boxes always have a Z dimension to account for the curvature of the underlying sphere or spheroid. Examples of input of <varname>stbox</varname> values are as follows:
			<programlisting xml:space="preserve">
-- Only value dimension with X and Y coordinates
SELECT stbox 'STBOX((1.0,2.0),(1.0,2.0))';
-- Only value dimension with X, Y, and Z coordinates
SELECT stbox 'STBOX Z((1.0,2.0,3.0),(1.0,2.0,3.0))';
-- Both value (with X and Y coordinates) and time dimensions
SELECT stbox 'STBOX T([2001-01-03,2001-01-03],((1.0,2.0),(1.0,2.0)))';
-- Both value (with X, Y, and Z coordinates) and time dimensions
SELECT stbox 'STBOX ZT([2001-01-01,2001-01-03],((1.0,2.0,3.0),(1.0,2.0,3.0)))';
-- Only time dimension
SELECT stbox 'STBOX T([2001-01-03,2001-01-03])';
-- Only value dimension with X, Y, and Z geodetic coordinates
SELECT stbox 'GEODSTBOX Z((1.0,2.0,3.0),(1.0,2.0,3.0))';
-- Both value (with X, Y and Z geodetic coordinates) and time dimension
SELECT stbox 'GEODSTBOX ZT([2001-01-04,2001-01-04],((1.0,2.0,3.0),(1.0,2.0,3.0)))';
-- Only time dimension for geodetic box
SELECT stbox 'GEODSTBOX ZT([2001-01-03,2001-01-03])';
-- SRID is given
SELECT stbox 'SRID=5676;STBOX T([2001-01-04,2001-01-04],((1.0,2.0),(1.0,2.0)))';
SELECT stbox 'SRID=4326;GEODSTBOX Z((1.0,2.0,3.0),(1.0,2.0,3.0))';
</programlisting>
		</para>

			<para>
				We give next the functions for input/output of box types in Well-Known Binary format.
			</para>

			<itemizedlist>
				<listitem id="box_asBinary">
					<indexterm><primary><varname>asBinary</varname></primary></indexterm>
					<para>Get the Well-Known Binary (WKB) representation</para>
					<para><varname>asBinary(box): bytea</varname></para>
					<para><varname>asBinary(box,endian text): bytea</varname></para>
					<para>The result is encoded using either the little-endian (NDR) or the big-endian (XDR) encoding. If no encoding is specified, then the encoding of the machine is used.</para>
					<programlisting xml:space="preserve">
SELECT asBinary(tbox 'TBOX T([2000-01-01,2000-01-02),[1,2))');
-- \x01030a0001005c6c29ffffffff00bc434713000000060001000000000000f03f0000000000000040
SELECT asBinary(tbox 'TBOX T([2000-01-01,2000-01-02),[1,2))', 'XDR');
-- \x0003000a01ffffffff296c5c00000000134743bc000006013ff00000000000004000000000000000
SELECT asBinary(stbox 'STBOX((1,1),(2,2))');
-- \x0101000000000000f03f0000000000000040000000000000f03f0000000000000040
</programlisting>
				</listitem>

				<listitem id="box_asHexWKB">
					<indexterm><primary><varname>asHexWKB</varname></primary></indexterm>
					<para>Get the Hexadecimal Well-Known Binary (HexWKB) representation as text</para>
					<para><varname>asHexWKB(box): text</varname></para>
					<para><varname>asHexWKB(box,endian text): text</varname></para>
					<para>The result is encoded using either the little-endian (NDR) or the big-endian (XDR) encoding. If no encoding is specified, then NDR is used.</para>
					<programlisting xml:space="preserve">
SELECT asHexWKB(tbox 'TBOX T([2000-01-01,2000-01-02),[1,2))');
-- 01030A0001005C6C29FFFFFFFF00BC434713000000060001000000000000F03F0000000000000040
SELECT asHexWKB(tbox 'TBOX T([2000-01-01,2000-01-02),[1,2))', 'XDR');
-- 0003000A01FFFFFFFF296C5C00000000134743BC000006013FF00000000000004000000000000000
SELECT asHexWKB(stbox 'STBOX((1,1),(2,2))');
-- 0101000000000000F03F0000000000000040000000000000F03F0000000000000040
</programlisting>
				</listitem>

				<listitem id="tboxFromBinary">
					<indexterm><primary><varname>tboxFromBinary</varname></primary></indexterm>
					<para>Input a temporal box from a Well-Known Binary (WKB) representation</para>
					<para><varname>tboxFromBinary(bytea): tbox</varname></para>
					<programlisting xml:space="preserve">
SELECT tboxFromBinary(
  '\x01030a0001005c6c29ffffffff00bc434713000000060001000000000000f03f0000000000000040');
-- TBOX T([2000-01-01, 2000-01-02),[1, 2))
</programlisting>
				</listitem>

				<listitem id="stboxFromBinary">
					<indexterm><primary><varname>stboxFromBinary</varname></primary></indexterm>
					<para>Input a spatiotemporal box from a Well-Known Binary (WKB) representation</para>
					<para><varname>stboxFromBinary(bytea): stbox</varname></para>
					<programlisting xml:space="preserve">
SELECT stboxFromBinary(
  '\x0101000000000000f03f0000000000000040000000000000f03f0000000000000040');
--  STBOX((1,1),(2,2))
</programlisting>
				</listitem>

				<listitem id="tboxFromHexWKB">
					<indexterm><primary><varname>tboxFromHexWKB</varname></primary></indexterm>
					<para>Input a temporal box from an Hexadecimal Well-Known Binary (HexWKB) representation &Z_support;</para>
					<para><varname>tboxFromHexWKB(text): tbox</varname></para>
					<programlisting xml:space="preserve">
SELECT tboxFromHexWKB(
  '01030A0001005C6C29FFFFFFFF00BC434713000000060001000000000000F03F0000000000000040');
-- TBOX T([2000-01-01, 2000-01-02),[1, 2))
</programlisting>
				</listitem>

				<listitem id="stboxFromHexWKB">
					<indexterm><primary><varname>stboxFromHexWKB</varname></primary></indexterm>
					<para>Input a spatiotemporal box from an Hexadecimal Well-Known Binary (HexWKB) representation</para>
					<para><varname>stboxFromHexWKB(text): stbox</varname></para>
					<programlisting xml:space="preserve">
SELECT stboxFromHexWKB(
  '0101000000000000F03F0000000000000040000000000000F03F0000000000000040');
-- STBOX((1,1),(2,2))
</programlisting>
				</listitem>
			</itemizedlist>
	</sect1>

	<sect1 id="constructor_box_types">
		<title>Constructor Functions</title>

		<para>
			Type <varname>tbox</varname> has several constructor functions depending on whether the value and/or the time extent are given. The value extent can be specified by a number or a span, while the time extent can be specified by a time type.
		</para>

		<itemizedlist>
			<listitem id="tbox">
				<indexterm><primary><varname>tbox</varname></primary></indexterm>
				<para>Constructor for <varname>tbox</varname></para>
				<para><varname>tbox(time):tbox</varname></para>
				<para><varname>tbox({number,numspan}):tbox</varname></para>
				<para><varname>tbox({number,numspan},time):tbox</varname></para>
				<programlisting xml:space="preserve">
-- Both value and time dimensions
SELECT tbox(1.0, timestamptz '2001-01-01');
SELECT tbox(floatspan '[1.0, 2.0)', period '[2001-01-01,2001-01-02)');
-- Only value dimension
SELECT tbox(floatspan '[1.0,2.0)');
-- Only time dimension
SELECT tbox(period '[2001-01-01,2001-01-02)');
</programlisting>
			</listitem>
		</itemizedlist>

		<para>
			Type <varname>stbox</varname> has several constructor functions depending on whether the space and/or the time extent are given. The coordinates for the spatial extent can be 2D or 3D and can be either Cartesian or geodetic. The spatial extent can be specified by the minimum and maximum coordinate values. The SRID can be specified in an optional last argument. If not given, a value 0 (respectively 4326) is assumed by default for planar (respectively geodetic) boxes. The spatial extent can also be specified by a geometry or a geography. The temporal extent can be specified by a time type.
		</para>

		<itemizedlist>
			<listitem id="stbox">
				<indexterm><primary><varname>stbox</varname></primary></indexterm>
				<para>Constructor for <varname>stbox</varname></para>
				<para><varname>stbox(float,float,float,float,integer): stbox</varname></para>
				<para><varname>stbox_z(float,float,float,float,float,float,integer): stbox</varname></para>
				<para><varname>stbox_t({timestamptz,period},float,float,float,float,integer): stbox</varname></para>
				<para><varname>stbox_zt({timestamptz,period},float,float,float,float,float,float,integer): stbox</varname></para>
				<para><varname>geodstbox_t(time): stbox</varname></para>
				<para><varname>geodstbox_z(float,float,float,float,float,float,integer): stbox</varname></para>
				<para><varname>geodstbox_zt({timestamptz,period},float,float,float,float,float,float,integer): stbox</varname></para>
				<para><varname>stbox(geo): stbox</varname></para>
				<para><varname>stbox_t(time): stbox</varname></para>
				<para><varname>stbox(geo,time): stbox</varname></para>
				<programlisting xml:space="preserve">
-- Only value dimension with X and Y coordinates
SELECT stbox_z(1.0,2.0,3.0,1.0,2.0,3.0,5676);
-- Only value dimension with X, Y, and Z coordinates
SELECT stbox_z(1.0,2.0,3.0,1.0,2.0,3.0);
-- Only value dimension with X, Y, and Z coordinates and SRID
SELECT stbox_z(1.0,2.0,3.0,1.0,2.0,3.0,5676);
-- Both value (with X and Y coordinates) and time dimensions
SELECT stbox_t('[2001-01-03,2001-01-03]', 1.0,2.0, 1.0,2.0);
-- Both value (with X, Y, and Z coordinates) and time dimensions
SELECT stbox_zt('[2001-01-03,2001-01-03]', 1.0,2.0,3.0, 1.0,2.0,3.0);
-- Only time dimension
SELECT stbox_t('[2001-01-03,2001-01-03]');
-- Only value dimension with X, Y, and Z geodetic coordinates
SELECT geodstbox_z(1.0,2.0,3.0,1.0,2.0,3.0);
--  Both value (with X, Y, and Z geodetic coordinates) and time dimensions
SELECT geodstbox_zt('[2001-01-03,2001-01-04]', 1.0,2.0,3.0, 1.0,2.0,3.0);
-- Only time dimension for geodetic box
SELECT geodstbox_t('[2001-01-03,2001-01-03]');
-- Geometry and time dimension
SELECT stbox(geometry 'Linestring(1 1 1,2 2 2)', period '[2001-01-03, 2001-01-05]');
-- Geography and time dimension
SELECT stbox(geography 'Linestring(1 1 1,2 2 2)', period '[2001-01-03, 2001-01-05]');
</programlisting>
			</listitem>
		</itemizedlist>
	</sect1>

	<sect1 id="casting_box_types">
		<title>Casting</title>

		<itemizedlist>
			<listitem id="tbox_cast_to">
				<indexterm><primary><varname>::</varname></primary></indexterm>
				<para>Cast a <varname>tbox</varname> to another type</para>
				<para><varname>tbox::{floatspan,period}</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2000-01-01,2000-01-02),(1,2))'::floatspan;
-- (1, 2)
SELECT tbox 'TBOX T([2000-01-01,2000-01-02),(1,2))'::period;
-- [2000-01-01, 2000-01-02)
</programlisting>
			</listitem>

			<listitem id="tbox_cast_from">
				<indexterm><primary><varname>::</varname></primary></indexterm>
				<para>Cast another type to a <varname>tbox</varname></para>
				<para><varname>{number,span,time,tnumber}::tbox</varname></para>
				<programlisting xml:space="preserve">
SELECT floatspan '(1.0,2.0)'::tbox;
-- TBOX((1, 2))
SELECT periodset '{(2001-01-01,2001-01-02),(2001-01-03,2001-01-04)}'::tbox;
-- TBOX T((2001-01-01, 2001-01-04))
</programlisting>
			</listitem>

			<listitem id="stbox_cast_to">
				<indexterm><primary><varname>::</varname></primary></indexterm>
				<para>Cast an <varname>stbox</varname> to a another type</para>
				<para><varname>stbox::{period,geometry}</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX T([2001-01-01,2001-01-03],((1.0,2.0),(3.0,4.0)))'::period;
-- [2000-01-01, 2000-01-03]
SELECT ST_AsEWKT(stbox 'SRID=4326;STBOX T([2000-01-01,2000-01-05],((1,1),(5,5)))'::geometry);
-- SRID=4326;POLYGON((1 1,1 5,5 5,5 1,1 1))
SELECT ST_AsEWKT(stbox 'SRID=4326;STBOX T([2000-01-01,2000-01-05],((1,1),(1,5)))'::geometry);
-- SRID=4326;LINESTRING(1 1,1 5)
SELECT ST_AsEWKT(stbox 'SRID=4326;STBOX T([2000-01-01,2000-01-05],((1,1),(1,1)))'::geometry);
-- SRID=4326;POINT(1 1)
SELECT ST_AsEWKT(stbox 'SRID=4326;STBOX ZT([2000-01-01,2000-01-05],((1,1,1),(5,5,5)))'::
  geometry);
-- SRID=4326;POLYHEDRALSURFACE(((1 1 1,1 5 1,5 5 1,5 1 1,1 1 1)),
  ((1 1 5,5 1 5,5 5 5,1 5 5,1 1 5)),((1 1 1,1 1 5,1 5 5,1 5 1,1 1 1)),
  ((5 1 1,5 5 1,5 5 5,5 1 5,5 1 1)),((1 1 1,5 1 1,5 1 5,1 1 5,1 1 1)),
  ((1 5 1,1 5 5,5 5 5,5 5 1,1 5 1)))
</programlisting>
			</listitem>

			<listitem id="stbox_cast_from">
				<indexterm><primary><varname>::</varname></primary></indexterm>
				<para>Cast another type to an <varname>stbox</varname></para>
				<para><varname>{geo,time,tpoint}::stbox</varname></para>
				<programlisting xml:space="preserve">
SELECT geometry 'Linestring(1 1,2 2)'::stbox;
-- "STBOX((1,1),(2,2))"
SELECT periodset '{(2001-01-01,2001-01-02),(2001-01-03,2001-01-04)}'::stbox;
-- "STBOX T((2001-01-01,2001-01-04))"
</programlisting>
			</listitem>
		</itemizedlist>
	</sect1>

	<sect1 id="accessor_box_types">
		<title>Accessor Functions</title>

		<itemizedlist>
			<listitem id="hasX">
				<indexterm><primary><varname>hasX</varname></primary></indexterm>
				<para>Has X dimension?</para>
				<para><varname>hasX(box): boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT hasX(tbox 'TBOX T([2000-01-01,2000-01-03))');
-- false
SELECT hasX(stbox 'STBOX((1.0,2.0),(3.0,4.0))');
-- true
</programlisting>
			</listitem>

			<listitem id="hasZ">
				<indexterm><primary><varname>hasZ</varname></primary></indexterm>
				<para>Has Z dimension?</para>
				<para><varname>hasZ(stbox): boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT hasZ(stbox 'STBOX((1.0,2.0),(3.0,4.0))');
-- false
</programlisting>
			</listitem>

			<listitem id="hasT">
				<indexterm><primary><varname>hasT</varname></primary></indexterm>
				<para>Has T dimension?</para>
				<para><varname>hasT(box): boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT hasT(tbox 'TBOX T([2000-01-01,2000-01-03],(1.0,3.0))');
-- true
SELECT hasT(stbox 'STBOX((1.0,2.0),(3.0,4.0))');
-- false
</programlisting>
			</listitem>

			<listitem id="isGeodetic">
				<indexterm><primary><varname>isGeodetic</varname></primary></indexterm>
				<para>Is geodetic?</para>
				<para><varname>isGeodetic(stbox): boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT isGeodetic(stbox 'GEODSTBOX Z((1.0,1.0,0.0),(3.0,3.0,1.0))');
-- true
SELECT isGeodetic(stbox 'STBOX T([2001-01-01,2001-01-02],((1.0,2.0),(3.0,4.0)))');
-- false
</programlisting>
			</listitem>

			<listitem id="Xmin">
				<indexterm><primary><varname>Xmin</varname></primary></indexterm>
				<para>Get the minimum X value</para>
				<para><varname>Xmin(box): float</varname></para>
				<programlisting xml:space="preserve">
SELECT Xmin(tbox 'TBOX T([2000-01-01,2000-01-03),(1.0,3.0))');
-- 1
SELECT Xmin(stbox 'STBOX((1.0,2.0),(3.0,4.0))');
-- 1
</programlisting>
			</listitem>

			<listitem id="Xmax">
				<indexterm><primary><varname>Xmax</varname></primary></indexterm>
				<para>Get the maximum X value</para>
				<para><varname>Xmax(box): float</varname></para>
				<programlisting xml:space="preserve">
SELECT Xmax(tbox 'TBOX T([2000-01-01,2000-01-03),(1.0,3.0))');
-- 3
SELECT Xmax(stbox 'STBOX((1.0,2.0),(3.0,4.0))');
-- 3
</programlisting>
			</listitem>

			<listitem id="Ymin">
				<indexterm><primary><varname>Ymin</varname></primary></indexterm>
				<para>Get the minimum Y value</para>
				<para><varname>Ymin(stbox): float</varname></para>
				<programlisting xml:space="preserve">
SELECT Ymin(stbox 'STBOX((1.0,2.0),(3.0,4.0))');
-- 2
</programlisting>
			</listitem>

			<listitem id="Ymax">
				<indexterm><primary><varname>Ymax</varname></primary></indexterm>
				<para>Get the maximum Y value</para>
				<para><varname>Ymax(stbox): float</varname></para>
				<programlisting xml:space="preserve">
SELECT Ymax(stbox 'STBOX((1.0,2.0),(3.0,4.0))');
-- 4
</programlisting>
			</listitem>

			<listitem id="Zmin">
				<indexterm><primary><varname>Zmin</varname></primary></indexterm>
				<para>Get the minimum Z value</para>
				<para><varname>Zmin(stbox): float</varname></para>
				<programlisting xml:space="preserve">
SELECT Zmin(stbox 'STBOX Z((1.0,2.0,3.0),(4.0,5.0,6.0))');
-- 3
</programlisting>
			</listitem>

			<listitem id="Zmax">
				<indexterm><primary><varname>Zmax</varname></primary></indexterm>
				<para>Get the maximum Z value</para>
				<para><varname>Zmax(stbox): float</varname></para>
				<programlisting xml:space="preserve">
SELECT Zmax(stbox 'STBOX Z((1.0,2.0,3.0),(4.0,5.0,6.0))');
-- 6
</programlisting>
			</listitem>

			<listitem id="Tmin">
				<indexterm><primary><varname>Tmin</varname></primary></indexterm>
				<para>Get the minimum T value</para>
				<para><varname>Tmin(box): timestamptz</varname></para>
				<programlisting xml:space="preserve">
SELECT Tmin(stbox 'GEODSTBOX T([2001-01-01,2001-01-03))');
-- 2001-01-01
</programlisting>
			</listitem>

			<listitem id="Tmax">
				<indexterm><primary><varname>Tmax</varname></primary></indexterm>
				<para>Get the maximum T value</para>
				<para><varname>Tmax(box): timestamptz</varname></para>
				<programlisting xml:space="preserve">
SELECT Tmax(stbox 'GEODSTBOX T([2001-01-01,2001-01-03))');
-- 2001-01-03
</programlisting>
			</listitem>
		</itemizedlist>
	</sect1>

	<sect1 id ="modification_box_tyes">
			<title>Modification Functions</title>

			<para>
				The functions given next expand the bounding boxes on the value and the time dimension or set the precision of the value dimension. These functions raise an error if the corresponding dimension is not present.
			</para>
			<itemizedlist>
				<listitem id="expandValue">
					<indexterm><primary><varname>expandValue</varname></primary></indexterm>
					<para>Expand the numeric dimension of the bounding box by a float value</para>
					<para><varname>expandValue(tbox,float): tbox</varname></para>
					<programlisting xml:space="preserve">
SELECT expandValue(tbox 'TBOX T([2001-01-01,2001-01-03],(1,2))', 1);
-- TBOX T([2001-01-01, 2001-01-03],(0, 3))
SELECT expandValue(tbox 'TBOX T([2001-01-01,2001-01-03))', 1);
-- The box must have value dimension
</programlisting>
				</listitem>

				<listitem id="expandSpatial">
					<indexterm><primary><varname>expandSpatial</varname></primary></indexterm>
					<para>Expand the spatial dimension of the bounding box by a float value</para>
					<para><varname>expandSpatial(stbox,float): stbox</varname></para>
					<programlisting xml:space="preserve">
SELECT expandSpatial(stbox 'STBOX ZT([2001-01-01,2001-01-03],((1,1,1),(2,2,2)))', 1);
-- STBOX ZT([2001-01-01, 2001-01-03],((0,0,0),(3,3,3)))
SELECT expandSpatial(stbox 'STBOX T([2001-01-01,2001-01-03))', 1);
-- The box must have XY(Z) dimension
</programlisting>
				</listitem>

				<listitem id="expandTemporal">
					<indexterm><primary><varname>expandTemporal</varname></primary></indexterm>
					<para>Expand the temporal dimension of the bounding box by a time interval</para>
					<para><varname>expandTemporal(box,interval): box</varname></para>
					<programlisting xml:space="preserve">
SELECT expandTemporal(tbox 'TBOX T([2001-01-01,2001-01-03],(1,2))', interval '1 day');
-- TBOX T([2011-12-31, 2001-01-04],(1, 2))
SELECT expandTemporal(stbox 'STBOX ZT([2001-01-01,2001-01-03],((1,1,1),(2,2,2)))',
  interval '1 day');
-- STBOX ZT([2011-12-31, 2001-01-04],((1,1,1),(2,2,2)))
</programlisting>
				</listitem>

				<listitem id="box_round">
					<indexterm><primary><varname>round</varname></primary></indexterm>
					<para>Round the value or the coordinates of the bounding box to a number of decimal places</para>
					<para><varname>round(box,integer): box</varname></para>
					<programlisting xml:space="preserve">
SELECT round(tbox 'TBOX T([2000-01-01,2000-01-02],(1.12345,2.12345))', 2);
-- TBOX T([2000-01-01, 2000-01-02],(1.12, 2.12))
SELECT round(stbox 'STBOX T([2000-01-01,2000-01-02],((1.12345, 1.12345),
	(2.12345, 2.12345)))', 2);
-- STBOX T([2000-01-01, 2000-01-02],(1.12,1.12),(2.12,2.12))
</programlisting>
				</listitem>

			</itemizedlist>
		</sect1>

	<sect1 id ="srid_box_tyes">
		<title>Spatial Reference System Functions</title>

		<itemizedlist>
			<listitem id="stbox_SRID">
				<indexterm><primary><varname>SRID</varname></primary></indexterm>
				<para>Get the spatial reference identifier &Z_support; &geography_support;</para>
				<para><varname>SRID(stbox): integer</varname></para>
				<programlisting xml:space="preserve">
SELECT SRID(stbox 'STBOX ZT([2000-01-01,2000-01-02],((1.0,2.0,3.0),(4.0,5.0,6.0)))');
-- 0
SELECT SRID(stbox 'SRID=5676;STBOX T([2000-01-01,2000-01-02],((1.0,2.0),(4.0,5.0)))');
-- 5676
SELECT SRID(stbox 'GEODSTBOX T([2000-01-01,2000-01-02))');
-- 4326
</programlisting>
			</listitem>

			<listitem id="stbox_setSRID">
				<indexterm><primary><varname>setSRID</varname></primary></indexterm>
				<para>Set the spatial reference identifier &Z_support; &geography_support;</para>
				<para><varname>setSRID(stbox): stbox</varname></para>
				<programlisting xml:space="preserve">
SELECT setSRID(stbox 'STBOX ZT([2000-01-01,2000-01-02],((1.0,2.0,3.0),
  (4.0,5.0,6.0)))', 5676);
-- SRID=5676;STBOX ZT([2000-01-01,2000-01-02],((1,2,3),(4,5,6)))
</programlisting>
				</listitem>

			<listitem id="stbox_transform">
				<indexterm><primary><varname>transform</varname></primary></indexterm>
				<para>Transform to a different spatial reference</para>
				<para><varname>transform(stbox,integer): stbox &Z_support; &geography_support;</varname></para>
				<programlisting xml:space="preserve">
SELECT transform(stbox 'SRID=4326;STBOX T([2000-01-01,2000-01-02],
  ((2.340088, 49.400250),(6.575317, 51.553167)))', 3812);
-- SRID=3812;STBOX T([2000-01-01, 2000-01-02],(502773.4299808172,511805.1204015772),
  (803028.9082648156,751590.7426289867))
</programlisting>
			</listitem>
		</itemizedlist>
	</sect1>

	<sect1>
		<title>Aggregate Functions</title>

		<itemizedlist>
			<listitem id="box_extent">
				<indexterm><primary><varname>extent</varname></primary></indexterm>
				<para>Bounding box extent</para>
				<para><varname>extent(box): box</varname></para>
				<programlisting xml:space="preserve">
WITH boxes(b) AS (
  SELECT tbox 'TBOX T([2000-01-01,2000-01-03],(1,3))' UNION
  SELECT tbox 'TBOX T([2000-01-05,2000-01-07],(5,7))' UNION
  SELECT tbox 'TBOX T([2000-01-06,2000-01-08],(6,8))'
)
SELECT extent(b) FROM boxes;
-- TBOX T([2000-01-01,2000-01-08],(1,8))
WITH boxes(b) AS (
  SELECT stbox 'STBOX Z((1,1,1),(3,3,3))' UNION
  SELECT stbox 'STBOX Z((5,5,5),(7,7,7))' UNION
  SELECT stbox 'STBOX Z((6,6,6),(8,8,8))'
)
SELECT extent(b) FROM boxes;
-- STBOX Z((1,1,1),(8,8,8))
</programlisting>
			</listitem>
		</itemizedlist>
	</sect1>

	<sect1 id="comparison_box_types">
		<title>Comparison Operators</title>

		<para>The traditional comparison operators (<varname>=</varname>, <varname>&lt;</varname>, and so on) can be applied to box types. Excepted equality  and inequality, the other comparison operators are not useful in the real world but allow B-tree indexes to be constructed on box types. These operators compare first the timestamps and if those are equal, compare the values.</para>

		<itemizedlist>
			<listitem id="box_eq">
				<indexterm><primary><varname>=</varname></primary></indexterm>
				<para>Are the bounding boxes equal?</para>
				<para><varname>box = box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-04],[1,1])' =
  tbox 'TBOX T([2001-01-03,2001-01-05],[2,2])';
-- false
</programlisting>
			</listitem>

			<listitem id="box_ne">
				<indexterm><primary><varname>&lt;&gt;</varname></primary></indexterm>
				<para>Are the bounding boxes different?</para>
				<para><varname>box &lt;&gt; box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-04],[1,1])' &lt;&gt;
  tbox 'TBOX T([2001-01-03,2001-01-05],[2,2])';
-- true
</programlisting>
			</listitem>

			<listitem id="box_lt">
				<indexterm><primary><varname>&lt;</varname></primary></indexterm>
				<para>Is the first bounding box less than the second one?</para>
				<para><varname>box &lt; box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-04],[1,1])' &lt;
  tbox 'TBOX T([2001-01-03,2001-01-05],[1,2])';
-- true
</programlisting>
			</listitem>

			<listitem id="box_gt">
				<indexterm><primary><varname>&gt;</varname></primary></indexterm>
				<para>Is the first bounding box greater than the second one?</para>
				<para><varname>box &gt; box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-03,2001-01-04],[1,1])' &gt;
  tbox 'TBOX T([2001-01-01,2001-01-05],(1,2))';
-- true
</programlisting>
			</listitem>

			<listitem id="box_le">
				<indexterm><primary><varname>&lt;=</varname></primary></indexterm>
				<para>Is the first bounding box less than or equal to the second one?</para>
				<para><varname>box &lt;= box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-04],[1,1])' &lt;=
  tbox 'TBOX T([2001-01-03,2001-01-05],[2,2])';
-- true
</programlisting>
			</listitem>

			<listitem id="box_ge">
				<indexterm><primary><varname>&gt;=</varname></primary></indexterm>
				<para>Is the first bounding box greater than or equal to the second one?</para>
				<para><varname>box &gt;= box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-04],[1,1])' &gt;=
  tbox 'TBOX T([2001-01-03,2001-01-05],[2,2])';
-- false
</programlisting>
			</listitem>
		</itemizedlist>
	</sect1>

	<sect1 id="set_box_types">
		<title>Set Operators</title>

		<para>The set operators for box types are union (<varname>+</varname>) and intersection (<varname>*</varname>). In the case of union, the operands must have exactly the same dimensions, otherwise an error is raised. Furthermore, if the operands do not overlap on all the dimensions and error is raised, since in this would result in a box with disjoint values, which cannot be represented.  The operator computes the union on all dimensions that are present in both arguments. In the case of intersection, the operands must have at least one common dimension, otherwise an error is raised. The operator computes the intersection on all dimensions that are present in both arguments.</para>

		<itemizedlist>
			<listitem id="box_union">
				<indexterm><primary><varname>+</varname></primary></indexterm>
				<para>Union of the bounding boxes</para>
				<para><varname>box + box: box</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-03],[1,3))' +
  tbox 'TBOX T([2001-01-02,2001-01-04],[2,4))';
-- TBOX T([2001-01-01, 2001-01-04],[1, 4))
SELECT stbox 'STBOX ZT([2001-01-01,2001-01-02],((1,1,1),(2,2,2)))' +
  stbox 'STBOX T([2001-01-01,2001-01-03],((2,2),(3,3)))';
-- ERROR:  The arguments must be of the same dimensionality
SELECT tbox 'TBOX T([2001-01-01,2001-01-02],(1,3))' +
  tbox 'TBOX T([2001-01-03,2001-01-04],(3,4))';
-- ERROR:  Result of box union would not be contiguous
</programlisting>
			</listitem>

			<listitem id="box_intersection">
				<indexterm><primary><varname>*</varname></primary></indexterm>
				<para>Intersection of the bounding boxes</para>
				<para><varname>box * box: box</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-03],[1,3))' *
  tbox 'TBOX T([2001-01-02,2001-01-04))';
-- TBOX([2001-01-02,2001-01-03))
SELECT stbox 'STBOX ZT([2001-01-01,2001-01-02],((1,1,1),(3,3,3)))' *
  stbox 'STBOX((2,2),(4,4))';
-- STBOX((2,2),(3,3))
</programlisting>
			</listitem>
		</itemizedlist>
	</sect1>

	<sect1 id="box_topo_operators">
		<title>Topological Operators</title>

		<para>There are five topological operators: overlaps (<varname>&amp;&amp;</varname>), contains (<varname>@&gt;</varname>), contained (<varname>&lt;@</varname>), same (<varname>~=</varname>), and adjacent (<varname>-|-</varname>). The operators verify the topological relationship between the bounding boxes taking into account the value and/or the time dimension for as many dimensions that are present on both arguments.</para>

		<para>The topological operators for bounding boxes are given next.</para>

		<itemizedlist>
			<listitem id="box_overlap">
				<indexterm><primary><varname>&amp;&amp;</varname></primary></indexterm>
				<para>Do the bounding boxes overlap?</para>
				<para><varname>box &amp;&amp; box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-03],(1,3))' &amp;&amp;
  tbox 'TBOX T([2001-01-02,2001-01-04],(2,4))';
-- true
SELECT stbox 'STBOX T([2001-01-01,2001-01-02],((1,1),(2,2)))' &amp;&amp;
  stbox 'STBOX T([2001-01-02,2001-01-02])';
-- true
</programlisting>
			</listitem>

			<listitem id="box_contains">
				<indexterm><primary><varname>@&gt;</varname></primary></indexterm>
				<para>Does the first bounding box contain the second one?</para>
				<para><varname>box @&gt; box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-04],(1,4))' @&gt;
  tbox 'TBOX T([2001-01-01,2001-01-02],(2,3))';
-- true
SELECT stbox 'STBOX Z((1,1,1),(3,3,3))' @&gt;
  stbox 'STBOX T([2001-01-01,2001-01-02],((1,1),(2,2)))';
-- true
</programlisting>
			</listitem>

			<listitem id="box_containedby">
				<indexterm><primary><varname>&lt;@</varname></primary></indexterm>
				<para>Is the first bounding box contained in the second one?</para>
				<para><varname>box &lt;@ box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-02],(1,2))' &lt;@
  tbox 'TBOX T([2001-01-01,2001-01-02],(1,2))';
-- true
SELECT stbox 'STBOX T([2001-01-01,2001-01-02],((1,1),(2,2)))' &lt;@
  stbox 'STBOX ZT([2001-01-01,2001-01-02],((1,1,1),(2,2,2)))';
-- true
</programlisting>
			</listitem>

			<listitem id="box_same">
				<indexterm><primary><varname>~=</varname></primary></indexterm>
				<para>Are the bounding boxes equal in their common dimensions?</para>
				<para><varname>box ~= box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-02],(1,2))' ~=
  tbox 'TBOX T([2001-01-01,2001-01-02])';
-- true
SELECT stbox 'STBOX T([2001-01-01,2001-01-03],((1,1),(3,3)))' ~=
  stbox 'STBOX Z((1,1,1),(3,3,3))';
-- true
</programlisting>
			</listitem>

			<listitem id="box_adjacent">
				<indexterm><primary><varname>-|-</varname></primary></indexterm>
				<para>Are the bounding boxes adjacent?</para>
				<para><varname>box -|- box: boolean</varname></para>
				<para>Two boxes are adjacent if they share <emphasis>n</emphasis> dimensions and their intersection is at most of <emphasis>n</emphasis>-1 dimensions.</para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-02],(1,2))' -|-
  tbox 'TBOX T([2001-01-02,2001-01-03])';
-- true
SELECT stbox 'STBOX T([2001-01-01,2001-01-03],((1,1),(3,3)))' -|-
  stbox 'STBOX T([2001-01-03,2001-01-04],((2,2),(4,4)))';
-- true
</programlisting>
			</listitem>
		</itemizedlist>
	</sect1>

	<sect1 id="box_relpos_operators">
		<title>Relative Position Operators</title>

		<para>These operators consider the relative position of the bounding boxes. The operators <varname>&lt;&lt;</varname>, <varname>&gt;&gt;</varname>, <varname>&amp;&lt;</varname>, and <varname>&amp;&gt;</varname> consider the X value for the <varname>tbox</varname> type and the X coordinates for the <varname>stbox</varname> type, the operators <varname>&lt;&lt;|</varname>, <varname>|&gt;&gt;</varname>, <varname>&amp;&lt;|</varname>, and <varname>|&amp;&gt;</varname> consider the Y coordinates for the <varname>stbox</varname> type, the operators <varname>&lt;&lt;/</varname>, <varname>/&gt;&gt;</varname>, <varname>&amp;&lt;/</varname>, and <varname>/&amp;&gt;</varname> consider the Z coordinates for the <varname>stbox</varname> type, and the operators <varname>&lt;&lt;#</varname>, <varname>#&gt;&gt;</varname>, <varname>#&amp;&lt;</varname>, and <varname>#&amp;&gt;</varname> consider the time dimension for the <varname>tbox</varname> and <varname>stbox</varname> types. The operators raise an error if both boxes do not have the required dimension.</para>

		<para>The operators for the numeric dimension of the <varname>tbox</varname> type are given next.</para>

		<itemizedlist>
			<listitem id="tbox_left">
				<indexterm><primary><varname>&lt;&lt;</varname></primary></indexterm>
				<para>Are the X values of the first bounding box strictly less than those of the second one?</para>
				<para><varname>tbox &lt;&lt; tbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-02],(1,2))' &lt;&lt;
  tbox 'TBOX T([2001-01-03,2001-01-04],(3,4))';
-- true
SELECT tbox 'TBOX T([2001-01-01,2001-01-02],(1,2))' &lt;&lt;
  tbox 'TBOX T([2001-01-03,2001-01-04])';
-- ERROR:  The box must have value dimension
</programlisting>
			</listitem>

			<listitem id="tbox_right">
				<indexterm><primary><varname>&gt;&gt;</varname></primary></indexterm>
				<para>Are the X values of the first bounding box strictly greater than those of the second one?</para>
				<para><varname>tbox &gt;&gt; tbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-03,2001-01-04],(3,4))' &gt;&gt;
  tbox 'TBOX T([2001-01-01,2001-01-02],(1,2))';
-- true
</programlisting>
			</listitem>

			<listitem id="tbox_overleft">
				<indexterm><primary><varname>&amp;&lt;</varname></primary></indexterm>
				<para>Are the X values of the first bounding box not greater than those of the second one?</para>
				<para><varname>tbox &amp;&lt; tbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-04],(1,4))' &amp;&lt;
  tbox 'TBOX T([2001-01-03,2001-01-04],(3,4))';
-- true
</programlisting>
			</listitem>

			<listitem id="tbox_overright">
				<indexterm><primary><varname>&amp;&gt;</varname></primary></indexterm>
				<para>Are the X values of the first bounding box not less than those of the second one?</para>
				<para><varname>tbox &amp;&gt; tbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2001-01-01,2001-01-02],(1,2))' &amp;&gt;
  tbox 'TBOX T([2001-01-01,2001-01-04],(1,4))';
-- true
</programlisting>
			</listitem>
		</itemizedlist>
		<para>The operators for the spatial dimension of the <varname>stbox</varname> type are given next.</para>

		<itemizedlist>
			<listitem id="stbox_left">
				<indexterm><primary><varname>&lt;&lt;</varname></primary></indexterm>
				<para>Are the X values of the first bounding box strictly to the left of those of the second one?</para>
				<para><varname>stbox &lt;&lt; stbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX Z((1,1,1),(2,2,2))' &lt;&lt; stbox 'STBOX Z((3,3,3),(4,4,4))';
-- true
</programlisting>
			</listitem>

			<listitem id="stbox_right">
				<indexterm><primary><varname>&gt;&gt;</varname></primary></indexterm>
				<para>Are the X values of the first bounding box strictly to the right of those of the second one?</para>
				<para><varname>stbox &gt;&gt; stbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX Z((3,3,3),(4,4,4))' &gt;&gt; stbox 'STBOX Z((1,1,1),(2,2,2))';
-- true
</programlisting>
			</listitem>

			<listitem id="stbox_overleft">
				<indexterm><primary><varname>&amp;&lt;</varname></primary></indexterm>
				<para>Are the X values of the first bounding box not to the right of those of the second one?</para>
				<para><varname>stbox &amp;&lt; stbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX Z((1,1,1),(4,4,4))' &amp;&lt; stbox 'STBOX Z((3,3,3),(4,4,4))';
-- true
</programlisting>
			</listitem>

			<listitem id="stbox_overright">
				<indexterm><primary><varname>&amp;&gt;</varname></primary></indexterm>
				<para>Are the X values of the first bounding box not to the left of those of the second one?</para>
				<para><varname>stbox &amp;&gt; stbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX Z((3,3,3),(4,4,4))' &amp;&gt; stbox 'STBOX Z((1,1,1),(2,2,2))';
-- true
</programlisting>
			</listitem>

			<listitem id="stbox_below">
				<indexterm><primary><varname>&lt;&lt;|</varname></primary></indexterm>
				<para>Are the Y values of the first bounding box strictly below of those of the second one?</para>
				<para><varname>stbox &lt;&lt;| stbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX Z((1,1,1),(2,2,2))' &lt;&lt;| stbox 'STBOX Z((3,3,3),(4,4,4))';
-- true
</programlisting>
			</listitem>

			<listitem id="stbox_above">
				<indexterm><primary><varname>|&gt;&gt;</varname></primary></indexterm>
				<para>Are the Y values of the first bounding box strictly above of those of the second one?</para>
				<para><varname>stbox |&gt;&gt; stbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX Z((3,3,3),(4,4,4))' |&gt;&gt; stbox 'STBOX Z((1,1,1),(2,2,2))';
-- true
</programlisting>
			</listitem>

			<listitem id="stbox_overbelow">
				<indexterm><primary><varname>&amp;&lt;|</varname></primary></indexterm>
				<para>Are the Y values of the first bounding box not above of those of the second one?</para>
				<para><varname>stbox &amp;&lt;| stbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX Z((1,1,1),(4,4,4))' &amp;&lt;| stbox 'STBOX Z((3,3,3),(4,4,4))';
-- true
</programlisting>
			</listitem>

			<listitem id="stbox_overabove">
				<indexterm><primary><varname>|&amp;&gt;</varname></primary></indexterm>
				<para>Are the Y values of the first bounding box not below of those of the second one?</para>
				<para><varname>stbox |&amp;&gt; stbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX Z((3,3,3),(4,4,4))' |&amp;&gt; stbox 'STBOX Z((1,1,1),(2,2,2))';
-- false
</programlisting>
			</listitem>

			<listitem id="stbox_front">
				<indexterm><primary><varname>&lt;&lt;/</varname></primary></indexterm>
				<para>Are the Z values of the first bounding box strictly in front of those of the second one?</para>
				<para><varname>stbox &lt;&lt;/ stbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX Z((1,1,1),(2,2,2))' &lt;&lt;/ stbox 'STBOX Z((3,3,3),(4,4,4))';
</programlisting>
			</listitem>

			<listitem id="stbox_back">
				<indexterm><primary><varname>/&gt;&gt;</varname></primary></indexterm>
				<para>Are the Z values of the first bounding box strictly back of those of the second one?</para>
				<para><varname>stbox /&gt;&gt; stbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX Z((3,3,3),(4,4,4))' /&gt;&gt; stbox 'STBOX Z((1,1,1),(2,2,2))';
-- true
</programlisting>
			</listitem>

			<listitem id="stbox_overfront">
				<indexterm><primary><varname>&amp;&lt;/</varname></primary></indexterm>
				<para>Are the Z values of the first bounding box not back of those of the second one?</para>
				<para><varname>stbox &amp;&lt;/ stbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX Z((1,1,1),(4,4,4))' &amp;&lt;/ stbox 'STBOX Z((3,3,3),(4,4,4))';
-- true
</programlisting>
			</listitem>

			<listitem id="stbox_overback">
				<indexterm><primary><varname>/&amp;&gt;</varname></primary></indexterm>
				<para>Are the Z values of the first bounding box not in front of those of the second one?</para>
				<para><varname>stbox /&amp;&gt; stbox: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX Z((3,3,3),(4,4,4))' /&amp;&gt; stbox 'STBOX Z((1,1,1),(2,2,2))';
-- true
</programlisting>
			</listitem>
		</itemizedlist>

		<para>The operators for the time dimension of the <varname>tbox</varname> and <varname>stbox</varname> types are as follows.</para>
		<itemizedlist>
			<listitem id="box_before">
				<indexterm><primary><varname>&lt;&lt;#</varname></primary></indexterm>
				<para>Are the T values of the first bounding box strictly before those of the second one?</para>
				<para><varname>box &lt;&lt;# box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2000-01-01,2000-01-02],(1,2))' &lt;&lt;#
  tbox 'TBOX T([2000-01-03,2000-01-04],(3,4))';
-- true
</programlisting>
			</listitem>

			<listitem id="box_after">
				<indexterm><primary><varname>#&gt;&gt;</varname></primary></indexterm>
				<para>Are the T values of the first bounding box strictly after those of the second one?</para>
				<para><varname>box #&gt;&gt; box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX T([2000-01-03,2000-01-04],((3,3),(4,4)))'  #&gt;&gt;
  stbox 'STBOX T([2000-01-01,2000-01-02],((1,1),(2,2)))';
-- true
</programlisting>
			</listitem>

			<listitem id="box_overbefore">
				<indexterm><primary><varname>&amp;&lt;#</varname></primary></indexterm>
				<para>Are the T values of the first bounding box not after those of the second one?</para>
				<para><varname>box &amp;&lt;# box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT tbox 'TBOX T([2000-01-01,2000-01-04],(1,4))' &amp;&lt;#
  tbox 'TBOX T([2000-01-03,2000-01-04],(3,4))';
-- true
</programlisting>
			</listitem>

			<listitem id="box_overafter">
				<indexterm><primary><varname>#&amp;&gt;</varname></primary></indexterm>
				<para>Are the T values of the first bounding box not before those of the second one?</para>
				<para><varname>box #&amp;&gt; box: boolean</varname></para>
				<programlisting xml:space="preserve">
SELECT stbox 'STBOX T([2000-01-01,2000-01-02],((1,1),(2,2)))' #&amp;&gt;
  stbox 'STBOX T([2000-01-01,2000-01-04],((1,1),(4,4)))';
-- true
</programlisting>
			</listitem>
		</itemizedlist>
	</sect1>

	<sect1 id ="indexing_box_types">
		<title>Indexing of Box Types</title>
		<para>GiST and SP-GiST indexes can be created for table columns of the <varname>tbox</varname> and <varname>stbox</varname> types. The GiST index implements an R-tree and the SP-GiST index implements an n-dimensional quad-tree. An example of creation of a GiST index in a column <varname>Box</varname> of type <varname>stbox</varname> in a table <varname>Trips</varname> is as follows:
			<programlisting xml:space="preserve">
CREATE TABLE Trips(TripID integer PRIMARY KEY, Trip tgeompoint, Box stbox);
CREATE INDEX Trips_Box_Idx ON Trips USING GIST(bbox);
</programlisting>
		</para>
		<para>A GiST or SP-GiST index can accelerate queries involving the following operators: <varname>&amp;&amp;</varname>, <varname>&lt;@</varname>, <varname>@&gt;</varname>, <varname>~=</varname>, <varname>-|-</varname>, <varname>&lt;&lt;</varname>, <varname>&gt;&gt;</varname>, <varname>&amp;&lt;</varname>, <varname>&amp;&gt;</varname>, <varname>&lt;&lt;|</varname>, <varname>|&gt;&gt;</varname>, <varname>&amp;&lt;|</varname>, <varname>|&amp;&gt;</varname>,  <varname>&lt;&lt;/</varname>, <varname>/&gt;&gt;</varname>, <varname>&amp;&lt;/</varname>, <varname>/&amp;&gt;</varname>, <varname>&lt;&lt;#</varname>, <varname>#&gt;&gt;</varname>, <varname>&amp;&lt;#</varname>, and <varname>#&amp;&gt;</varname>.</para>

		<para>In addition, B-tree indexes can be created for table columns of a bounding box type. For these index types, basically the only useful operation is equality. There is a B-tree sort ordering defined for values of bounding box types, with corresponding <varname>&lt;</varname> and <varname>&gt;</varname> operators, but the ordering is rather arbitrary and not usually useful in the real world. The B-tree support is primarily meant to allow sorting internally in queries, rather than creation of actual indexes.</para>
	</sect1>
</chapter>
