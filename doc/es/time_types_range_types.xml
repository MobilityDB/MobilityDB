<?xml version="1.0" encoding="UTF-8"?>
<!--
   ****************************************************************************
    MobilityDB Manual
    Copyright(c) MobilityDB Contributors

    This documentation is licensed under a Creative Commons Attribution-Share
    Alike 3.0 License: https://creativecommons.org/licenses/by-sa/3.0/
   ****************************************************************************
-->
<chapter id="time_types_range_types">
	<title>Tipos de tiempo y tipos de rango</title>

	<para>
		Los tipos temporales se basan en cuatro tipos de tiempo: el tipo <varname>timestamptz</varname> proporcionado por PostgreSQL y tres nuevos tipos que son <varname>period</varname>, <varname>timestampset</varname> y <varname>periodset</varname>.
	</para>

	<para>
		El tipo <varname>period</varname> es una versión especializada del tipo <varname>tstzrange</varname> (abreviatura de rango de marcas de tiempo con zona horaria) proporcionado por PostgreSQL. El tipo <varname>period</varname> tiene una funcionalidad similar al tipo <varname>tstzrange</varname> pero tiene una implementación más eficiente, en particular es de longitud fija mientras que el tipo <varname>tstzrange</varname> es de longitud variable. Además, los períodos vacíos y los límites infinitos no están permitidos en valores de <varname>period</varname>, mientras están permitidos en valores de <varname>tstzrange</varname>.
	</para>

	<para>
		Un valor del tipo <varname>period</varname> tiene dos límites, el límite inferior y el límite superior, que son valores de <varname>timestamptz</varname>. Los límites pueden ser inclusivos o exclusivos. Un límite inclusivo significa que el instante límite está incluido en el período, mientras que un límite exclusivo significa que el instante límite no está incluido en el período. En el formato textual de un valor de <varname>period</varname>, los límites inferiores inclusivos y exclusivos están representados, respectivamente, por &ldquo;<varname>[</varname>&rdquo; y &ldquo;<varname>(</varname>&rdquo;. Asimismo, los límites superiores inclusivos y exclusivos se representan, respectivamente, por &ldquo;<varname>]</varname>&rdquo; y &ldquo;<varname>)</varname>&rdquo;. En un valor de <varname>period</varname>, el límite inferior debe ser menor o igual que el límite superior. Un valor de <varname>period</varname> con límites iguales e inclusivos se llama <emphasis>período instantáneo</emphasis> y corresponde a un valor de <varname>timestamptz</varname>. Ejemplos de valores de <varname>period</varname> son como sigue:
	</para>
	<programlisting xml:space="preserve">
SELECT period '[2012-01-01 08:00:00, 2012-01-03 09:30:00)';
-- Período instantáneo
SELECT period '[2012-01-01 08:00:00, 2012-01-01 08:00:00]';
-- Período erróneo: límites inválidos
SELECT period '[2012-01-01 08:10:00, 2012-01-01 08:00:00]';
-- Período erróneo: período vacío
SELECT period '[2012-01-01 08:00:00, 2012-01-01 08:00:00)';
</programlisting>

	<para>
		El tipo <varname>timestampset</varname> representa un conjunto de valores <varname>timestamptz</varname> diferentes. Un valor de <varname>timestampset</varname> debe contener al menos un elemento, en cuyo caso corresponde a un valor de <varname>timestamptz</varname>. Los elementos que componen un valor de <varname>timestampset</varname> deben estar ordenados. Ejemplos de valores de <varname>timestampset</varname> son como sigue:
	</para>
	<programlisting xml:space="preserve">
SELECT timestampset '{2012-01-01 08:00:00, 2012-01-03 09:30:00}';
-- Conjunto unitario de marcas de tiempo
SELECT timestampset '{2012-01-01 08:00:00}';
-- Conjunto de marcas de tiempo erróneo: elementos desordenados
SELECT timestampset '{2012-01-01 08:10:00, 2012-01-01 08:00:00}';
-- Conjunto de marcas de tiempo erróneo: elementos duplicados
SELECT timestampset '{2012-01-01 08:00:00, 2012-01-01 08:00:00}';
</programlisting>

	<para>
		Finalmente, el tipo <varname>periodset</varname> representa un conjunto de valores disjuntos de <varname>period</varname>. Un valor de <varname>periodset</varname> debe contener al menos un elemento, en cuyo caso corresponde a un valor de <varname>period</varname>. Los elementos que componen un valor de <varname>periodset</varname> deben estar ordenados. Ejemplos de valores de <varname>periodset</varname> son come sigue:
	</para>
	<programlisting xml:space="preserve">
SELECT periodset '{[2012-01-01 08:00:00, 2012-01-01 08:10:00],
  [2012-01-01 08:20:00, 2012-01-01 08:40:00]}';
-- Conjunto unitario de períodos
SELECT periodset '{[2012-01-01 08:00:00, 2012-01-01 08:10:00]}';
-- Conjunto de períodos erróneo: elementos desordenados
SELECT periodset '{[2012-01-01 08:20:00, 2012-01-01 08:40:00],
  [2012-01-01 08:00:00, 2012-01-01 08:10:00]}';
-- Conjunto de períodos erróneo: elementos superpuestos
SELECT periodset '{[2012-01-01 08:00:00, 2012-01-01 08:10:00],
  [2012-01-01 08:05:00, 2012-01-01 08:15:00]}';
</programlisting>

	<para>
		Los valores del tipo <varname>periodset</varname> son convertidos en <emphasis>forma normal</emphasis> de modo que los valores equivalentes tengan representaciones idénticas. Para ello, los valores de períodos consecutivos que son adyacentes se fusionan cuando es posible. Un ejemplo de transformación a forma normal es el siguiente:
	</para>
	<programlisting xml:space="preserve">
SELECT periodset '{[2012-01-01 08:00:00, 2012-01-01 08:10:00),
  [2012-01-01 08:10:00, 2012-01-01 08:10:00], (2012-01-01 08:10:00, 2012-01-01 08:20:00]}';
-- "{[2012-01-01 08:00:00+00,2012-01-01 08:20:00+00]}"
</programlisting>

	<para>
		Además de los tipos de rango nativos proporcionados por PostgreSQL, MobilityDB define dos tipos de rango adicionales: <varname>intrange</varname> (otro nombre para <varname>int4range</varname>) y <varname>floatrange</varname>.
	</para>

	<sect1 id ="functions_operations_time_types">
		<title>Funciones y operadores para tipos de tiempo y de rango</title>

		<para>
			A continuación presentamos las funciones y operadores para tipos de tiempo y de rango. Estas funciones y operadores son polimórficos, es decir, sus argumentos pueden ser de varios tipos y el tipo de resultado puede depender del tipo de los argumentos. Para expresar esto en la firma de los operadores, utilizamos la siguiente notación:
		</para>
		<itemizedlist>
			<listitem>
				<para>Un conjunto de tipos como <varname>{period,timestampset,periodset}</varname> representa cualquiera de los tipos enumerados,</para>
			</listitem>
			<listitem>
				<para><varname>time</varname> representa cualquier tipo de tiempo, es decir, <varname>timestamptz</varname>, <varname>period</varname>, <varname>timestampset</varname> o <varname>periodset</varname>,</para>
			</listitem>
			<listitem>
				<para><varname>number</varname> representa cualquier tipo de número, es decir, <varname>integer</varname> o <varname>float</varname>,</para>
			</listitem>
			<listitem>
				<para><varname>range</varname> representa cualquier rango de números, es decir, <varname>intrange</varname> o <varname>floatrange</varname>.</para>
			</listitem>
			<listitem>
				<para><varname>type[]</varname> representa una matriz de <varname>type</varname>.</para>
			</listitem>
		</itemizedlist>

		<para>
			Como ejemplo, la firma del operador contiene (<varname>@&gt;</varname>) es como sigue:
		</para>
		<programlisting xml:space="preserve">
{timestampset,period,periodset} @&gt; time
</programlisting>
		<para>
			A continuación, por concisión, la parte de tiempo de las marcas de tiempo se omite en los ejemplos. Recuerde que en ese caso PostgreSQL asume el tiempo <varname>00:00:00</varname>.
		</para>

		<sect2>
			<title>Funciones de constructor</title>

			<para>El tipo <varname>period</varname> tiene una función constructora que acepta dos o cuatro argumentos. La forma de dos argumentos construye un punto en <emphasis>forma normal</emphasis>, es decir, con límite inferior inclusivo y límite superior exclusivo. La forma de cuatro argumentos construye un período con límites especificados por el tercer y cuarto argumento, que son valores booleanos que indican, respectivamente, si los límites izquierdo y derecho son inclusivos o no.
			</para>
			<itemizedlist>
				<listitem id="period">
					<indexterm><primary><varname>period</varname></primary></indexterm>
					<para>Constructor para <varname>period</varname></para>
					<para><varname>period(timestamptz,timestamptz,left_inc=true,right_inc=false): period</varname></para>
					<programlisting xml:space="preserve">
-- Período definido con dos argumentos
SELECT period('2012-01-01 08:00:00', '2012-01-03 08:00:00');
-- [2012-01-01 08:00:00+01, 2012-01-03 08:00:00+01)
-- Período definido con cuatro argumentos
SELECT period('2012-01-01 08:00:00', '2012-01-03 09:30:00', false, true);
-- (2012-01-01 08:00:00+01, 2012-01-03 09:30:00+01]
</programlisting>
				</listitem>
			</itemizedlist>

			<para>El tipo <varname>timestampset</varname> tiene una función constructora que acepta un solo argumento que es una matriz de valores de <varname>timestamptz</varname>.
			</para>
			<itemizedlist>
				<listitem id="timestampset">
					<indexterm><primary><varname>timestampset</varname></primary></indexterm>
					<para>Constructor para <varname>timestampset</varname></para>
					<para><varname>timestampset(timestamptz[]): timestampset</varname></para>
					<programlisting xml:space="preserve">
SELECT timestampset(ARRAY[timestamptz '2012-01-01 08:00:00', '2012-01-03 09:30:00']);
-- "{2012-01-01 08:00:00+00, 2012-01-03 09:30:00+00}"
</programlisting>
				</listitem>
			</itemizedlist>

			<para>El tipo <varname>periodset</varname> tiene una función constructora que acepta un solo argumento que es una matriz de valores de <varname>period</varname>.
			</para>
			<itemizedlist>
				<listitem id="periodset">
					<indexterm><primary><varname>periodset</varname></primary></indexterm>
					<para>Constructor para <varname>periodset</varname></para>
					<para><varname>periodset(period[]): periodset</varname></para>
					<programlisting xml:space="preserve">
SELECT periodset(ARRAY[period '[2012-01-01 08:00:00, 2012-01-01 08:10:00]',
-- '[2012-01-01 08:20:00, 2012-01-01 08:40:00]']);
</programlisting>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2>
			<title>Conversión de tipos</title>
			<para>Los valores de los tipos <varname>timestamptz</varname>, <varname>tstzrange</varname> o los tipos de tiempo se pueden convertir entre sí utilizando la función <varname>CAST</varname> o utilizando la notación <varname>::</varname>.
			</para>

			<itemizedlist>
				<listitem id="timestamptz_cast">
					<indexterm><primary><varname>::</varname></primary></indexterm>
					<para>Convertir un <varname>timestamptz</varname>a otro tipo de tiempo</para>
					<para><varname>timestamptz::timestampset</varname></para>
					<para><varname>timestamptz::period</varname></para>
					<para><varname>timestamptz::periodset</varname></para>
					<programlisting xml:space="preserve">
SELECT CAST(timestamptz '2012-01-01 08:00:00' AS timestampset);
-- "{2012-01-01 08:00:00+01}"
SELECT CAST(timestamptz '2012-01-01 08:00:00' AS period);
-- "[2012-01-01 08:00:00+01, 2012-01-01 08:00:00+01]"
SELECT CAST(timestamptz '2012-01-01 08:00:00' AS periodset);
-- "{[2012-01-01 08:00:00+01, 2012-01-01 08:00:00+01]}"
</programlisting>
				</listitem>
				<listitem id="timestampset_cast">
					<indexterm><primary><varname>::</varname></primary></indexterm>
					<para>Convertir un <varname>timestampset</varname> a un <varname>periodset</varname></para>
					<para><varname>timestampset::periodset</varname></para>
					<programlisting xml:space="preserve">
SELECT CAST(timestampset '{2012-01-01 08:00:00, 2012-01-01 08:15:00,
  2012-01-01 08:25:00}' AS periodset);
-- "{[2012-01-01 08:00:00+01, 2012-01-01 08:00:00+01],
  [2012-01-01 08:15:00+01, 2012-01-01 08:15:00+01],
  [2012-01-01 08:25:00+01, 2012-01-01 08:25:00+01]}"
</programlisting>
				</listitem>
				<listitem id="period_cast">
					<indexterm><primary><varname>::</varname></primary></indexterm>
					<para>Convertir un <varname>period</varname> a otro tipo de tiempo</para>
					<para><varname>period::periodset</varname></para>
					<para><varname>period::tstzrange</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2012-01-01 08:00:00, 2012-01-01 08:30:00)'::periodset;
-- "{[2012-01-01 08:00:00+01, 2012-01-01 08:30:00+01)}"
SELECT period '[2012-01-01 08:00:00, 2012-01-01 08:30:00)'::tstzrange;
-- "["2012-01-01 08:00:00+01","2012-01-01 08:30:00+01")"
</programlisting>
				</listitem>
				<listitem id="tstzrange_cast">
					<indexterm><primary><varname>::</varname></primary></indexterm>
					<para>Convertir un <varname>tstzrange</varname> a un <varname>period</varname></para>
					<para><varname>tstzrange::period</varname></para>
					<programlisting xml:space="preserve">
SELECT tstzrange '[2012-01-01 08:00:00, 2012-01-01 08:30:00)'::period;
-- "[2012-01-01 08:00:00+01, 2012-01-01 08:30:00+01)"
</programlisting>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2>
			<title>Funciones de accesor</title>

			<itemizedlist>
				<listitem id="time_memSize">
					<indexterm><primary><varname>memSize</varname></primary></indexterm>
					<para>Obtener el tamaño de la memoria en bytes</para>
					<para><varname>memSize({timestampset,periodset}): integer</varname></para>
					<programlisting xml:space="preserve">
SELECT memSize(timestampset '{2012-01-01, 2012-01-02, 2012-01-03}');
-- 104
SELECT memSize(periodset '{[2012-01-01, 2012-01-02], [2012-01-03, 2012-01-04],
  [2012-01-05, 2012-01-06]}');
-- 136
</programlisting>
				</listitem>

				<listitem id="lower">
					<indexterm><primary><varname>lower</varname></primary></indexterm>
					<para>Obtener el límite inferior</para>
					<para><varname>lower(period): timestamptz</varname></para>
					<programlisting xml:space="preserve">
SELECT lower(period '[2011-01-01, 2011-01-05)');
-- "2011-01-01"
</programlisting>
				</listitem>

				<listitem id="upper">
					<indexterm><primary><varname>upper</varname></primary></indexterm>
					<para>Obtener el límite superior</para>
					<para><varname>upper(period): timestamptz</varname></para>
					<programlisting xml:space="preserve">
SELECT upper(period '[2011-01-01, 2011-01-05)');
-- "2011-01-05"
</programlisting>
				</listitem>

				<listitem id="lower_inc">
					<indexterm><primary><varname>lower_inc</varname></primary></indexterm>
					<para>¿Es el límite inferior inclusivo?</para>
					<para><varname>lower_inc(period): boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT lower_inc(period '[2011-01-01, 2011-01-05)');
-- true
</programlisting>
				</listitem>

				<listitem id="upper_inc">
					<indexterm><primary><varname>upper_inc</varname></primary></indexterm>
					<para>¿Es el límite superior inclusivo?</para>
					<para><varname>upper_inc(period): boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT upper_inc(period '[2011-01-01, 2011-01-05)');
-- false
</programlisting>
				</listitem>

				<listitem id="time_duration">
					<indexterm><primary><varname>duration</varname></primary></indexterm>
					<para>Obtener el intervalo de tiempo</para>
					<para><varname>duration({period,periodset}): interval</varname></para>
					<programlisting xml:space="preserve">
SELECT duration(period '[2012-01-01, 2012-01-03)');
-- "2 days"
SELECT duration(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-05)}');
-- "3 days"
</programlisting>
				</listitem>

				<listitem id="time_timespan">
					<indexterm><primary><varname>timespan</varname></primary></indexterm>
					<para>Obtener el intervalo de tiempo ignorando las posibles brechas de tiempo</para>
					<para><varname>timespan({timestampset,period,periodset}): interval</varname></para>
					<programlisting xml:space="preserve">
SELECT timespan(timestampset '{2012-01-01, 2012-01-03}');
-- "2 days"
SELECT timespan(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-05)}');
-- "4 days"
</programlisting>
				</listitem>

				<listitem id="time_period">
					<indexterm><primary><varname>period</varname></primary></indexterm>
					<para>Obtener el período en el que se define el conjunto de marcas de tiempo o el conjunto de períodos ignorando las posibles brechas de tiempo</para>
					<para><varname>period({timestampset,periodset}): period</varname></para>
					<programlisting xml:space="preserve">
SELECT period(timestampset '{2012-01-01, 2012-01-03, 2012-01-05}');
-- "[2012-01-01, 2012-01-05]"
SELECT period(periodset '{[2012-01-01, 2012-01-02), [2012-01-03, 2012-01-04)}');
-- "[2012-01-01, 2012-01-04)"
</programlisting>
				</listitem>

				<listitem id="time_numTimestamps">
					<indexterm><primary><varname>numTimestamps</varname></primary></indexterm>
					<para>Obtener el número de marcas de tiempo diferentes</para>
					<para><varname>numTimestamps({timestampset,periodset}): integer</varname></para>
					<programlisting xml:space="preserve">
SELECT numTimestamps(timestampset '{2012-01-01, 2012-01-03, 2012-01-04}');
-- 3
SELECT numTimestamps(periodset '{[2012-01-01, 2012-01-03), (2012-01-03, 2012-01-05)}');
-- 3
</programlisting>
				</listitem>

				<listitem id="time_startTimestamp">
					<indexterm><primary><varname>startTimestamp</varname></primary></indexterm>
					<para>Obtener la marca de tiempo inicial</para>
					<para><varname>startTimestamp({timestampset,periodset}): timestamptz</varname></para>
					<para>La función no tiene en cuenta si los límites son inclusivos o no.</para>
					<programlisting xml:space="preserve">
SELECT startTimestamp(periodset '{[2012-01-01, 2012-01-03), (2012-01-03, 2012-01-05)}');
-- "2012-01-01"
</programlisting>
				</listitem>

				<listitem id="time_endTimestamp">
					<indexterm><primary><varname>endTimestamp</varname></primary></indexterm>
					<para>Obtener la marca de tiempo final</para>
					<para><varname>endTimestamp({timestampset,periodset}): timestamptz</varname></para>
					<para>La función no tiene en cuenta si los límites son inclusivos o no.</para>
					<programlisting xml:space="preserve">
SELECT endTimestamp(periodset '{[2012-01-01, 2012-01-03), (2012-01-03, 2012-01-05)}');
-- "2012-01-05"
</programlisting>
				</listitem>

				<listitem id="time_timestampN">
					<indexterm><primary><varname>timestampN</varname></primary></indexterm>
					<para>Obtener la enésima marca de tiempo diferente</para>
					<para><varname>timestampN({timestampset,periodset},integer): timestamptz</varname></para>
					<para>La función no tiene en cuenta si los límites son inclusivos o no.</para>
					<programlisting xml:space="preserve">
SELECT timestampN(periodset '{[2012-01-01, 2012-01-03), (2012-01-03, 2012-01-05)}', 3);
-- "2012-01-04"
</programlisting>
				</listitem>

				<listitem id="time_timestamps">
					<indexterm><primary><varname>timestamps</varname></primary></indexterm>
					<para>Obtener las marcas de tiempo diferentes</para>
					<para><varname>timestamps({timestampset,periodset}): timestampset</varname></para>
					<para>La función no tiene en cuenta si los límites son inclusivos o no.</para>
					<programlisting xml:space="preserve">
SELECT timestamps(periodset '{[2012-01-01, 2012-01-03), (2012-01-03, 2012-01-05)}');
-- "{"2012-01-01", "2012-01-03", "2012-01-05"}"
</programlisting>
				</listitem>

				<listitem id="numPeriods">
					<indexterm><primary><varname>numPeriods</varname></primary></indexterm>
					<para>Obtener el número de períodos</para>
					<para><varname>numPeriods(periodset): integer</varname></para>
					<programlisting xml:space="preserve">
SELECT numPeriods(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-04],
  [2012-01-05, 2012-01-06)}');
-- 3
</programlisting>
				</listitem>

				<listitem id="startPeriod">
					<indexterm><primary><varname>startPeriod</varname></primary></indexterm>
					<para>Obtener el período inicial</para>
					<para><varname>startPeriod(periodset): period</varname></para>
					<programlisting xml:space="preserve">
SELECT startPeriod(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-04],
  [2012-01-05, 2012-01-06)}');
-- "[2012-01-01,2012-01-03)"
</programlisting>
				</listitem>

				<listitem id="endPeriod">
					<indexterm><primary><varname>endPeriod</varname></primary></indexterm>
					<para>Obtener el período final</para>
					<para><varname>endPeriod(periodset): period</varname></para>
					<programlisting xml:space="preserve">
SELECT endPeriod(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-04],
  [2012-01-05, 2012-01-06)}');
-- "[2012-01-05,2012-01-06)"
</programlisting>
				</listitem>

				<listitem id="periodN">
					<indexterm><primary><varname>periodN</varname></primary></indexterm>
					<para>Obtener el enésimo período</para>
					<para><varname>periodN(periodset,integer): period</varname></para>
					<programlisting xml:space="preserve">
SELECT periodN(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-04],
  [2012-01-05, 2012-01-06)}', 2);
-- "[2012-01-04,2012-01-04]"
</programlisting>
				</listitem>

				<listitem id="periods">
					<indexterm><primary><varname>periods</varname></primary></indexterm>
					<para>Obtener los períodos</para>
					<para><varname>periods(periodset): period[]</varname></para>
					<programlisting xml:space="preserve">
SELECT periods(periodset '{[2012-01-01, 2012-01-03), [2012-01-04, 2012-01-04],
  [2012-01-05, 2012-01-06)}');
-- "{"[2012-01-01,2012-01-03)", "[2012-01-04,2012-01-04]", "[2012-01-05,2012-01-06)"}"
</programlisting>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2 id ="modification_time_tyes">
			<title>Funciones de modificación</title>

			<itemizedlist>
				<listitem id="time_shift">
					<indexterm><primary><varname>shift</varname></primary></indexterm>
					<para>Desplazar el valor de tiempo con un intervalo</para>
					<para><varname>shift({timestampset,period,periodset}): {timestampset,period,periodset}</varname></para>
					<programlisting xml:space="preserve">
SELECT shift(timestampset '{2001-01-01, 2001-01-03, 2001-01-05}', '1 day'::interval);
-- "{2001-01-02, 2001-01-04, 2001-01-06}"
SELECT shift(period '[2001-01-01, 2001-01-03]', '1 day'::interval);
-- "[2001-01-02, 2001-01-04]"
SELECT shift(periodset '{[2001-01-01, 2001-01-03], [2001-01-04, 2001-01-05]}',
  '1 day'::interval);
-- "{[2001-01-02, 2001-01-04], [2001-01-05, 2001-01-06]}"
</programlisting>
				</listitem>

			<listitem id="time_tscale">
				<indexterm><primary><varname>tscale</varname></primary></indexterm>
				<para>Escalear el valor de tiempo con un intervalo. Si el lapso de tiempo del valor de tiempo es cero (por ejemplo, para un conjunto instantáneo único), el resultado es el valor de tiempo. El intervalo dado debe ser estrictamente mayor que cero.</para>
				<para><varname>tscale({timestampset,period,periodset},interval): {timestampset,period,periodset}</varname></para>
				<programlisting xml:space="preserve">
SELECT tscale(timestampset '{2001-01-01}', '1 day');
-- {2001-01-01}
SELECT tscale(timestampset '{2001-01-01, 2001-01-03, 2001-01-05}', '2 days');
-- {2001-01-01, 2001-01-02, 2001-01-03}
SELECT tscale(period '[2001-01-01, 2001-01-03]', '1 day');
-- [2001-01-01, 2001-01-02]
SELECT tscale(periodset '{[2001-01-01, 2001-01-03], [2001-01-04, 2001-01-05]}', '1 day');
-- {[2001-01-01 00:00:00, 2001-01-01 12:00:00],
  [2001-01-01 18:00:00, 2001-01-02 00:00:00]}
SELECT tscale(timestampset '{2001-01-01}', '-1 day');
-- ERROR:  The duration must be a positive interval: -1 days
</programlisting>
			</listitem>

			<listitem id="time_shiftTscale">
				<indexterm><primary><varname>shiftTscale</varname></primary></indexterm>
				<para>Desplazar y escalear el valor de tiempo con los dos intervalos. Esta función combina en un solo paso las funciones <link linkend="time_shift"><varname>shift</varname></link> y <link linkend="time_tscale"><varname>tscale</varname></link>.</para>
				<para><varname>shiftTscale({timestampset,period,periodset},interval,interval):</varname></para>
				<para><varname>  {timestampset,period,periodset}</varname></para>
				<programlisting xml:space="preserve">
SELECT shiftTscale(timestampset '{2001-01-01}', '1 day', '1 day');
-- {2001-01-02}
SELECT shiftTscale(timestampset '{2001-01-01, 2001-01-03, 2001-01-05}', '1 day','2 days');
-- {2001-01-02, 2001-01-03, 2001-01-04}
SELECT shiftTscale(period '[2001-01-01, 2001-01-03]', '1 day', '1 day');
-- [2001-01-02, 2001-01-03]
SELECT shiftTscale(periodset '{[2001-01-01, 2001-01-03], [2001-01-04, 2001-01-05]}',
  '1 day', '1 day');
-- {[2001-01-02 00:00:00, 2001-01-02 12:00:00],
  [2001-01-02 18:00:00, 2001-01-03 00:00:00]}
</programlisting>
			</listitem>

				<listitem id="floatrange_round">
					<indexterm><primary><varname>round</varname></primary></indexterm>
					<para>Redondear los límites de un rango flotante a un número de decimales</para>
					<para><varname>round(floatrange,integer): floatrange</varname></para>
					<programlisting xml:space="preserve">
SELECT round(floatrange '[1.123456789,2.123456789)', 3);
-- "[1.123,2.123)"
SELECT round(floatrange '(,2.123456789]', 3);
-- "(,2.123]"
SELECT round(floatrange '[1.123456789, inf)', 3);
-- "[1.123,Infinity)"
</programlisting>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2 id="time_comp_operators">
			<title>Operadores de comparación</title>

			<para>Los operadores de comparación (<varname>=</varname>, <varname>&lt;</varname>, etc.) requieren que los argumentos izquierdo y derecho sean del mismo tipo. Exceptuando la igualdad y la no igualdad, los otros operadores de comparación no son útiles en el mundo real, pero permiten construir índices de árbol B en tipos de tiempo. Para los valores de período, los operadores comparan primero el límite inferior y luego el límite superior. Para los valores de conjunto de marcas de tiempo y conjunto de períodos, los operadores comparan primero los períodos delimitadores y, si son iguales, comparan los primeros N instantes o períodos, donde N es el mínimo del número de instantes o períodos que componen ambos valores.</para>

			<para>Los operadores de comparación disponibles para los tipos de tiempo se dan a continuación.</para>

			<itemizedlist>
				<listitem id="time_eq">
					<indexterm><primary><varname>=</varname></primary></indexterm>
					<para>¿Son iguales los valores de tiempo?</para>
					<para><varname>time = time: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2012-01-01, 2012-01-04)' = period '[2012-01-01, 2012-01-04)';
-- true
</programlisting>
				</listitem>

				<listitem id="time_ne">
					<indexterm><primary><varname>&lt;&gt;</varname></primary></indexterm>
					<para>¿Son diferentes los valores de tiempo?</para>
					<para><varname>time &lt;&gt; time: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2012-01-01, 2012-01-04)' &lt;&gt; period '[2012-01-03, 2012-01-05)';
-- true
</programlisting>
				</listitem>

				<listitem id="time_lt">
					<indexterm><primary><varname>&lt;</varname></primary></indexterm>
					<para>¿Es el primer valor de tiempo menor que el segundo?</para>
					<para><varname>time &lt; time: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT timestampset '{2012-01-01, 2012-01-04}' &lt; timestampset '{2012-01-01, 2012-01-05}';
-- true
</programlisting>
				</listitem>

				<listitem id="time_gt">
					<indexterm><primary><varname>&gt;</varname></primary></indexterm>
					<para>¿Es el primer valor de tiempo mayor que el segundo?</para>
					<para><varname>time &gt; time: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2012-01-03, 2012-01-04)' &gt; period '[2012-01-02, 2012-01-05)';
-- true
</programlisting>
				</listitem>

				<listitem id="time_le">
					<indexterm><primary><varname>&lt;=</varname></primary></indexterm>
					<para>¿Es el primer valor de tiempo menor o igual que el segundo?</para>
					<para><varname>time &lt;= time: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT periodset '{[2012-01-01, 2012-01-04)}' &lt;=
  periodset '{[2012-01-01, 2012-01-05), [2012-01-06, 2012-01-07)}';
-- true
</programlisting>
				</listitem>

				<listitem id="time_ge">
					<indexterm><primary><varname>&gt;=</varname></primary></indexterm>
					<para>¿Es el primer valor de tiempo mayor o igual que el segundo?</para>
					<para><varname>time &gt;= time: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2012-01-03, 2012-01-05)' &gt;= period '[2012-01-03, 2012-01-04)';
-- true
</programlisting>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2 id="time_set_operators">
			<title>Operadores de conjuntos</title>

			<para>Los operadores de conjuntos disponibles para los tipos de tiempo se dan a continuación.</para>

			<itemizedlist>
				<listitem id="time_union">
					<indexterm><primary><varname>+</varname></primary></indexterm>
					<para>Unión de valores de tiempo</para>
					<para><varname>time + time: time</varname></para>
					<programlisting xml:space="preserve">
SELECT timestampset '{2011-01-01, 2011-01-03, 2011-01-05}' +
  timestampset '{2011-01-03, 2011-01-06}';
-- "{2011-01-01, 2011-01-03, 2011-01-05, 2011-01-06}"
SELECT period '[2011-01-01, 2011-01-05)' + period '[2011-01-03, 2011-01-07)';
-- "[2011-01-01, 2011-01-07)"
SELECT periodset '{[2011-01-01, 2011-01-03), [2011-01-04, 2011-01-05)}' +
  period '[2011-01-03, 2011-01-04)';
-- "{[2011-01-01, 2011-01-05)}"
</programlisting>
				</listitem>

				<listitem id="time_intersection">
					<indexterm><primary><varname>*</varname></primary></indexterm>
					<para>Intersección de valores de tiempo</para>
					<para><varname>time * time: time</varname></para>
					<programlisting xml:space="preserve">
SELECT timestampset '{2011-01-01, 2011-01-03}' * timestampset '{2011-01-03, 2011-01-05}';
-- "{2011-01-03}"
SELECT period '[2011-01-01, 2011-01-05)' * period '[2011-01-03, 2011-01-07)';
-- "[2011-01-03, 2011-01-05)"
</programlisting>
				</listitem>

				<listitem id="time_difference">
					<indexterm><primary><varname>-</varname></primary></indexterm>
					<para>Diferencia de valores de tiempo</para>
					<para><varname>time - time: time</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2011-01-01, 2011-01-05)' - period '[2011-01-03, 2011-01-07)';
-- "[2011-01-01, 2011-01-03)"
SELECT period '[2011-01-01, 2011-01-05]' - period '[2011-01-03, 2011-01-04]'
-- "{[2011-01-01,2011-01-03), (2011-01-04,2011-01-05]}"
SELECT periodset '{[2011-01-01, 2011-01-06], [2011-01-07, 2011-01-10]}' -
  periodset '{[2011-01-02, 2011-01-03], [2011-01-04, 2011-01-05],
  [2011-01-08, 2011-01-09]}';
-- "{[2011-01-01,2011-01-02), (2011-01-03,2011-01-04), (2011-01-05,2011-01-06],
  [2011-01-07,2011-01-08), (2011-01-09,2011-01-10]}"
</programlisting>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2 id="time_topo_operators">
			<title>Operadores topológicos</title>
			<para>A continuación se presentan los operadores topológicos disponibles para los tipos de tiempo.</para>

			<itemizedlist>
				<listitem id="time_overlaps">
					<indexterm><primary><varname>&amp;&amp;</varname></primary></indexterm>
					<para>¿Se superponen los valores de tiempo (tienen instantes en común)?</para>
					<para><varname>{timestampset,period,periodset} &amp;&amp; {timestampset,period,periodset}: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2011-01-01, 2011-01-05)' &amp;&amp; period '[2011-01-02, 2011-01-07)';
-- true
</programlisting>
				</listitem>

				<listitem id="time_contains">
					<indexterm><primary><varname>@&gt;</varname></primary></indexterm>
					<para>¿Contiene el primer valor de tiempo el segundo?</para>
					<para><varname>{timestampset,period,periodset} @&gt; time: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2011-01-01, 2011-05-01)' @&gt; period '[2011-02-01, 2011-03-01)';
-- true
SELECT period '[2011-01-01, 2011-05-01)' @&gt; timestamptz '2011-02-01';
-- true
</programlisting>
				</listitem>

				<listitem id="time_containedby">
					<indexterm><primary><varname>&lt;@</varname></primary></indexterm>
					<para>¿Está el primer valor de tiempo contenido en el segundo?</para>
					<para><varname>time &lt;@ {timestampset,period,periodset}: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2011-02-01, 2011-03-01)' &lt;@ period '[2011-01-01, 2011-05-01)';
-- true
SELECT timestamptz '2011-01-10' &lt;@ period '[2011-01-01, 2011-05-01)';
-- true
</programlisting>
				</listitem>

				<listitem id="time_adjacent">
					<indexterm><primary><varname>-|-</varname></primary></indexterm>
					<para>¿Es el primer valor de tiempo adyacente al segundo?</para>
					<para><varname>time -|- time: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2011-01-01, 2011-01-05)' -|- timestampset '{2011-01-05, 2011-01-07}';
-- true
SELECT periodset '{[2012-01-01, 2012-01-02]}' -|- period '[2012-01-02, 2012-01-03)';
-- false
</programlisting>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2 id="time_relpos_operators">
			<title>Operadores de posición relativa</title>

			<para>En PostgreSQL, los operadores de rango <varname>&lt;&lt;</varname>, <varname>&amp;&lt;</varname>, <varname>&gt;&gt;</varname>, <varname>&amp;&gt;</varname> y <varname>-|-</varname> solo aceptan rangos como argumento izquierdo o derecho. Extendimos estos operadores para rangos númericos de modo que un argumento puede ser un número entero o flotante.</para>

			<para>Los operadores de posición relativa disponibles para los tipos de tiempo y tipos de rango se dan a continuación.</para>

			<itemizedlist>
				<listitem id="range_left">
					<indexterm><primary><varname>&lt;&lt;</varname></primary></indexterm>
					<para>¿Está el primer número o valor de rango estrictamente a la izquierda del segundo?</para>
					<para><varname>{number,range} &lt;&lt; {number,range}: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT intrange '[15, 20)' &lt;&lt; 20;
-- true
</programlisting>
				</listitem>

				<listitem id="range_right">
					<indexterm><primary><varname>&gt;&gt;</varname></primary></indexterm>
					<para>¿Está el primer número o valor de rango estrictamente a la derecha del segundo?</para>
					<para><varname>{number,range} &gt;&gt; {number,range}: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT intrange '[15, 20)' &gt;&gt; 10;
-- true
</programlisting>
				</listitem>

				<listitem id="range_overleft">
					<indexterm><primary><varname>&amp;&lt;</varname></primary></indexterm>
					<para>¿No está el primer número o valor de rango a la derecha del segundo?</para>
					<para><varname>{number,range} &amp;&lt; {number,range}: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT intrange '[15, 20)' &amp;&lt; 18;
-- false
</programlisting>
				</listitem>

				<listitem id="range_overright">
					<indexterm><primary><varname>&amp;&gt;</varname></primary></indexterm>
					<para>¿No está el primer número o valor de rango a la izquierda del segundo?</para>
					<para><varname>{number,range} &amp;&gt; {number,range}: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2011-01-01, 2011-01-03)' &amp;&gt; period '[2011-01-01, 2011-01-05)';
-- true
SELECT intrange '[15, 20)' &amp;&gt; 30;
-- true
</programlisting>
				</listitem>

				<listitem id="range_adjacent">
					<indexterm><primary><varname>-|-</varname></primary></indexterm>
					<para>¿Es el primer número o valor de rango adyacente al segundo?</para>
					<para><varname>{number,range} -|- {number,range}: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT floatrange '[15, 20)' -|- 20;
-- true
</programlisting>
				</listitem>

				<listitem id="time_before">
					<indexterm><primary><varname>&lt;&lt;#</varname></primary></indexterm>
					<para>¿Es el primer valor de tiempo estrictamente anterior al segundo?</para>
					<para><varname>time &lt;&lt;# time: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2011-01-01, 2011-01-03)' &lt;&lt;# timestampset '{2011-01-03, 2011-01-05}';
-- true
</programlisting>
				</listitem>

				<listitem id="time_after">
					<indexterm><primary><varname>#&gt;&gt;</varname></primary></indexterm>
					<para>¿Es el primer valor de tiempo estrictamente posterior al segundo?</para>
					<para><varname>time #&gt;&gt; time: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2011-01-04, 2011-01-05)' #&gt;&gt;
  periodset '{[2011-01-01, 2011-01-04), [2011-01-05, 2011-01-06)}';
-- true
</programlisting>
				</listitem>

				<listitem id="time_overbefore">
					<indexterm><primary><varname>&amp;&lt;#</varname></primary></indexterm>
					<para>¿No es el primer valor de tiempo posterior al segundo?</para>
					<para><varname>time &amp;&lt;# time: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT timestampset '{2011-01-02, 2011-01-05}' &amp;&lt;# period '[2011-01-01, 2011-01-05)';
-- false
</programlisting>
				</listitem>

				<listitem id="time_overafter">
					<indexterm><primary><varname>#&amp;&gt;</varname></primary></indexterm>
					<para>¿No es el primer valor de tiempo anterior al segundo?</para>
					<para><varname>time #&amp;&gt; time: boolean</varname></para>
					<programlisting xml:space="preserve">
SELECT timestamp '2011-01-01' #&amp;&gt; period '[2011-01-01, 2011-01-05)';
-- true
</programlisting>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2>
			<title>Operadores de distancia</title>

			<para>Hay dos operadores de distancia para los tipos de tiempo. Estos operadores trabajan con períodos delimitadores y calculan la distancia mínima entre los dos valores de tiempo, pero difieren en el tipo de resultado: el operador <varname>&lt;-&gt;</varname> devuelve un tipo <varname>intervalo</varname> SQL estándar, mientras que el operador <varname>|=|</varname> devuelve un <varname>float</varname> que es el número de segundos entre los dos valores de tiempo. El último operador también se puede usar para la búsqueda de vecinos más cercanos usando un índice GiST o SP-GiST (ver <xref linkend="indexing_time_types" />).</para>

			<itemizedlist>
				<listitem id="smallest_distance_interval">
					<indexterm><primary><varname>&lt;-&gt;</varname></primary></indexterm>
					<para>Obtener la distancia mínima en un intervalo</para>
					<para><varname>time &lt;-&gt; time: interval</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2012-01-02, 2012-01-06)' &lt;-&gt; timestamptz '2012-01-07';
-- 1 day
SELECT timestampset '{2012-01-01, 2012-01-03, 2012-01-05}' &lt;-&gt;
  timestampset '{2012-01-02, 2012-01-04}';
--  00:00:00
</programlisting>
				</listitem>

				<listitem id="smallest_distance_secs">
					<indexterm><primary><varname>|=|</varname></primary></indexterm>
					<para>Obtener la distancia mínima en número de segundos</para>
					<para><varname>time |=| time: float</varname></para>
					<programlisting xml:space="preserve">
SELECT period '[2012-01-02, 2012-01-06)' |=| timestamptz '2012-01-07';
-- 86400
SELECT timestampset '{2012-01-01, 2012-01-03, 2012-01-05}' |=|
  timestampset '{2012-01-02, 2012-01-04}';
--  0
</programlisting>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2>
			<title>Funciones agregadas</title>

			<para>Las funciones agregadas temporales generalizan las funciones agregadas tradicionales. Su semántica es que calculan el valor de la función en cada instante de la <emphasis>unión</emphasis> de las extensiones temporales de los valores a agregar. En contraste, recuerde que todas las otras funciones que manipulan tipos de tiempo calculan el valor de la función en cada instante de la <emphasis>intersección</emphasis> de las extensiones temporales de los argumentos.</para>

			<para>Las funciones agregadas temporales son las siguientes:</para>
			<itemizedlist>
				<listitem><para>La función <varname>tcount</varname> generaliza la función tradicional <varname>count</varname>. El conteo temporal se puede utilizar para calcular en cada momento el número de objetos disponibles (por ejemplo, el número of períodos). La función <varname>tcount</varname> devuelve un entero temporal (ver el <xref linkend="temporal_types" />).</para></listitem>
				<listitem><para>La función <varname>extent</varname> devuelve un período delimitador que engloba un conjunto de valores de tiempo.</para></listitem>
			</itemizedlist>

			<para>Del mismo modo, hay una función agregada para los tipos de rango:</para>
			<itemizedlist>
				<listitem><para>La función <varname>extent</varname> devuelve un rango delimitador que engloba un conjunto de valores de rango.</para></listitem>
			</itemizedlist>

			<para>La unión es una operación a muy útil para los tipos de tiempo. Como hemos visto en la <xref linkend="time_set_operators" />, podemos calcular la unión de dos valores de tiempo usando el operador <varname>+</varname>. Sin embargo, también es muy útil tener una versión agregada del operador de unión para combinar un número arbitrario de valores. La función <varname>tunion</varname> se puede utilizar para este propósito.
			</para>

			<itemizedlist>
				<listitem id="time_tcount">
					<indexterm><primary><varname>tcount</varname></primary></indexterm>
					<para>Conteo temporal</para>
					<para><varname>tcount({timestampset,period,periodset}): {tint_instset,tint_seqset}</varname></para>
					<programlisting xml:space="preserve">
WITH times(ts) AS (
  SELECT timestampset '{2000-01-01, 2000-01-03, 2000-01-05}' UNION
  SELECT timestampset '{2000-01-02, 2000-01-04, 2000-01-06}' UNION
  SELECT timestampset '{2000-01-01, 2000-01-02}'
)
SELECT tcount(ts) FROM times;
-- "{2@2000-01-01, 2@2000-01-02, 1@2000-01-03, 1@2000-01-04, 1@2000-01-05, 1@2000-01-06}"

WITH periods(ps) AS (
  SELECT periodset '{[2000-01-01, 2000-01-02], [2000-01-03, 2000-01-04]}' UNION
  SELECT periodset '{[2000-01-01, 2000-01-04], [2000-01-05, 2000-01-06]}' UNION
  SELECT periodset '{[2000-01-02, 2000-01-06]}'
)
SELECT tcount(ps) FROM periods;
-- {[2@2000-01-01, 3@2000-01-02], (2@2000-01-02, 3@2000-01-03, 3@2000-01-04],
   (1@2000-01-04, 2@2000-01-05, 2@2000-01-06]}
</programlisting>
				</listitem>

				<listitem id="time_extent">
					<indexterm><primary><varname>extent</varname></primary></indexterm>
					<para>Período delimitador</para>
					<para><varname>extent({timestampset,period,periodset}): period</varname></para>
					<programlisting xml:space="preserve">
WITH times(ts) AS (
  SELECT timestampset '{2000-01-01, 2000-01-03, 2000-01-05}' UNION
  SELECT timestampset '{2000-01-02, 2000-01-04, 2000-01-06}' UNION
  SELECT timestampset '{2000-01-01, 2000-01-02}'
)
SELECT extent(ts) FROM times;
-- "[2000-01-01, 2000-01-06]"

WITH periods(ps) AS (
  SELECT periodset '{[2000-01-01, 2000-01-02], [2000-01-03, 2000-01-04]}' UNION
  SELECT periodset '{[2000-01-01, 2000-01-04], [2000-01-05, 2000-01-06]}' UNION
  SELECT periodset '{[2000-01-02, 2000-01-06]}'
)
SELECT extent(ps) FROM periods;
-- "[2000-01-01, 2000-01-06]"
</programlisting>
				</listitem>

				<listitem id="range_extent">
					<indexterm><primary><varname>extent</varname></primary></indexterm>
					<para>Rango delimitador</para>
					<para><varname>extent(range): range</varname></para>
					<programlisting xml:space="preserve">
WITH ranges(r) AS (
  SELECT floatrange '[1, 4)' UNION
  SELECT floatrange '(5, 8)' UNION
  SELECT floatrange '(7, 9)'
)
SELECT extent(r) FROM ranges;
-- "[1,9)"
</programlisting>
				</listitem>

				<listitem id="tunion">
					<indexterm><primary><varname>tunion</varname></primary></indexterm>
					<para>Unión temporal</para>
					<para><varname>tunion({timestampset,period,periodset}): {timestampset,periodset}</varname></para>
					<programlisting xml:space="preserve">
WITH times(ts) AS (
  SELECT timestampset '{2000-01-01, 2000-01-03, 2000-01-05}' UNION
  SELECT timestampset '{2000-01-02, 2000-01-04, 2000-01-06}' UNION
  SELECT timestampset '{2000-01-01, 2000-01-02}'
)
SELECT tunion(ts) FROM times;
-- "{2000-01-01, 2000-01-02, 2000-01-03, 2000-01-04, 2000-01-05, 2000-01-06}"
WITH periods(ps) AS (
  SELECT periodset '{[2000-01-01, 2000-01-02], [2000-01-03, 2000-01-04]}' UNION
  SELECT periodset '{[2000-01-02, 2000-01-03], [2000-01-05, 2000-01-06]}' UNION
  SELECT periodset '{[2000-01-07, 2000-01-08]}'
)
SELECT tunion(ps) FROM periods;
-- "{[2000-01-01, 2000-01-04], [2000-01-05, 2000-01-06], [2000-01-07, 2000-01-08]}"
</programlisting>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>

	<sect1 id ="indexing_time_types">
		<title>Indexación de tipos de tiempo</title>

		<para>Se pueden crear índices GiST y SP-GiST en columnas de tablas de los tipos <varname>timestampset</varname>, <varname>period</varname> y <varname>periodset</varname>. El índice GiST implementa un árbol R, mientras que el índice SP-GiST implementa un árbol cuádruple. Un ejemplo de creación de un índice GiST en una columna <varname>During</varname> de tipo <varname>period</varname> en una tabla <varname>Reservation</varname> es como sigue:
			<programlisting xml:space="preserve">
CREATE TABLE Reservation (ReservationID integer PRIMARY KEY, RoomID integer,
  During period);
CREATE INDEX Reservation_During_Idx ON Reservation USING GIST(During);
</programlisting>
		</para>
		<para>Un índice GiST o SP-GiST puede acelerar las consultas que involucran a los siguientes operadores: <varname>=</varname>, <varname>&amp;&amp;</varname>, <varname>&lt;@</varname>, <varname>@&gt;</varname>, <varname>-|-</varname>, <varname>&lt;&lt;</varname>, <varname>&gt;&gt;</varname>, <varname>&amp;&lt;</varname>, <varname>&amp;&gt;</varname> y <varname>|=|</varname>.</para>
		<para>Además, se pueden crear índices de árbol B para columnas de tabla de un tipo de tiempo. Para estos tipos de índices, básicamente la única operación útil es la igualdad. Hay un orden de clasificación de árbol B definido para valores de tipos de tiempo con los correspondientes operadores <varname>&lt;</varname> y <varname>&gt;</varname>, pero el orden es bastante arbitrario y no suele ser útil en el mundo real. El soporte del árbol B está destinado principalmente a permitir la clasificación interna en las consultas, en lugar de la creación de índices reales.</para>
	</sect1>
</chapter>
