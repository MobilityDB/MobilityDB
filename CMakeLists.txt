# Minimum version supporting fixtures
cmake_minimum_required(VERSION 3.7)

# Disallow in-source builds
if( ${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR} )
  message(FATAL_ERROR "In-source builds not allowed.
  Please make a new directory (called a build directory) and run CMake from there.
  You may need to remove 'CMakeCache.txt' and 'CMakeFiles/'.")
endif()

# MobilityDB definitions

# Option used for building the MEOS library
option(MEOS
  "Set ON|OFF (default=OFF) to build the (Mobility Engine Open Source) MEOS library
  "
  OFF
)

# Get the major/minor/micro versions from the text file
file(READ mobdb_version.txt ver)
string(REGEX MATCH "MOBILITYDB_MAJOR_VERSION=([0-9]+)" _ ${ver})
set(MOBILITYDB_MAJOR_VERSION ${CMAKE_MATCH_1})
string(REGEX MATCH "MOBILITYDB_MINOR_VERSION=([0-9]+)" _ ${ver})
set(MOBILITYDB_MINOR_VERSION ${CMAKE_MATCH_1})
string(REGEX MATCH "MOBILITYDB_MICRO_VERSION=([0-9]+)" _ ${ver})
set(MOBILITYDB_MICRO_VERSION ${CMAKE_MATCH_1})
string(REGEX MATCH "MOBILITYDB_MICRO_VERSION=[0-9]+(beta?[0-9]+)" _ ${ver})
set(PROJECT_VERSION_DEV ${CMAKE_MATCH_1})

# Set the name (either MEOS or MobilityDB) and version of the project
if(MEOS)
  message(STATUS "Building the MEOS library")
  project(MEOS VERSION ${MOBILITYDB_MAJOR_VERSION}.${MOBILITYDB_MINOR_VERSION}.${MOBILITYDB_MICRO_VERSION})
  add_definitions(-DMEOS=1)
else()
  message(STATUS "Building MobilityDB")
  project(MobilityDB VERSION ${MOBILITYDB_MAJOR_VERSION}.${MOBILITYDB_MINOR_VERSION}.${MOBILITYDB_MICRO_VERSION})
endif()
set(MOBILITYDB_VERSION "${PROJECT_VERSION}")
set(MOBILITYDB_VERSION_STR "${CMAKE_PROJECT_NAME} ${PROJECT_VERSION}${PROJECT_VERSION_DEV}")
add_definitions(-DMOBILITYDB_VERSION_STR="${MOBILITYDB_VERSION_STR}")

# Set the version and name of the library
set(MOBILITYDB_LIB_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}")
set(MOBILITYDB_LIB_NAME "${CMAKE_PROJECT_NAME}-${MOBILITYDB_LIB_VERSION}")

# Set the name of the PostgreSQL extension and of the internal extension used for testing
string(TOLOWER ${CMAKE_PROJECT_NAME} MOBILITYDB_LOWERCASE_NAME)
set(MOBILITYDB_EXTENSION_FILE "${MOBILITYDB_LOWERCASE_NAME}--${PROJECT_VERSION}.sql")
set(MOBILITYDB_TEST_EXTENSION_FILE "${CMAKE_BINARY_DIR}/test_${MOBILITYDB_EXTENSION_FILE}")

# Comment out code used for debugging purposes so it is not concerned by the coverage
if(CMAKE_BUILD_TYPE MATCHES Debug)
  message(STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")
  add_definitions(-DDEBUG_BUILD)
endif()

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
include(CheckSymbolExists)

include(CTest)
enable_testing()

#-------------------------------------
# Set compiler flags
#-------------------------------------

include(CheckCCompilerFlag)
if(NOT WIN32)
  CHECK_C_COMPILER_FLAG("-fPIC" C_COMPILER_SUPPORTS_FPIC)
  if(C_COMPILER_SUPPORTS_FPIC)
    add_definitions(-fPIC)
  endif()
endif()

check_symbol_exists(ffsl "string.h" HAS_FFSL)
if(NOT HAS_FFSL)
  add_definitions(-DNO_FFSL)
endif()

# add_definitions(-Wall -Wextra -std=gnu1x -Wno-unused-parameter)
add_definitions(-Wall -Wextra -std=gnu1x -Wunused-parameter)
if(CMAKE_COMPILER_IS_GNUCC)
  if(WITH_COVERAGE)
    message(STATUS "Generating code coverage")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
  endif()
endif()

set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O0")

#-------------------------------------
# Verify PostgreSQL Version
#-------------------------------------

if(NOT MEOS)
  set(PG_MIN_MAJOR_VERSION "11")
  set(PG_MAX_MAJOR_VERSION "14")
  find_package(POSTGRESQL ${PG_MIN_MAJOR_VERSION} REQUIRED)
  if(NOT POSTGRES_VERSION VERSION_LESS PG_MAX_MAJOR_VERSION)
    message(FATAL_ERROR "Not supporting PostgreSQL ${POSTGRESQL_VERSION}")
  endif()
  math(EXPR POSTGIS_PGSQL_VERSION "${POSTGRESQL_VERSION_MAJOR} * 10 + ${POSTGRESQL_VERSION_MINOR}")
else()
  set(POSTGRESQL_VERSION_STRING "PostgreSQL 14.2")
  set(POSTGRESQL_VERSION_NUMBER "140200")
endif()
add_definitions(-DPOSTGRESQL_VERSION_STRING="${POSTGRESQL_VERSION_STRING}")
add_definitions(-DPOSTGRESQL_VERSION_NUMBER=${POSTGRESQL_VERSION_NUMBER})

if(MEOS)
  message(STATUS "Building MEOS: Including embedded PostgreSQL files")
  include_directories("postgres")
  add_subdirectory("postgres")
else()
  include_directories(SYSTEM ${POSTGRESQL_INCLUDE_DIR})
  if(WIN32)
    include_directories(SYSTEM ${POSTGRESQL_INCLUDE_DIR}/port/win32)
    if(MSVC)
        include_directories(SYSTEM ${POSTGRESQL_INCLUDE_DIR}/port/win32_msvc/)
    endif()
    link_directories(${POSTGRESQL_LIBRARIES})
    link_libraries(postgres)
  endif()
endif()

#-------------------------------------
# Verify PostGIS Version
#-------------------------------------

if(NOT MEOS)
  find_package(POSTGIS REQUIRED)
else()
  set(POSTGIS_VERSION_STR "PostGIS 3.2.1")
  set(POSTGIS_VERSION_NUMBER "30201")
endif()
add_definitions(-DPOSTGIS_VERSION_STR="${POSTGIS_VERSION_STR}")
add_definitions(-DPOSTGIS_VERSION_NUMBER=${POSTGIS_VERSION_NUMBER})

include(TestBigEndian)
TEST_BIG_ENDIAN(IS_BIG_ENDIAN)
if(IS_BIG_ENDIAN)
  message(STATUS "BIG_ENDIAN")
  add_definitions(-DMOBDB_IS_BIG_ENDIAN=1)
  set(DEF_WORDS_BIGENDIAN "undef")
else()
  message(STATUS "LITTLE_ENDIAN")
  add_definitions(-DMOBDB_IS_BIG_ENDIAN=0)
  set(DEF_WORDS_BIGENDIAN "#undef")
endif()

#--------------------------------
# Other dependencies
#--------------------------------

if(NOT MEOS)
  # Link liblwgeom library for PostGIS 2.5.5
  if(POSTGIS_VERSION_NUMBER LESS 30000)
    find_package(LWGEOM REQUIRED)
    include_directories(SYSTEM ${LWGEOM_INCLUDE_DIRS})
  endif()

  find_package(GSL REQUIRED)
  include_directories(SYSTEM ${GSL_INCLUDE_DIRS})
endif()

find_package(PROJ REQUIRED)
include_directories(SYSTEM ${PROJ_INCLUDE_DIRS})
math(EXPR POSTGIS_PROJ_VERSION "${PROJ_VERSION_MAJOR} * 10 + ${PROJ_VERSION_MINOR}")
message(STATUS "POSTGIS_PROJ_VERSION: ${POSTGIS_PROJ_VERSION}")

find_package(GEOS REQUIRED)
include_directories(SYSTEM ${GEOS_INCLUDE_DIR})
math(EXPR POSTGIS_GEOS_VERSION "${GEOS_VERSION_MAJOR} * 10 + ${GEOS_VERSION_MINOR}")
message(STATUS "POSTGIS_GEOS_VERSION: ${POSTGIS_GEOS_VERSION}")

find_package(JSON-C REQUIRED)
include_directories(SYSTEM ${JSON-C_INCLUDE_DIRS})

#--------------------------------
# Belongs to MobilityDB
# Must go before target_link_libraries

# Embed liblwgeom library for PostGIS 3
if(POSTGIS_VERSION_NUMBER GREATER_EQUAL 30000)
  configure_file(postgis/postgis_config.h.in ${CMAKE_CURRENT_SOURCE_DIR}/postgis/postgis_config.h)
  include_directories("postgis/liblwgeom")
  if(NOT MEOS)
    include_directories("postgis/libpgcommon")
  endif()
  include_directories("postgis")
  add_subdirectory("postgis")
endif()

include_directories("include")
add_subdirectory("src")

# Build the library
set(PROJECT_OBJECTS "$<TARGET_OBJECTS:general>")
set(PROJECT_OBJECTS ${PROJECT_OBJECTS} "$<TARGET_OBJECTS:point>")
if(MEOS)
  message(STATUS "Building MEOS: Network points not included")
  set(PROJECT_OBJECTS ${PROJECT_OBJECTS} "$<TARGET_OBJECTS:common>")
  set(PROJECT_OBJECTS ${PROJECT_OBJECTS} "$<TARGET_OBJECTS:port>")
  set(PROJECT_OBJECTS ${PROJECT_OBJECTS} "$<TARGET_OBJECTS:timezone>")
  set(PROJECT_OBJECTS ${PROJECT_OBJECTS} "$<TARGET_OBJECTS:utils>")
else()
  message(STATUS "Building MobilityDB: Including network points")
  set(PROJECT_OBJECTS ${PROJECT_OBJECTS} "$<TARGET_OBJECTS:npoint>")
endif()
if(POSTGIS_VERSION_NUMBER GREATER_EQUAL 30000)
  set(PROJECT_OBJECTS ${PROJECT_OBJECTS} "$<TARGET_OBJECTS:liblwgeom>")
  if(MEOS)
    message(STATUS "Building MEOS: postgis/libpgcommon not included")
  else()
    message(STATUS "Building MobilityDB: Including postgis/libpgcommon")
    set(PROJECT_OBJECTS ${PROJECT_OBJECTS} "$<TARGET_OBJECTS:libpgcommon>")
  endif()
  set(PROJECT_OBJECTS ${PROJECT_OBJECTS} "$<TARGET_OBJECTS:ryu>")
endif()
add_library(${MOBILITYDB_LIB_NAME} MODULE ${PROJECT_OBJECTS})

if(APPLE)
  set_target_properties(${MOBILITYDB_LIB_NAME} PROPERTIES
    LINK_FLAGS "-Wl,-undefined,dynamic_lookup -bundle_loader /usr/local/bin/postgres")
endif()

#--------------------------------
# Specify libraries to link
#--------------------------------

target_link_libraries(${MOBILITYDB_LIB_NAME} ${JSON-C_LIBRARIES})
if(MEOS)
  target_link_libraries(${MOBILITYDB_LIB_NAME} ${GEOS_LIBRARY})
  target_link_libraries(${MOBILITYDB_LIB_NAME} ${PROJ_LIBRARIES})
else()
  if(POSTGIS_VERSION_NUMBER LESS 30000)
    target_link_libraries(${MOBILITYDB_LIB_NAME} ${LWGEOM_LIBRARIES})
  endif()
  target_link_libraries(${MOBILITYDB_LIB_NAME} ${GSL_LIBRARY})
  target_link_libraries(${MOBILITYDB_LIB_NAME} ${GSL_CBLAS_LIBRARY})
endif()

#--------------------------------
# Belongs to MobilityDB
#--------------------------------

if(MEOS)
  message(STATUS "Building MEOS: SQL definitions and tests not included")
  install(TARGETS ${MOBILITYDB_LIB_NAME} DESTINATION "/usr/local/lib")
  message(STATUS "Building MEOS: Destination library is '/usr/local/lib'")
else()
  message(STATUS "Building MobilityDB: Including SQL definitions and tests")
  add_subdirectory(sql)
  add_subdirectory(test)
  add_custom_target(sqlscript ALL DEPENDS ${CMAKE_BINARY_DIR}/${MOBILITYDB_EXTENSION_FILE})
  add_custom_target(control ALL DEPENDS ${CMAKE_BINARY_DIR}/mobilitydb.control)
  install(
    FILES "${CMAKE_BINARY_DIR}/mobilitydb.control"  "${CMAKE_BINARY_DIR}/${MOBILITYDB_EXTENSION_FILE}"
    DESTINATION "${POSTGRESQL_SHARE_DIR}/extension")
  install(TARGETS ${MOBILITYDB_LIB_NAME} DESTINATION "${POSTGRESQL_DYNLIB_DIR}")
endif()

#-----------------------------------------------------------------------------
# Documentation
#-----------------------------------------------------------------------------

add_subdirectory(doc)
add_subdirectory(doxygen)

#-----------------------------------------------------------------------------
# The End
#-----------------------------------------------------------------------------
